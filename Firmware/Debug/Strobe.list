
Strobe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ef0  08009ef0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009ef0  08009ef0  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ef0  08009ef0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef4  08009ef4  00019ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  200001d8  0800a0d0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  0800a0d0  00021610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011df4  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ac  00000000  00000000  00032038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce9  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b154  00000000  00000000  000372e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015543  00000000  00000000  0005243d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb43  00000000  00000000  00067980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f58  00000000  00000000  000f64c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000fb41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c8c 	.word	0x08009c8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	08009c8c 	.word	0x08009c8c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 fc2e 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f834 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f7ff ffd6 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 80001a0:	f000 fa82 	bl	80006a8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80001a4:	f008 f834 	bl	8008210 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001a8:	f000 fb2a 	bl	8000800 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80001ac:	2100      	movs	r1, #0
 80001ae:	4810      	ldr	r0, [pc, #64]	; (80001f0 <main+0x60>)
 80001b0:	f003 fa56 	bl	8003660 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80001b4:	2100      	movs	r1, #0
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <main+0x64>)
 80001b8:	f003 f9b0 	bl	800351c <HAL_TIM_OC_Start>
  my_parameters.prescaler = 4799;
 80001bc:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <main+0x68>)
 80001be:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80001c2:	831a      	strh	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fill_buffer_flag){
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <main+0x6c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d004      	beq.n	80001d8 <main+0x48>
		  fill_buffer_flag = 0;
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <main+0x6c>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
		  fill_parameters();
 80001d4:	f000 f872 	bl	80002bc <fill_parameters>
	  }

	  if (refresh_parameters){
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <main+0x70>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0f0      	beq.n	80001c4 <main+0x34>
		  refresh_parameters = 0;
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <main+0x70>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	701a      	strb	r2, [r3, #0]
		  set_strob();
 80001e8:	f000 f8f8 	bl	80003dc <set_strob>
	  if (fill_buffer_flag){
 80001ec:	e7ea      	b.n	80001c4 <main+0x34>
 80001ee:	bf00      	nop
 80001f0:	20000258 	.word	0x20000258
 80001f4:	200002a0 	.word	0x200002a0
 80001f8:	20000238 	.word	0x20000238
 80001fc:	20000234 	.word	0x20000234
 8000200:	20000235 	.word	0x20000235

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	; 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f008 fe25 	bl	8008e62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000250:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fc2c 	bl	8002ab8 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f8db 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fe98 	bl	8002fbc <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f8c5 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000296:	2310      	movs	r3, #16
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800029a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800029e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ffe6 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ae:	f000 f8b7 	bl	8000420 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3750      	adds	r7, #80	; 0x50
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <fill_parameters>:

/* USER CODE BEGIN 4 */
void fill_parameters(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
	char sep []= ".";
 80002c2:	232e      	movs	r3, #46	; 0x2e
 80002c4:	81bb      	strh	r3, [r7, #12]
	char *mystr;
	mystr = strtok(buffer, sep);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	4619      	mov	r1, r3
 80002cc:	4840      	ldr	r0, [pc, #256]	; (80003d0 <fill_parameters+0x114>)
 80002ce:	f008 fdd1 	bl	8008e74 <strtok>
 80002d2:	61f8      	str	r0, [r7, #28]

	for (int i=0; i<=6; i++){
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e06d      	b.n	80003b6 <fill_parameters+0xfa>
	   char *mystr_last = mystr;
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	613b      	str	r3, [r7, #16]
	   mystr = strtok (NULL,sep);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	2000      	movs	r0, #0
 80002e6:	f008 fdc5 	bl	8008e74 <strtok>
 80002ea:	61f8      	str	r0, [r7, #28]
	   if(mystr == NULL) break;
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d065      	beq.n	80003be <fill_parameters+0x102>
	   int num = mystr - mystr_last;
 80002f2:	69fa      	ldr	r2, [r7, #28]
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	617b      	str	r3, [r7, #20]
	   (num < 1) ? (num = 1) : (num--);
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dc02      	bgt.n	8000306 <fill_parameters+0x4a>
 8000300:	2301      	movs	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e002      	b.n	800030c <fill_parameters+0x50>
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3b01      	subs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
	   char numeric [7] = {0}; //4 default
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	2100      	movs	r1, #0
 8000316:	460a      	mov	r2, r1
 8000318:	801a      	strh	r2, [r3, #0]
 800031a:	460a      	mov	r2, r1
 800031c:	709a      	strb	r2, [r3, #2]
	   memcpy(&numeric, mystr_last, num);
 800031e:	697a      	ldr	r2, [r7, #20]
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	6939      	ldr	r1, [r7, #16]
 8000324:	4618      	mov	r0, r3
 8000326:	f008 fe74 	bl	8009012 <memcpy>
	   switch (i){
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	2b05      	cmp	r3, #5
 800032e:	d83f      	bhi.n	80003b0 <fill_parameters+0xf4>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <fill_parameters+0x7c>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000351 	.word	0x08000351
 800033c:	08000361 	.word	0x08000361
 8000340:	08000371 	.word	0x08000371
 8000344:	08000381 	.word	0x08000381
 8000348:	08000391 	.word	0x08000391
 800034c:	080003a1 	.word	0x080003a1
		   case 0:
			   my_parameters.status=atoi(numeric);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f008 fbf4 	bl	8008b40 <atoi>
 8000358:	4603      	mov	r3, r0
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <fill_parameters+0x118>)
 800035c:	6013      	str	r3, [r2, #0]
			   break;
 800035e:	e027      	b.n	80003b0 <fill_parameters+0xf4>
		   case 1:
			   my_parameters.power=atoi(numeric);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4618      	mov	r0, r3
 8000364:	f008 fbec 	bl	8008b40 <atoi>
 8000368:	4603      	mov	r3, r0
 800036a:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <fill_parameters+0x118>)
 800036c:	6053      	str	r3, [r2, #4]
			   break;
 800036e:	e01f      	b.n	80003b0 <fill_parameters+0xf4>
		   case 2:
			   my_parameters.light=atoi(numeric);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f008 fbe4 	bl	8008b40 <atoi>
 8000378:	4603      	mov	r3, r0
 800037a:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <fill_parameters+0x118>)
 800037c:	6093      	str	r3, [r2, #8]
			   break;
 800037e:	e017      	b.n	80003b0 <fill_parameters+0xf4>
		   case 3:
			   my_parameters.brightness=atoi(numeric);
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f008 fbdc 	bl	8008b40 <atoi>
 8000388:	4603      	mov	r3, r0
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <fill_parameters+0x118>)
 800038c:	60d3      	str	r3, [r2, #12]

			   break;
 800038e:	e00f      	b.n	80003b0 <fill_parameters+0xf4>
		   case 4:
			   my_parameters.frequency=atoi(numeric);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f008 fbd4 	bl	8008b40 <atoi>
 8000398:	4603      	mov	r3, r0
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <fill_parameters+0x118>)
 800039c:	6113      	str	r3, [r2, #16]

			   break;
 800039e:	e007      	b.n	80003b0 <fill_parameters+0xf4>
		   case 5:
			   my_parameters.period=atoi(numeric);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f008 fbcc 	bl	8008b40 <atoi>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <fill_parameters+0x118>)
 80003ac:	6153      	str	r3, [r2, #20]
			   break;
 80003ae:	bf00      	nop
	for (int i=0; i<=6; i++){
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	3301      	adds	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	dd8e      	ble.n	80002da <fill_parameters+0x1e>
 80003bc:	e000      	b.n	80003c0 <fill_parameters+0x104>
	   if(mystr == NULL) break;
 80003be:	bf00      	nop
	   }
	}

	refresh_parameters = 1;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <fill_parameters+0x11c>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200001f4 	.word	0x200001f4
 80003d4:	20000238 	.word	0x20000238
 80003d8:	20000235 	.word	0x20000235

080003dc <set_strob>:
	uint32_t brightness = (uint32_t)((int)(TIM1->ARR + 1) * my_parameters.brightness) / 100;
	TIM1->CCR1 = brightness; //50% default from PC
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
}

void set_strob (void){
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	uint32_t period = (uint32_t) (my_parameters.period);
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <set_strob+0x3c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	607b      	str	r3, [r7, #4]
	//TIM1->ARR = (period <= 1)?(period):(period - 1);

	uint32_t freq = (uint32_t) ((SystemCoreClock / (TIM2->PSC + 1)) / (my_parameters.frequency) - 1);
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <set_strob+0x40>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f2:	3301      	adds	r3, #1
 80003f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <set_strob+0x3c>)
 80003fa:	6912      	ldr	r2, [r2, #16]
 80003fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000400:	3b01      	subs	r3, #1
 8000402:	603b      	str	r3, [r7, #0]
	TIM2->ARR = freq;
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	62d3      	str	r3, [r2, #44]	; 0x2c
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
//		TIM1->ARR = freq;
//		TIM1->CCR1 = period;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
//	}
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000238 	.word	0x20000238
 800041c:	20000000 	.word	0x20000000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	e7fe      	b.n	8000494 <NMI_Handler+0x4>

08000496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <HardFault_Handler+0x4>

0800049c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <MemManage_Handler+0x4>

080004a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <UsageFault_Handler+0x4>

080004ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d6:	f000 fad3 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80004e6:	f000 fe9e 	bl	8001226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000fb4 	.word	0x20000fb4

080004f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004fa:	f000 fe94 	bl	8001226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000fb4 	.word	0x20000fb4

08000508 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <TIM1_UP_IRQHandler+0x10>)
 800050e:	f003 f9f0 	bl	80038f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000258 	.word	0x20000258

0800051c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return 1;
 8000520:	2301      	movs	r3, #1
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <_kill>:

int _kill(int pid, int sig)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000534:	f008 fd40 	bl	8008fb8 <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	2216      	movs	r2, #22
 800053c:	601a      	str	r2, [r3, #0]
  return -1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_exit>:

void _exit (int status)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000552:	f04f 31ff 	mov.w	r1, #4294967295
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ffe7 	bl	800052a <_kill>
  while (1) {}    /* Make sure we hang here */
 800055c:	e7fe      	b.n	800055c <_exit+0x12>

0800055e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e00a      	b.n	8000586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000570:	f3af 8000 	nop.w
 8000574:	4601      	mov	r1, r0
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	60ba      	str	r2, [r7, #8]
 800057c:	b2ca      	uxtb	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	3301      	adds	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbf0      	blt.n	8000570 <_read+0x12>
  }

  return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	e009      	b.n	80005be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	60ba      	str	r2, [r7, #8]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbf1      	blt.n	80005aa <_write+0x12>
  }
  return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_close>:

int _close(int file)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f6:	605a      	str	r2, [r3, #4]
  return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_isatty>:

int _isatty(int file)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060c:	2301      	movs	r3, #1
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <_sbrk+0x5c>)
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <_sbrk+0x60>)
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x64>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <_sbrk+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d207      	bcs.n	8000670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000660:	f008 fcaa 	bl	8008fb8 <__errno>
 8000664:	4603      	mov	r3, r0
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e009      	b.n	8000684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <_sbrk+0x64>)
 8000680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20005000 	.word	0x20005000
 8000690:	00000400 	.word	0x00000400
 8000694:	20000254 	.word	0x20000254
 8000698:	20001610 	.word	0x20001610

0800069c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2220      	movs	r2, #32
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f008 fbbd 	bl	8008e62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <MX_TIM1_Init+0x150>)
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <MX_TIM1_Init+0x154>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <MX_TIM1_Init+0x150>)
 80006f0:	222f      	movs	r2, #47	; 0x2f
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <MX_TIM1_Init+0x150>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006fa:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <MX_TIM1_Init+0x150>)
 80006fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_TIM1_Init+0x150>)
 800070a:	2201      	movs	r2, #1
 800070c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000714:	4838      	ldr	r0, [pc, #224]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000716:	f002 fe63 	bl	80033e0 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000720:	f7ff fe7e 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000724:	4834      	ldr	r0, [pc, #208]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000726:	f002 feaa 	bl	800347e <HAL_TIM_OC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000730:	f7ff fe76 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000734:	2108      	movs	r1, #8
 8000736:	4830      	ldr	r0, [pc, #192]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000738:	f003 f882 	bl	8003840 <HAL_TIM_OnePulse_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000742:	f7ff fe6d 	bl	8000420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000746:	2306      	movs	r3, #6
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800074a:	2310      	movs	r3, #16
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800074e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000752:	4619      	mov	r1, r3
 8000754:	4828      	ldr	r0, [pc, #160]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000756:	f003 fa31 	bl	8003bbc <HAL_TIM_SlaveConfigSynchro>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000760:	f7ff fe5e 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000770:	4619      	mov	r1, r3
 8000772:	4821      	ldr	r0, [pc, #132]	; (80007f8 <MX_TIM1_Init+0x150>)
 8000774:	f003 fdae 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800077e:	f7ff fe4f 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000782:	2330      	movs	r3, #48	; 0x30
 8000784:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <MX_TIM1_Init+0x150>)
 80007a8:	f003 f9ac 	bl	8003b04 <HAL_TIM_OC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80007b2:	f7ff fe35 	bl	8000420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x150>)
 80007da:	f003 fdd9 	bl	8004390 <HAL_TIMEx_ConfigBreakDeadTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80007e4:	f7ff fe1c 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x150>)
 80007ea:	f000 f8a9 	bl	8000940 <HAL_TIM_MspPostInit>

}
 80007ee:	bf00      	nop
 80007f0:	3758      	adds	r7, #88	; 0x58
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000258 	.word	0x20000258
 80007fc:	40012c00 	.word	0x40012c00

08000800 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_TIM2_Init+0xb8>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM2_Init+0xb8>)
 800082c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_TIM2_Init+0xb8>)
 800083a:	2263      	movs	r2, #99	; 0x63
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xb8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0xb8>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_TIM2_Init+0xb8>)
 800084c:	f002 fe17 	bl	800347e <HAL_TIM_OC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000856:	f7ff fde3 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800085a:	2320      	movs	r3, #32
 800085c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_TIM2_Init+0xb8>)
 800086a:	f003 fd33 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000874:	f7ff fdd4 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <MX_TIM2_Init+0xb8>)
 8000890:	f003 f938 	bl	8003b04 <HAL_TIM_OC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800089a:	f7ff fdc1 	bl	8000420 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_TIM2_Init+0xb8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	699a      	ldr	r2, [r3, #24]
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <MX_TIM2_Init+0xb8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f042 0208 	orr.w	r2, r2, #8
 80008ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002a0 	.word	0x200002a0

080008bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <HAL_TIM_Base_MspInit+0x44>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d113      	bne.n	80008f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_TIM_Base_MspInit+0x48>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_TIM_Base_MspInit+0x48>)
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_TIM_Base_MspInit+0x48>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2019      	movs	r0, #25
 80008ec:	f000 f9bb 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008f0:	2019      	movs	r0, #25
 80008f2:	f000 f9d4 	bl	8000c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40012c00 	.word	0x40012c00
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000918:	d10b      	bne.n	8000932 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_TIM_OC_MspInit+0x34>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_TIM_OC_MspInit+0x34>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_TIM_OC_MspInit+0x34>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_TIM_MspPostInit+0x5c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d118      	bne.n	8000992 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_TIM_MspPostInit+0x60>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_TIM_MspPostInit+0x60>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_TIM_MspPostInit+0x60>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_TIM_MspPostInit+0x64>)
 800098e:	f000 f9a1 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800

080009a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff fe78 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c4:	4c09      	ldr	r4, [pc, #36]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f008 faf7 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fbdb 	bl	8000190 <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80009e4:	08009ef8 	.word	0x08009ef8
  ldr r2, =_sbss
 80009e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80009ec:	20001610 	.word	0x20001610

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f923 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fd0c 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f93b 	bl	8000cba <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f903 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	200002e8 	.word	0x200002e8

08000aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	200002e8 	.word	0x200002e8

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <__NVIC_EnableIRQ+0x34>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff90 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff2d 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff42 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff35 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e169      	b.n	8000fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8158 	bne.w	8000fb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4a9a      	ldr	r2, [pc, #616]	; (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d05e      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d10:	4a98      	ldr	r2, [pc, #608]	; (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d875      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d16:	4a98      	ldr	r2, [pc, #608]	; (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d058      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d1c:	4a96      	ldr	r2, [pc, #600]	; (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d86f      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d22:	4a96      	ldr	r2, [pc, #600]	; (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d052      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d28:	4a94      	ldr	r2, [pc, #592]	; (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d869      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d2e:	4a94      	ldr	r2, [pc, #592]	; (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d04c      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d34:	4a92      	ldr	r2, [pc, #584]	; (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d863      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d3a:	4a92      	ldr	r2, [pc, #584]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d046      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d40:	4a90      	ldr	r2, [pc, #576]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d85d      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d82a      	bhi.n	8000da0 <HAL_GPIO_Init+0xcc>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d859      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d4e:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <HAL_GPIO_Init+0x80>)
 8000d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d54:	08000dcf 	.word	0x08000dcf
 8000d58:	08000da9 	.word	0x08000da9
 8000d5c:	08000dbb 	.word	0x08000dbb
 8000d60:	08000dfd 	.word	0x08000dfd
 8000d64:	08000e03 	.word	0x08000e03
 8000d68:	08000e03 	.word	0x08000e03
 8000d6c:	08000e03 	.word	0x08000e03
 8000d70:	08000e03 	.word	0x08000e03
 8000d74:	08000e03 	.word	0x08000e03
 8000d78:	08000e03 	.word	0x08000e03
 8000d7c:	08000e03 	.word	0x08000e03
 8000d80:	08000e03 	.word	0x08000e03
 8000d84:	08000e03 	.word	0x08000e03
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000e03 	.word	0x08000e03
 8000d90:	08000e03 	.word	0x08000e03
 8000d94:	08000e03 	.word	0x08000e03
 8000d98:	08000db1 	.word	0x08000db1
 8000d9c:	08000dc5 	.word	0x08000dc5
 8000da0:	4a79      	ldr	r2, [pc, #484]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da6:	e02c      	b.n	8000e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e029      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	3304      	adds	r3, #4
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e024      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e01f      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	330c      	adds	r3, #12
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	e01a      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e013      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	611a      	str	r2, [r3, #16]
          break;
 8000dee:	e009      	b.n	8000e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	615a      	str	r2, [r3, #20]
          break;
 8000dfa:	e003      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          break;
 8000e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	2bff      	cmp	r3, #255	; 0xff
 8000e08:	d801      	bhi.n	8000e0e <HAL_GPIO_Init+0x13a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	e001      	b.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3304      	adds	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d802      	bhi.n	8000e20 <HAL_GPIO_Init+0x14c>
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x152>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	3b08      	subs	r3, #8
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	6a39      	ldr	r1, [r7, #32]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a40      	ldr	r2, [pc, #256]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d013      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3f      	ldr	r2, [pc, #252]	; (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d007      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d101      	bne.n	8000eb4 <HAL_GPIO_Init+0x1e0>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed2:	492f      	ldr	r1, [pc, #188]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	492c      	ldr	r1, [pc, #176]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4928      	ldr	r1, [pc, #160]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	4922      	ldr	r1, [pc, #136]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60cb      	str	r3, [r1, #12]
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	491e      	ldr	r1, [pc, #120]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4918      	ldr	r1, [pc, #96]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e021      	b.n	8000fb6 <HAL_GPIO_Init+0x2e2>
 8000f72:	bf00      	nop
 8000f74:	10320000 	.word	0x10320000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10220000 	.word	0x10220000
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10120000 	.word	0x10120000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40010800 	.word	0x40010800
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40011400 	.word	0x40011400
 8000fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3301      	adds	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f47f ae8e 	bne.w	8000ce8 <HAL_GPIO_Init+0x14>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	372c      	adds	r7, #44	; 0x2c
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af06      	add	r7, sp, #24
 8000fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0f1      	b.n	80011d2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f007 faea 	bl	80085dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fa44 	bl	80044a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	687e      	ldr	r6, [r7, #4]
 8001022:	466d      	mov	r5, sp
 8001024:	f106 0410 	add.w	r4, r6, #16
 8001028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	602b      	str	r3, [r5, #0]
 8001030:	1d33      	adds	r3, r6, #4
 8001032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f003 fa0e 	bl	8004456 <USB_CoreInit>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0c2      	b.n	80011d2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fa3f 	bl	80044d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e040      	b.n	80010e0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3301      	adds	r3, #1
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3303      	adds	r3, #3
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3338      	adds	r3, #56	; 0x38
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	333c      	adds	r3, #60	; 0x3c
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	3340      	adds	r3, #64	; 0x40
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	3301      	adds	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3b9      	bcc.n	800105e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e044      	b.n	800117a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3b5      	bcc.n	80010f0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	687e      	ldr	r6, [r7, #4]
 800118c:	466d      	mov	r5, sp
 800118e:	f106 0410 	add.w	r4, r6, #16
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	602b      	str	r3, [r5, #0]
 800119a:	1d33      	adds	r3, r6, #4
 800119c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f003 f9a5 	bl	80044ee <USB_DevInit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00d      	b.n	80011d2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f005 fc27 	bl	8006a1e <USB_DevDisconnect>

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_PCD_Start+0x16>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e016      	b.n	800121e <HAL_PCD_Start+0x44>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f93a 	bl	8004476 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001202:	2101      	movs	r1, #1
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f007 fc64 	bl	8008ad2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fbfb 	bl	8006a0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b088      	sub	sp, #32
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fbfd 	bl	8006a32 <USB_ReadInterrupts>
 8001238:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fb1b 	bl	8001880 <PCD_EP_ISR_Handler>

    return;
 800124a:	e119      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001252:	2b00      	cmp	r3, #0
 8001254:	d013      	beq.n	800127e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001268:	b292      	uxth	r2, r2
 800126a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f007 fa37 	bl	80086e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001274:	2100      	movs	r1, #0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f905 	bl	8001486 <HAL_PCD_SetAddress>

    return;
 800127c:	e100      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800129a:	b292      	uxth	r2, r2
 800129c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012a0:	e0ee      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00c      	beq.n	80012c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012be:	b292      	uxth	r2, r2
 80012c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012c4:	e0dc      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d027      	beq.n	8001320 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0204 	bic.w	r2, r2, #4
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0208 	bic.w	r2, r2, #8
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f007 fa27 	bl	8008754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001318:	b292      	uxth	r2, r2
 800131a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800131e:	e0af      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8083 	beq.w	8001432 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	e010      	b.n	8001354 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	441a      	add	r2, r3
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	8812      	ldrh	r2, [r2, #0]
 8001342:	b292      	uxth	r2, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	3301      	adds	r3, #1
 8001352:	77fb      	strb	r3, [r7, #31]
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d9eb      	bls.n	8001332 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001362:	b29a      	uxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	b292      	uxth	r2, r2
 800136e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800138a:	bf00      	nop
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001394:	b29b      	uxth	r3, r3
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f6      	beq.n	800138c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]
 80013ba:	e00f      	b.n	80013dc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	4611      	mov	r1, r2
 80013c4:	7ffa      	ldrb	r2, [r7, #31]
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	440a      	add	r2, r1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	3320      	adds	r3, #32
 80013ce:	443b      	add	r3, r7
 80013d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013d4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	d9ec      	bls.n	80013bc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0208 	orr.w	r2, r2, #8
 80013f4:	b292      	uxth	r2, r2
 80013f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140c:	b292      	uxth	r2, r2
 800140e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f007 f978 	bl	8008720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001430:	e026      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00f      	beq.n	800145c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800144e:	b292      	uxth	r2, r2
 8001450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f007 f936 	bl	80086c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800145a:	e011      	b.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146e:	b29a      	uxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	b292      	uxth	r2, r2
 800147a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800147e:	bf00      	nop
  }
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_PCD_SetAddress+0x1a>
 800149c:	2302      	movs	r3, #2
 800149e:	e013      	b.n	80014c8 <HAL_PCD_SetAddress+0x42>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fa93 	bl	80069e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	70fb      	strb	r3, [r7, #3]
 80014e2:	460b      	mov	r3, r1
 80014e4:	803b      	strh	r3, [r7, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da0e      	bge.n	8001514 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	705a      	strb	r2, [r3, #1]
 8001512:	e00e      	b.n	8001532 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0207 	and.w	r2, r3, #7
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800153e:	883a      	ldrh	r2, [r7, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	78ba      	ldrb	r2, [r7, #2]
 8001548:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800154a:	78bb      	ldrb	r3, [r7, #2]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d102      	bne.n	8001556 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_PCD_EP_Open+0x94>
 8001560:	2302      	movs	r3, #2
 8001562:	e00e      	b.n	8001582 <HAL_PCD_EP_Open+0xb2>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 ffdc 	bl	8004530 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001580:	7afb      	ldrb	r3, [r7, #11]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da0e      	bge.n	80015bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	705a      	strb	r2, [r3, #1]
 80015ba:	e00e      	b.n	80015da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0207 	and.w	r2, r3, #7
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_PCD_EP_Close+0x6a>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e00e      	b.n	8001612 <HAL_PCD_EP_Close+0x88>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fb54 	bl	8004cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	460b      	mov	r3, r1
 8001628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	f003 0207 	and.w	r2, r3, #7
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	b2da      	uxtb	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd0b 	bl	8005088 <USB_EPStartXfer>

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	460b      	mov	r3, r1
 80016b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2201      	movs	r2, #1
 80016f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6979      	ldr	r1, [r7, #20]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fcbd 	bl	8005088 <USB_EPStartXfer>

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0207 	and.w	r2, r3, #7
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d901      	bls.n	8001736 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e04c      	b.n	80017d0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da0e      	bge.n	800175c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	705a      	strb	r2, [r3, #1]
 800175a:	e00c      	b.n	8001776 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_PCD_EP_SetStall+0x7e>
 8001792:	2302      	movs	r3, #2
 8001794:	e01c      	b.n	80017d0 <HAL_PCD_EP_SetStall+0xb8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 f820 	bl	80067ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f005 f945 	bl	8006a50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 020f 	and.w	r2, r3, #15
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d901      	bls.n	80017f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e040      	b.n	8001878 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0e      	bge.n	800181c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	705a      	strb	r2, [r3, #1]
 800181a:	e00e      	b.n	800183a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_EP_ClrStall+0x82>
 8001856:	2302      	movs	r3, #2
 8001858:	e00e      	b.n	8001878 <HAL_PCD_EP_ClrStall+0xa0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f005 f80e 	bl	800688a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001888:	e3bf      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001896:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80018a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 8179 	bne.w	8001ba0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d152      	bne.n	8001960 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ca:	81fb      	strh	r3, [r7, #14]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018da:	b29b      	uxth	r3, r3
 80018dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3328      	adds	r3, #40	; 0x28
 80018e2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	3302      	adds	r3, #2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	441a      	add	r2, r3
 800191a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f006 feb6 	bl	8008692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 836b 	beq.w	800200a <PCD_EP_ISR_Handler+0x78a>
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 8366 	bne.w	800200a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b292      	uxth	r2, r2
 8001952:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800195e:	e354      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001966:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	2b00      	cmp	r3, #0
 800197c:	d034      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	3306      	adds	r3, #6
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f005 f897 	bl	8006af0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019ce:	4013      	ands	r3, r2
 80019d0:	823b      	strh	r3, [r7, #16]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	8a3a      	ldrh	r2, [r7, #16]
 80019d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019dc:	b292      	uxth	r2, r2
 80019de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fe29 	bl	8008638 <HAL_PCD_SetupStageCallback>
 80019e6:	e310      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f280 830c 	bge.w	800200a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019fe:	4013      	ands	r3, r2
 8001a00:	83fb      	strh	r3, [r7, #30]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	8bfa      	ldrh	r2, [r7, #30]
 8001a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	3306      	adds	r3, #6
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d019      	beq.n	8001a78 <PCD_EP_ISR_Handler+0x1f8>
 8001a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	6959      	ldr	r1, [r3, #20]
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f005 f847 	bl	8006af0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f006 fdf2 	bl	800865c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 82bd 	bne.w	800200a <PCD_EP_ISR_Handler+0x78a>
 8001a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a94:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a9c:	f000 82b5 	beq.w	800200a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad6:	d91d      	bls.n	8001b14 <PCD_EP_ISR_Handler+0x294>
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <PCD_EP_ISR_Handler+0x272>
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aee:	3b01      	subs	r3, #1
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	801a      	strh	r2, [r3, #0]
 8001b12:	e026      	b.n	8001b62 <PCD_EP_ISR_Handler+0x2e2>
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <PCD_EP_ISR_Handler+0x2b2>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	e017      	b.n	8001b62 <PCD_EP_ISR_Handler+0x2e2>
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <PCD_EP_ISR_Handler+0x2cc>
 8001b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b48:	3301      	adds	r3, #1
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b72:	827b      	strh	r3, [r7, #18]
 8001b74:	8a7b      	ldrh	r3, [r7, #18]
 8001b76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b7a:	827b      	strh	r3, [r7, #18]
 8001b7c:	8a7b      	ldrh	r3, [r7, #18]
 8001b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b82:	827b      	strh	r3, [r7, #18]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	8013      	strh	r3, [r2, #0]
 8001b9e:	e234      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bb4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f280 80fc 	bge.w	8001db6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001bec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bf4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	7b1b      	ldrb	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d125      	bne.n	8001c5e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	3306      	adds	r3, #6
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8092 	beq.w	8001d6c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	6959      	ldr	r1, [r3, #20]
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	88da      	ldrh	r2, [r3, #6]
 8001c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c58:	f004 ff4a 	bl	8006af0 <USB_ReadPMA>
 8001c5c:	e086      	b.n	8001d6c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	78db      	ldrb	r3, [r3, #3]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d10a      	bne.n	8001c7c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f9d9 	bl	8002026 <HAL_PCD_EP_DB_Receive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c7a:	e077      	b.n	8001d6c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	441a      	add	r2, r3
 8001ca8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d024      	beq.n	8001d24 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d02e      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	891a      	ldrh	r2, [r3, #8]
 8001d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d1e:	f004 fee7 	bl	8006af0 <USB_ReadPMA>
 8001d22:	e023      	b.n	8001d6c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	3306      	adds	r3, #6
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	6959      	ldr	r1, [r3, #20]
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	895a      	ldrh	r2, [r3, #10]
 8001d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d68:	f004 fec2 	bl	8006af0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d74:	441a      	add	r2, r3
 8001d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d82:	441a      	add	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x51c>
 8001d90:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d206      	bcs.n	8001daa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fc5a 	bl	800865c <HAL_PCD_DataOutStageCallback>
 8001da8:	e005      	b.n	8001db6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 f969 	bl	8005088 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001db6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8123 	beq.w	800200a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	78db      	ldrb	r3, [r3, #3]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 80a2 	bne.w	8001f62 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	7b1b      	ldrb	r3, [r3, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8093 	beq.w	8001f54 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d046      	beq.n	8001ec8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	785b      	ldrb	r3, [r3, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d126      	bne.n	8001e90 <PCD_EP_ISR_Handler+0x610>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	4413      	add	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	011a      	lsls	r2, r3, #4
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	4413      	add	r3, r2
 8001e64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e68:	623b      	str	r3, [r7, #32]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	e061      	b.n	8001f54 <PCD_EP_ISR_Handler+0x6d4>
 8001e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d15d      	bne.n	8001f54 <PCD_EP_ISR_Handler+0x6d4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	4413      	add	r3, r2
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	011a      	lsls	r2, r3, #4
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	4413      	add	r3, r2
 8001eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	e045      	b.n	8001f54 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d126      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x6a4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	4413      	add	r3, r2
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	011a      	lsls	r2, r3, #4
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	e017      	b.n	8001f54 <PCD_EP_ISR_Handler+0x6d4>
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d113      	bne.n	8001f54 <PCD_EP_ISR_Handler+0x6d4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3a:	4413      	add	r3, r2
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	011a      	lsls	r2, r3, #4
 8001f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f46:	4413      	add	r3, r2
 8001f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	2200      	movs	r2, #0
 8001f52:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f006 fb99 	bl	8008692 <HAL_PCD_DataInStageCallback>
 8001f60:	e053      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d146      	bne.n	8001ffc <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	3302      	adds	r3, #2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d907      	bls.n	8001fb6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb2:	619a      	str	r2, [r3, #24]
 8001fb4:	e002      	b.n	8001fbc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f006 fb61 	bl	8008692 <HAL_PCD_DataInStageCallback>
 8001fd0:	e01b      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fda:	441a      	add	r2, r3
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fde:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fe8:	441a      	add	r2, r3
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f847 	bl	8005088 <USB_EPStartXfer>
 8001ffa:	e006      	b.n	800200a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ffc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002000:	461a      	mov	r2, r3
 8002002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f91b 	bl	8002240 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002012:	b29b      	uxth	r3, r3
 8002014:	b21b      	sxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f6ff ac37 	blt.w	800188a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3758      	adds	r7, #88	; 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b088      	sub	sp, #32
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	4613      	mov	r3, r2
 8002032:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07e      	beq.n	800213c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	3302      	adds	r3, #2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002066:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	8b7b      	ldrh	r3, [r7, #26]
 800206e:	429a      	cmp	r2, r3
 8002070:	d306      	bcc.n	8002080 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	8b7b      	ldrh	r3, [r7, #26]
 8002078:	1ad2      	subs	r2, r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	619a      	str	r2, [r3, #24]
 800207e:	e002      	b.n	8002086 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d123      	bne.n	80020d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a8:	833b      	strh	r3, [r7, #24]
 80020aa:	8b3b      	ldrh	r3, [r7, #24]
 80020ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020b0:	833b      	strh	r3, [r7, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	441a      	add	r2, r3
 80020c0:	8b3b      	ldrh	r3, [r7, #24]
 80020c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01f      	beq.n	8002120 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	82fb      	strh	r3, [r7, #22]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	8afb      	ldrh	r3, [r7, #22]
 800210c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800211c:	b29b      	uxth	r3, r3
 800211e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002120:	8b7b      	ldrh	r3, [r7, #26]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8087 	beq.w	8002236 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6959      	ldr	r1, [r3, #20]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	891a      	ldrh	r2, [r3, #8]
 8002134:	8b7b      	ldrh	r3, [r7, #26]
 8002136:	f004 fcdb 	bl	8006af0 <USB_ReadPMA>
 800213a:	e07c      	b.n	8002236 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	3306      	adds	r3, #6
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002164:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	8b7b      	ldrh	r3, [r7, #26]
 800216c:	429a      	cmp	r2, r3
 800216e:	d306      	bcc.n	800217e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	8b7b      	ldrh	r3, [r7, #26]
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	619a      	str	r2, [r3, #24]
 800217c:	e002      	b.n	8002184 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d123      	bne.n	80021d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	83fb      	strh	r3, [r7, #30]
 80021a8:	8bfb      	ldrh	r3, [r7, #30]
 80021aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ae:	83fb      	strh	r3, [r7, #30]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	8bfb      	ldrh	r3, [r7, #30]
 80021c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11f      	bne.n	800221e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f8:	83bb      	strh	r3, [r7, #28]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	441a      	add	r2, r3
 8002208:	8bbb      	ldrh	r3, [r7, #28]
 800220a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800221a:	b29b      	uxth	r3, r3
 800221c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800221e:	8b7b      	ldrh	r3, [r7, #26]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	895a      	ldrh	r2, [r3, #10]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	f004 fc5d 	bl	8006af0 <USB_ReadPMA>
    }
  }

  return count;
 8002236:	8b7b      	ldrh	r3, [r7, #26]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b0a4      	sub	sp, #144	; 0x90
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 81dd 	beq.w	8002614 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	3302      	adds	r3, #2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002282:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800228e:	429a      	cmp	r2, r3
 8002290:	d907      	bls.n	80022a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	e002      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 80b9 	bne.w	8002424 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d126      	bne.n	8002308 <HAL_PCD_EP_DB_Transmit+0xc8>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	4413      	add	r3, r2
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	011a      	lsls	r2, r3, #4
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	4413      	add	r3, r2
 80022dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002300:	b29a      	uxth	r2, r3
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	e01a      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d116      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002324:	4413      	add	r3, r2
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	011a      	lsls	r2, r3, #4
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	4413      	add	r3, r2
 8002332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d126      	bne.n	800239a <HAL_PCD_EP_DB_Transmit+0x15a>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	011a      	lsls	r2, r3, #4
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237e:	b29a      	uxth	r2, r3
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002392:	b29a      	uxth	r2, r3
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e017      	b.n	80023ca <HAL_PCD_EP_DB_Transmit+0x18a>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	785b      	ldrb	r3, [r3, #1]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d113      	bne.n	80023ca <HAL_PCD_EP_DB_Transmit+0x18a>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	4413      	add	r3, r2
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	011a      	lsls	r2, r3, #4
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	4413      	add	r3, r2
 80023be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023c2:	623b      	str	r3, [r7, #32]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2200      	movs	r2, #0
 80023c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f006 f95e 	bl	8008692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 82fc 	beq.w	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fc:	82fb      	strh	r3, [r7, #22]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	441a      	add	r2, r3
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241e:	b29b      	uxth	r3, r3
 8002420:	8013      	strh	r3, [r2, #0]
 8002422:	e2da      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d021      	beq.n	8002472 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800245e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246e:	b29b      	uxth	r3, r3
 8002470:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002478:	2b01      	cmp	r3, #1
 800247a:	f040 82ae 	bne.w	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002486:	441a      	add	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002494:	441a      	add	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d30b      	bcc.n	80024be <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	e017      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024d6:	e00a      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d165      	bne.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x382>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250a:	4413      	add	r3, r2
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	011a      	lsls	r2, r3, #4
 8002514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002516:	4413      	add	r3, r2
 8002518:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002528:	b29a      	uxth	r2, r3
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002532:	2b3e      	cmp	r3, #62	; 0x3e
 8002534:	d91d      	bls.n	8002572 <HAL_PCD_EP_DB_Transmit+0x332>
 8002536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
 800253e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x310>
 800254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254c:	3b01      	subs	r3, #1
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29a      	uxth	r2, r3
 8002556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002558:	b29b      	uxth	r3, r3
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	b29b      	uxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e044      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_PCD_EP_DB_Transmit+0x350>
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002588:	b29a      	uxth	r2, r3
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e035      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_PCD_EP_DB_Transmit+0x36a>
 80025a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a6:	3301      	adds	r3, #1
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	e01c      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d118      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	647b      	str	r3, [r7, #68]	; 0x44
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	4413      	add	r3, r2
 80025e0:	647b      	str	r3, [r7, #68]	; 0x44
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	011a      	lsls	r2, r3, #4
 80025e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ea:	4413      	add	r3, r2
 80025ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
 80025f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6959      	ldr	r1, [r3, #20]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	891a      	ldrh	r2, [r3, #8]
 8002608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260c:	b29b      	uxth	r3, r3
 800260e:	f004 fa2a 	bl	8006a66 <USB_WritePMA>
 8002612:	e1e2      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	3306      	adds	r3, #6
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002648:	429a      	cmp	r2, r3
 800264a:	d307      	bcc.n	800265c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e002      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80c0 	bne.w	80027ec <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d126      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002688:	4413      	add	r3, r2
 800268a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	011a      	lsls	r2, r3, #4
 8002692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002694:	4413      	add	r3, r2
 8002696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800269a:	67bb      	str	r3, [r7, #120]	; 0x78
 800269c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e01a      	b.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d116      	bne.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	667b      	str	r3, [r7, #100]	; 0x64
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026de:	4413      	add	r3, r2
 80026e0:	667b      	str	r3, [r7, #100]	; 0x64
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	011a      	lsls	r2, r3, #4
 80026e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ea:	4413      	add	r3, r2
 80026ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
 80026f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f4:	2200      	movs	r2, #0
 80026f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	677b      	str	r3, [r7, #116]	; 0x74
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d12b      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271a:	4413      	add	r3, r2
 800271c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	011a      	lsls	r2, r3, #4
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	4413      	add	r3, r2
 8002728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	b29a      	uxth	r2, r3
 800273e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	e017      	b.n	800278e <HAL_PCD_EP_DB_Transmit+0x54e>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d113      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002774:	4413      	add	r3, r2
 8002776:	677b      	str	r3, [r7, #116]	; 0x74
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	011a      	lsls	r2, r3, #4
 800277e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002780:	4413      	add	r3, r2
 8002782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002786:	673b      	str	r3, [r7, #112]	; 0x70
 8002788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f005 ff7c 	bl	8008692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 811a 	bne.w	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	8013      	strh	r3, [r2, #0]
 80027ea:	e0f6      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d121      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002836:	b29b      	uxth	r3, r3
 8002838:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80ca 	bne.w	80029da <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800284e:	441a      	add	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800285c:	441a      	add	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d30b      	bcc.n	8002886 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	621a      	str	r2, [r3, #32]
 8002884:	e017      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800288e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800289e:	e00a      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	657b      	str	r3, [r7, #84]	; 0x54
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d165      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x750>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d8:	4413      	add	r3, r2
 80028da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	011a      	lsls	r2, r3, #4
 80028e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002900:	2b3e      	cmp	r3, #62	; 0x3e
 8002902:	d91d      	bls.n	8002940 <HAL_PCD_EP_DB_Transmit+0x700>
 8002904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
 800290c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291a:	3b01      	subs	r3, #1
 800291c:	66bb      	str	r3, [r7, #104]	; 0x68
 800291e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29a      	uxth	r2, r3
 8002924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002926:	b29b      	uxth	r3, r3
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	b29b      	uxth	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002938:	b29a      	uxth	r2, r3
 800293a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	e041      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002956:	b29a      	uxth	r2, r3
 8002958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295a:	801a      	strh	r2, [r3, #0]
 800295c:	e032      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x784>
 800295e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	66bb      	str	r3, [r7, #104]	; 0x68
 8002966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_PCD_EP_DB_Transmit+0x738>
 8002972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002974:	3301      	adds	r3, #1
 8002976:	66bb      	str	r3, [r7, #104]	; 0x68
 8002978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29a      	uxth	r2, r3
 800297e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002980:	b29b      	uxth	r3, r3
 8002982:	029b      	lsls	r3, r3, #10
 8002984:	b29b      	uxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b29a      	uxth	r2, r3
 800298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e019      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d115      	bne.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a6:	4413      	add	r3, r2
 80029a8:	657b      	str	r3, [r7, #84]	; 0x54
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	011a      	lsls	r2, r3, #4
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	4413      	add	r3, r2
 80029b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b8:	653b      	str	r3, [r7, #80]	; 0x50
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029be:	b29a      	uxth	r2, r3
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6959      	ldr	r1, [r3, #20]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	895a      	ldrh	r2, [r3, #10]
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f004 f846 	bl	8006a66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f4:	82bb      	strh	r3, [r7, #20]
 80029f6:	8abb      	ldrh	r3, [r7, #20]
 80029f8:	f083 0310 	eor.w	r3, r3, #16
 80029fc:	82bb      	strh	r3, [r7, #20]
 80029fe:	8abb      	ldrh	r3, [r7, #20]
 8002a00:	f083 0320 	eor.w	r3, r3, #32
 8002a04:	82bb      	strh	r3, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	441a      	add	r2, r3
 8002a14:	8abb      	ldrh	r3, [r7, #20]
 8002a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3790      	adds	r7, #144	; 0x90
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	4613      	mov	r3, r2
 8002a44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e009      	b.n	8002a7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a6a:	897a      	ldrh	r2, [r7, #10]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2200      	movs	r2, #0
 8002a88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	80da      	strh	r2, [r3, #6]
 8002a92:	e00b      	b.n	8002aac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2201      	movs	r2, #1
 8002a98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e272      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8087 	beq.w	8002be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d00c      	beq.n	8002afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae4:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d112      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d10b      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x12c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d168      	bne.n	8002be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e24c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x76>
 8002b20:	4b80      	ldr	r3, [pc, #512]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7f      	ldr	r2, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e02e      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a77      	ldr	r2, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0xbc>
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6a      	ldr	r2, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fd ff86 	bl	8000aa4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fd ff82 	bl	8000aa4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e200      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xe4>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fd ff72 	bl	8000aa4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fd ff6e 	bl	8000aa4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ec      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x10c>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bfe:	4b49      	ldr	r3, [pc, #292]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c0      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4939      	ldr	r1, [pc, #228]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fd ff27 	bl	8000aa4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fd ff23 	bl	8000aa4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4927      	ldr	r1, [pc, #156]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fd ff06 	bl	8000aa4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fd ff02 	bl	8000aa4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e180      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fd fee6 	bl	8000aa4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fd fee2 	bl	8000aa4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e160      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 fa9c 	bl	8003238 <RCC_Delay>
 8002d00:	e01c      	b.n	8002d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7fd fecc 	bl	8000aa4 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fd fec8 	bl	8000aa4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e146      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	42420000 	.word	0x42420000
 8002d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e9      	bne.n	8002d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a6 	beq.w	8002e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a87      	ldr	r2, [pc, #540]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b85      	ldr	r3, [pc, #532]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7fd fe89 	bl	8000aa4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7fd fe85 	bl	8000aa4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e103      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x312>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e02d      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x334>
 8002dd2:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a69      	ldr	r2, [pc, #420]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a66      	ldr	r2, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	e01c      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x356>
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a60      	ldr	r2, [pc, #384]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d015      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fd fe39 	bl	8000aa4 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fd fe35 	bl	8000aa4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0b1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCC_OscConfig+0x37e>
 8002e58:	e014      	b.n	8002e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fd fe23 	bl	8000aa4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fd fe1f 	bl	8000aa4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e09b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d061      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d146      	bne.n	8002f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fd fdf3 	bl	8000aa4 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fd fdef 	bl	8000aa4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e06d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4921      	ldr	r1, [pc, #132]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a19      	ldr	r1, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fdc3 	bl	8000aa4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fdbf 	bl	8000aa4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e03d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46a>
 8002f40:	e035      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd fdac 	bl	8000aa4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd fda8 	bl	8000aa4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e026      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x498>
 8002f6e:	e01e      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e019      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x500>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d0      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4965      	ldr	r1, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800303a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d040      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e073      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4936      	ldr	r1, [pc, #216]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fd fcfa 	bl	8000aa4 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fd fcf6 	bl	8000aa4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e053      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d210      	bcs.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1cc>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fc58 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	08009cec 	.word	0x08009cec
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x36>
 80031be:	e027      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	e027      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0c9b      	lsrs	r3, r3, #18
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c5b      	lsrs	r3, r3, #17
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031f2:	fb03 f202 	mul.w	r2, r3, r2
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e004      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 8003212:	613b      	str	r3, [r7, #16]
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	693b      	ldr	r3, [r7, #16]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	08009cfc 	.word	0x08009cfc
 8003230:	08009d0c 	.word	0x08009d0c
 8003234:	003d0900 	.word	0x003d0900

08003238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <RCC_Delay+0x34>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <RCC_Delay+0x38>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a5b      	lsrs	r3, r3, #9
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003254:	bf00      	nop
  }
  while (Delay --);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1e5a      	subs	r2, r3, #1
 800325a:	60fa      	str	r2, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <RCC_Delay+0x1c>
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	20000000 	.word	0x20000000
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d07d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	61d3      	str	r3, [r2, #28]
 80032ac:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d118      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a42      	ldr	r2, [pc, #264]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d4:	f7fd fbe6 	bl	8000aa4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fd fbe2 	bl	8000aa4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e06d      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02e      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d027      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003328:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800332e:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fd fbb1 	bl	8000aa4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fbad 	bl	8000aa4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e036      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4917      	ldr	r1, [pc, #92]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	4313      	orrs	r3, r2
 8003378:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	490b      	ldr	r1, [pc, #44]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4904      	ldr	r1, [pc, #16]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
 80033dc:	42420440 	.word	0x42420440

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fa58 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fc3c 	bl	8003c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e041      	b.n	8003514 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd fa2f 	bl	8000908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fbed 	bl	8003c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_TIM_OC_Start+0x24>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e022      	b.n	8003586 <HAL_TIM_OC_Start+0x6a>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d109      	bne.n	800355a <HAL_TIM_OC_Start+0x3e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e015      	b.n	8003586 <HAL_TIM_OC_Start+0x6a>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d109      	bne.n	8003574 <HAL_TIM_OC_Start+0x58>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e008      	b.n	8003586 <HAL_TIM_OC_Start+0x6a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e05e      	b.n	800364c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_TIM_OC_Start+0x82>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359c:	e013      	b.n	80035c6 <HAL_TIM_OC_Start+0xaa>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_OC_Start+0x92>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ac:	e00b      	b.n	80035c6 <HAL_TIM_OC_Start+0xaa>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_TIM_OC_Start+0xa2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	e003      	b.n	80035c6 <HAL_TIM_OC_Start+0xaa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fe5b 	bl	800428a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <HAL_TIM_OC_Start+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d107      	bne.n	80035ee <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_TIM_OC_Start+0x138>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIM_OC_Start+0xfa>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d009      	beq.n	8003616 <HAL_TIM_OC_Start+0xfa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_TIM_OC_Start+0x13c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIM_OC_Start+0xfa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_TIM_OC_Start+0x140>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d111      	bne.n	800363a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d010      	beq.n	800364a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	e007      	b.n	800364a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800

08003660 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_TIM_OC_Start_IT+0x28>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e022      	b.n	80036ce <HAL_TIM_OC_Start_IT+0x6e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d109      	bne.n	80036a2 <HAL_TIM_OC_Start_IT+0x42>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e015      	b.n	80036ce <HAL_TIM_OC_Start_IT+0x6e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_TIM_OC_Start_IT+0x5c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e008      	b.n	80036ce <HAL_TIM_OC_Start_IT+0x6e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0a9      	b.n	800382a <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_OC_Start_IT+0x86>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	e013      	b.n	800370e <HAL_TIM_OC_Start_IT+0xae>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_OC_Start_IT+0x96>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f4:	e00b      	b.n	800370e <HAL_TIM_OC_Start_IT+0xae>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_OC_Start_IT+0xa6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003704:	e003      	b.n	800370e <HAL_TIM_OC_Start_IT+0xae>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d841      	bhi.n	8003798 <HAL_TIM_OC_Start_IT+0x138>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_TIM_OC_Start_IT+0xbc>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003751 	.word	0x08003751
 8003720:	08003799 	.word	0x08003799
 8003724:	08003799 	.word	0x08003799
 8003728:	08003799 	.word	0x08003799
 800372c:	08003763 	.word	0x08003763
 8003730:	08003799 	.word	0x08003799
 8003734:	08003799 	.word	0x08003799
 8003738:	08003799 	.word	0x08003799
 800373c:	08003775 	.word	0x08003775
 8003740:	08003799 	.word	0x08003799
 8003744:	08003799 	.word	0x08003799
 8003748:	08003799 	.word	0x08003799
 800374c:	08003787 	.word	0x08003787
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0202 	orr.w	r2, r2, #2
 800375e:	60da      	str	r2, [r3, #12]
      break;
 8003760:	e01d      	b.n	800379e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0204 	orr.w	r2, r2, #4
 8003770:	60da      	str	r2, [r3, #12]
      break;
 8003772:	e014      	b.n	800379e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	60da      	str	r2, [r3, #12]
      break;
 8003784:	e00b      	b.n	800379e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0210 	orr.w	r2, r2, #16
 8003794:	60da      	str	r2, [r3, #12]
      break;
 8003796:	e002      	b.n	800379e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      break;
 800379c:	bf00      	nop
  }

  if (status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d141      	bne.n	8003828 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fd6c 	bl	800428a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_TIM_OC_Start_IT+0x1d4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIM_OC_Start_IT+0x1d4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_OC_Start_IT+0x194>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_OC_Start_IT+0x194>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_TIM_OC_Start_IT+0x1d8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_OC_Start_IT+0x194>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_TIM_OC_Start_IT+0x1dc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d010      	beq.n	8003828 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	e007      	b.n	8003828 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e041      	b.n	80038d8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f839 	bl	80038e0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f000 fa0b 	bl	8003c9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0208 	bic.w	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d122      	bne.n	800394e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d11b      	bne.n	800394e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0202 	mvn.w	r2, #2
 800391e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f995 	bl	8003c64 <HAL_TIM_IC_CaptureCallback>
 800393a:	e005      	b.n	8003948 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f988 	bl	8003c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f997 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d122      	bne.n	80039a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d11b      	bne.n	80039a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0204 	mvn.w	r2, #4
 8003972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f96b 	bl	8003c64 <HAL_TIM_IC_CaptureCallback>
 800398e:	e005      	b.n	800399c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f95e 	bl	8003c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f96d 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d122      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d11b      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0208 	mvn.w	r2, #8
 80039c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2204      	movs	r2, #4
 80039cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f941 	bl	8003c64 <HAL_TIM_IC_CaptureCallback>
 80039e2:	e005      	b.n	80039f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f934 	bl	8003c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f943 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d122      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d11b      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0210 	mvn.w	r2, #16
 8003a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2208      	movs	r2, #8
 8003a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f917 	bl	8003c64 <HAL_TIM_IC_CaptureCallback>
 8003a36:	e005      	b.n	8003a44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f90a 	bl	8003c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f919 	bl	8003c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0201 	mvn.w	r2, #1
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f8e5 	bl	8003c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b80      	cmp	r3, #128	; 0x80
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d107      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fcd1 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d10e      	bne.n	8003ace <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d107      	bne.n	8003ace <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8dd 	bl	8003c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d10e      	bne.n	8003afa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d107      	bne.n	8003afa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f06f 0220 	mvn.w	r2, #32
 8003af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fc9c 	bl	8004432 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e048      	b.n	8003bb4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d839      	bhi.n	8003ba4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003ba5 	.word	0x08003ba5
 8003b40:	08003ba5 	.word	0x08003ba5
 8003b44:	08003ba5 	.word	0x08003ba5
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003ba5 	.word	0x08003ba5
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003ba5 	.word	0x08003ba5
 8003b58:	08003b89 	.word	0x08003b89
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003b97 	.word	0x08003b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f8f4 	bl	8003d60 <TIM_OC1_SetConfig>
      break;
 8003b78:	e017      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f953 	bl	8003e2c <TIM_OC2_SetConfig>
      break;
 8003b86:	e010      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f9b6 	bl	8003f00 <TIM_OC3_SetConfig>
      break;
 8003b94:	e009      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa19 	bl	8003fd4 <TIM_OC4_SetConfig>
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e031      	b.n	8003c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fa42 	bl	8004070 <TIM_SlaveTimer_SetConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e018      	b.n	8003c38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
	...

08003c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <TIM_Base_SetConfig+0xb8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0x30>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0x30>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <TIM_Base_SetConfig+0xbc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x30>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a25      	ldr	r2, [pc, #148]	; (8003d5c <TIM_Base_SetConfig+0xc0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <TIM_Base_SetConfig+0xb8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <TIM_Base_SetConfig+0xbc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <TIM_Base_SetConfig+0xc0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <TIM_Base_SetConfig+0xb8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800

08003d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f023 0201 	bic.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0302 	bic.w	r3, r3, #2
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_OC1_SetConfig+0xc8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10c      	bne.n	8003dd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0308 	bic.w	r3, r3, #8
 8003dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <TIM_OC1_SetConfig+0xc8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00

08003e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0210 	bic.w	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <TIM_OC2_SetConfig+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <TIM_OC2_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d113      	bne.n	8003ed8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00

08003f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_OC3_SetConfig+0xd0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10d      	bne.n	8003f7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC3_SetConfig+0xd0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d113      	bne.n	8003faa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	621a      	str	r2, [r3, #32]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00

08003fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800401e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	031b      	lsls	r3, r3, #12
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <TIM_OC4_SetConfig+0x98>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d109      	bne.n	8004048 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40012c00 	.word	0x40012c00

08004070 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b70      	cmp	r3, #112	; 0x70
 80040b8:	d01a      	beq.n	80040f0 <TIM_SlaveTimer_SetConfig+0x80>
 80040ba:	2b70      	cmp	r3, #112	; 0x70
 80040bc:	d860      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040be:	2b60      	cmp	r3, #96	; 0x60
 80040c0:	d054      	beq.n	800416c <TIM_SlaveTimer_SetConfig+0xfc>
 80040c2:	2b60      	cmp	r3, #96	; 0x60
 80040c4:	d85c      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040c6:	2b50      	cmp	r3, #80	; 0x50
 80040c8:	d046      	beq.n	8004158 <TIM_SlaveTimer_SetConfig+0xe8>
 80040ca:	2b50      	cmp	r3, #80	; 0x50
 80040cc:	d858      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d019      	beq.n	8004106 <TIM_SlaveTimer_SetConfig+0x96>
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d854      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	d055      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x116>
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d850      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d051      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x116>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d84c      	bhi.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d04d      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x116>
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d04b      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x116>
 80040ee:	e047      	b.n	8004180 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004100:	f000 f8a4 	bl	800424c <TIM_ETR_SetConfig>
      break;
 8004104:	e040      	b.n	8004188 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d101      	bne.n	8004112 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e03b      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004138:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
      break;
 8004156:	e017      	b.n	8004188 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004164:	461a      	mov	r2, r3
 8004166:	f000 f814 	bl	8004192 <TIM_TI1_ConfigInputStage>
      break;
 800416a:	e00d      	b.n	8004188 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f838 	bl	80041ee <TIM_TI2_ConfigInputStage>
      break;
 800417e:	e003      	b.n	8004188 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e000      	b.n	8004188 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004186:	bf00      	nop
  }

  return status;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0201 	bic.w	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 030a 	bic.w	r3, r3, #10
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 0210 	bic.w	r2, r3, #16
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	431a      	orrs	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800428a:	b480      	push	{r7}
 800428c:	b087      	sub	sp, #28
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2201      	movs	r2, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	401a      	ands	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e046      	b.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a16      	ldr	r2, [pc, #88]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d009      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a10      	ldr	r2, [pc, #64]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800

08004390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e03d      	b.n	8004428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004456:	b084      	sub	sp, #16
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	f107 0014 	add.w	r0, r7, #20
 8004464:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	b004      	add	sp, #16
 8004474:	4770      	bx	lr

08004476 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004486:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800448a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044aa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044ee:	b084      	sub	sp, #16
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	f107 0014 	add.w	r0, r7, #20
 80044fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	b004      	add	sp, #16
 800452c:	4770      	bx	lr
	...

08004530 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004530:	b480      	push	{r7}
 8004532:	b09d      	sub	sp, #116	; 0x74
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	78db      	ldrb	r3, [r3, #3]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d81f      	bhi.n	80045a2 <USB_ActivateEndpoint+0x72>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <USB_ActivateEndpoint+0x38>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	08004579 	.word	0x08004579
 800456c:	08004595 	.word	0x08004595
 8004570:	080045ab 	.word	0x080045ab
 8004574:	08004587 	.word	0x08004587
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004578:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800457c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004580:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004584:	e012      	b.n	80045ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004586:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800458a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800458e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004592:	e00b      	b.n	80045ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004594:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800459c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045a0:	e004      	b.n	80045ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045a8:	e000      	b.n	80045ac <USB_ActivateEndpoint+0x7c>
      break;
 80045aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	7b1b      	ldrb	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8178 	bne.w	800490e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8084 	beq.w	8004730 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004632:	b29b      	uxth	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	011a      	lsls	r2, r3, #4
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	88db      	ldrh	r3, [r3, #6]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	827b      	strh	r3, [r7, #18]
 800466a:	8a7b      	ldrh	r3, [r7, #18]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <USB_ActivateEndpoint+0x17c>
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	823b      	strh	r3, [r7, #16]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	8a3b      	ldrh	r3, [r7, #16]
 8004698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	78db      	ldrb	r3, [r3, #3]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d020      	beq.n	80046f6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	81bb      	strh	r3, [r7, #12]
 80046cc:	89bb      	ldrh	r3, [r7, #12]
 80046ce:	f083 0320 	eor.w	r3, r3, #32
 80046d2:	81bb      	strh	r3, [r7, #12]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	89bb      	ldrh	r3, [r7, #12]
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]
 80046f4:	e2d5      	b.n	8004ca2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	81fb      	strh	r3, [r7, #14]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e2b8      	b.n	8004ca2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	4413      	add	r3, r2
 8004742:	633b      	str	r3, [r7, #48]	; 0x30
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	4413      	add	r3, r2
 800474e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	88db      	ldrh	r3, [r3, #6]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29b      	uxth	r3, r3
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	4413      	add	r3, r2
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	011a      	lsls	r2, r3, #4
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	4413      	add	r3, r2
 8004782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	b29a      	uxth	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b3e      	cmp	r3, #62	; 0x3e
 800479e:	d91d      	bls.n	80047dc <USB_ActivateEndpoint+0x2ac>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <USB_ActivateEndpoint+0x28a>
 80047b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b6:	3b01      	subs	r3, #1
 80047b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4313      	orrs	r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e026      	b.n	800482a <USB_ActivateEndpoint+0x2fa>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <USB_ActivateEndpoint+0x2ca>
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e017      	b.n	800482a <USB_ActivateEndpoint+0x2fa>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	66bb      	str	r3, [r7, #104]	; 0x68
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <USB_ActivateEndpoint+0x2e4>
 800480e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004810:	3301      	adds	r3, #1
 8004812:	66bb      	str	r3, [r7, #104]	; 0x68
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29a      	uxth	r2, r3
 800481a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800481c:	b29b      	uxth	r3, r3
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	b29b      	uxth	r3, r3
 8004822:	4313      	orrs	r3, r2
 8004824:	b29a      	uxth	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	847b      	strh	r3, [r7, #34]	; 0x22
 8004838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800483a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01b      	beq.n	800487a <USB_ActivateEndpoint+0x34a>
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	843b      	strh	r3, [r7, #32]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	441a      	add	r2, r3
 8004864:	8c3b      	ldrh	r3, [r7, #32]
 8004866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	b29b      	uxth	r3, r3
 8004878:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d124      	bne.n	80048cc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	83bb      	strh	r3, [r7, #28]
 800489a:	8bbb      	ldrh	r3, [r7, #28]
 800489c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048a0:	83bb      	strh	r3, [r7, #28]
 80048a2:	8bbb      	ldrh	r3, [r7, #28]
 80048a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048a8:	83bb      	strh	r3, [r7, #28]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	8bbb      	ldrh	r3, [r7, #28]
 80048b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
 80048ca:	e1ea      	b.n	8004ca2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	83fb      	strh	r3, [r7, #30]
 80048e4:	8bfb      	ldrh	r3, [r7, #30]
 80048e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ea:	83fb      	strh	r3, [r7, #30]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	8bfb      	ldrh	r3, [r7, #30]
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]
 800490c:	e1c9      	b.n	8004ca2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	78db      	ldrb	r3, [r3, #3]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d11e      	bne.n	8004954 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
 8004952:	e01d      	b.n	8004990 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a0:	4413      	add	r3, r2
 80049a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	891b      	ldrh	r3, [r3, #8]
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	657b      	str	r3, [r7, #84]	; 0x54
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	4413      	add	r3, r2
 80049d6:	657b      	str	r3, [r7, #84]	; 0x54
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049e6:	653b      	str	r3, [r7, #80]	; 0x50
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	895b      	ldrh	r3, [r3, #10]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8093 	bne.w	8004b28 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01b      	beq.n	8004a56 <USB_ActivateEndpoint+0x526>
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01b      	beq.n	8004aa6 <USB_ActivateEndpoint+0x576>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004abe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ac4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004acc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
 8004b26:	e0bc      	b.n	8004ca2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01d      	beq.n	8004b80 <USB_ActivateEndpoint+0x650>
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01d      	beq.n	8004bd8 <USB_ActivateEndpoint+0x6a8>
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	78db      	ldrb	r3, [r3, #3]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d024      	beq.n	8004c2a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bfe:	f083 0320 	eor.w	r3, r3, #32
 8004c02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]
 8004c28:	e01d      	b.n	8004c66 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3774      	adds	r7, #116	; 0x74
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b08d      	sub	sp, #52	; 0x34
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	7b1b      	ldrb	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 808e 	bne.w	8004de0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d044      	beq.n	8004d56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	81bb      	strh	r3, [r7, #12]
 8004cda:	89bb      	ldrh	r3, [r7, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01b      	beq.n	8004d1c <USB_DeactivateEndpoint+0x6c>
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	817b      	strh	r3, [r7, #10]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	813b      	strh	r3, [r7, #8]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]
 8004d54:	e192      	b.n	800507c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	827b      	strh	r3, [r7, #18]
 8004d64:	8a7b      	ldrh	r3, [r7, #18]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <USB_DeactivateEndpoint+0xf6>
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	823b      	strh	r3, [r7, #16]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8a3b      	ldrh	r3, [r7, #16]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	81fb      	strh	r3, [r7, #14]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	89fb      	ldrh	r3, [r7, #14]
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
 8004dde:	e14d      	b.n	800507c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 80a5 	bne.w	8004f34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	843b      	strh	r3, [r7, #32]
 8004df8:	8c3b      	ldrh	r3, [r7, #32]
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01b      	beq.n	8004e3a <USB_DeactivateEndpoint+0x18a>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	83fb      	strh	r3, [r7, #30]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	83bb      	strh	r3, [r7, #28]
 8004e48:	8bbb      	ldrh	r3, [r7, #28]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01b      	beq.n	8004e8a <USB_DeactivateEndpoint+0x1da>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	837b      	strh	r3, [r7, #26]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	8b7b      	ldrh	r3, [r7, #26]
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	833b      	strh	r3, [r7, #24]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8b3b      	ldrh	r3, [r7, #24]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	82fb      	strh	r3, [r7, #22]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	8afb      	ldrh	r3, [r7, #22]
 8004ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f10:	82bb      	strh	r3, [r7, #20]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	8abb      	ldrh	r3, [r7, #20]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
 8004f32:	e0a3      	b.n	800507c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <USB_DeactivateEndpoint+0x2d4>
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <USB_DeactivateEndpoint+0x324>
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005022:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	847b      	strh	r3, [r7, #34]	; 0x22
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	441a      	add	r2, r3
 8005066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3734      	adds	r7, #52	; 0x34
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b0c2      	sub	sp, #264	; 0x108
 800508c:	af00      	add	r7, sp, #0
 800508e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005096:	6018      	str	r0, [r3, #0]
 8005098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	f040 86b7 	bne.w	8005e22 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d908      	bls.n	80050e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050e0:	e007      	b.n	80050f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	7b1b      	ldrb	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d13a      	bne.n	8005178 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6959      	ldr	r1, [r3, #20]
 800510e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	88da      	ldrh	r2, [r3, #6]
 800511a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511e:	b29b      	uxth	r3, r3
 8005120:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005124:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005128:	6800      	ldr	r0, [r0, #0]
 800512a:	f001 fc9c 	bl	8006a66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	011a      	lsls	r2, r3, #4
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	f000 be1f 	b.w	8005db6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b02      	cmp	r3, #2
 8005186:	f040 8462 	bne.w	8005a4e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800518a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	f240 83df 	bls.w	8005966 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81c7 	beq.w	80055d8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800524a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d177      	bne.n	8005356 <USB_EPStartXfer+0x2ce>
 8005266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	4413      	add	r3, r2
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	011a      	lsls	r2, r3, #4
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	4413      	add	r3, r2
 800529c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b6:	2b3e      	cmp	r3, #62	; 0x3e
 80052b8:	d921      	bls.n	80052fe <USB_EPStartXfer+0x276>
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <USB_EPStartXfer+0x252>
 80052d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052d4:	3b01      	subs	r3, #1
 80052d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	e050      	b.n	80053a0 <USB_EPStartXfer+0x318>
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <USB_EPStartXfer+0x294>
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005314:	b29a      	uxth	r2, r3
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e041      	b.n	80053a0 <USB_EPStartXfer+0x318>
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <USB_EPStartXfer+0x2b4>
 8005332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005336:	3301      	adds	r3, #1
 8005338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29a      	uxth	r2, r3
 8005342:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005346:	b29b      	uxth	r3, r3
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	b29b      	uxth	r3, r3
 800534c:	4313      	orrs	r3, r2
 800534e:	b29a      	uxth	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e024      	b.n	80053a0 <USB_EPStartXfer+0x318>
 8005356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11c      	bne.n	80053a0 <USB_EPStartXfer+0x318>
 8005366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	4413      	add	r3, r2
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	4413      	add	r3, r2
 8005390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539a:	b29a      	uxth	r2, r3
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	895b      	ldrh	r3, [r3, #10]
 80053ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	f001 fb49 	bl	8006a66 <USB_WritePMA>
            ep->xfer_buff += len;
 80053d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e4:	441a      	add	r2, r3
 80053e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a1a      	ldr	r2, [r3, #32]
 80053fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d90f      	bls.n	800542e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800540e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	621a      	str	r2, [r3, #32]
 800542c:	e00e      	b.n	800544c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800543e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2200      	movs	r2, #0
 800544a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800544c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d177      	bne.n	800554c <USB_EPStartXfer+0x4c4>
 800545c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d921      	bls.n	80054f4 <USB_EPStartXfer+0x46c>
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <USB_EPStartXfer+0x448>
 80054c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e056      	b.n	80055a2 <USB_EPStartXfer+0x51a>
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <USB_EPStartXfer+0x48a>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550a:	b29a      	uxth	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e047      	b.n	80055a2 <USB_EPStartXfer+0x51a>
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <USB_EPStartXfer+0x4aa>
 8005528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552c:	3301      	adds	r3, #1
 800552e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29b      	uxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e02a      	b.n	80055a2 <USB_EPStartXfer+0x51a>
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d122      	bne.n	80055a2 <USB_EPStartXfer+0x51a>
 800555c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	4413      	add	r3, r2
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4413      	add	r3, r2
 8005592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559c:	b29a      	uxth	r2, r3
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	891b      	ldrh	r3, [r3, #8]
 80055ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055d0:	6800      	ldr	r0, [r0, #0]
 80055d2:	f001 fa48 	bl	8006a66 <USB_WritePMA>
 80055d6:	e3ee      	b.n	8005db6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d177      	bne.n	80056d8 <USB_EPStartXfer+0x650>
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005602:	b29b      	uxth	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005608:	4413      	add	r3, r2
 800560a:	64bb      	str	r3, [r7, #72]	; 0x48
 800560c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561c:	4413      	add	r3, r2
 800561e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562e:	b29a      	uxth	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	2b3e      	cmp	r3, #62	; 0x3e
 800563a:	d921      	bls.n	8005680 <USB_EPStartXfer+0x5f8>
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2b00      	cmp	r3, #0
 8005650:	d104      	bne.n	800565c <USB_EPStartXfer+0x5d4>
 8005652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005656:	3b01      	subs	r3, #1
 8005658:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29a      	uxth	r2, r3
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005666:	b29b      	uxth	r3, r3
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	b29b      	uxth	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	e056      	b.n	800572e <USB_EPStartXfer+0x6a6>
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <USB_EPStartXfer+0x616>
 8005688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29a      	uxth	r2, r3
 8005698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e047      	b.n	800572e <USB_EPStartXfer+0x6a6>
 800569e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <USB_EPStartXfer+0x636>
 80056b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b8:	3301      	adds	r3, #1
 80056ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e02a      	b.n	800572e <USB_EPStartXfer+0x6a6>
 80056d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d122      	bne.n	800572e <USB_EPStartXfer+0x6a6>
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	653b      	str	r3, [r7, #80]	; 0x50
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005708:	4413      	add	r3, r2
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005728:	b29a      	uxth	r2, r3
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	891b      	ldrh	r3, [r3, #8]
 800573a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6959      	ldr	r1, [r3, #20]
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574e:	b29b      	uxth	r3, r3
 8005750:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005754:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005758:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800575c:	6800      	ldr	r0, [r0, #0]
 800575e:	f001 f982 	bl	8006a66 <USB_WritePMA>
            ep->xfer_buff += len;
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005772:	441a      	add	r2, r3
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d90f      	bls.n	80057bc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800579c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	621a      	str	r2, [r3, #32]
 80057ba:	e00e      	b.n	80057da <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d177      	bne.n	80058e6 <USB_EPStartXfer+0x85e>
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	63bb      	str	r3, [r7, #56]	; 0x38
 8005802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	4413      	add	r3, r2
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38
 800581a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	011a      	lsls	r2, r3, #4
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	4413      	add	r3, r2
 800582c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583c:	b29a      	uxth	r2, r3
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005846:	2b3e      	cmp	r3, #62	; 0x3e
 8005848:	d921      	bls.n	800588e <USB_EPStartXfer+0x806>
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <USB_EPStartXfer+0x7e2>
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	3b01      	subs	r3, #1
 8005866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29a      	uxth	r2, r3
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29b      	uxth	r3, r3
 800587a:	4313      	orrs	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005886:	b29a      	uxth	r2, r3
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e050      	b.n	8005930 <USB_EPStartXfer+0x8a8>
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <USB_EPStartXfer+0x824>
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e041      	b.n	8005930 <USB_EPStartXfer+0x8a8>
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <USB_EPStartXfer+0x844>
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	3301      	adds	r3, #1
 80058c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e024      	b.n	8005930 <USB_EPStartXfer+0x8a8>
 80058e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d11c      	bne.n	8005930 <USB_EPStartXfer+0x8a8>
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590a:	4413      	add	r3, r2
 800590c:	643b      	str	r3, [r7, #64]	; 0x40
 800590e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	4413      	add	r3, r2
 8005920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	b29a      	uxth	r2, r3
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	895b      	ldrh	r3, [r3, #10]
 800593c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005950:	b29b      	uxth	r3, r3
 8005952:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005956:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800595a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	f001 f881 	bl	8006a66 <USB_WritePMA>
 8005964:	e227      	b.n	8005db6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f2:	4413      	add	r3, r2
 80059f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	891b      	ldrh	r3, [r3, #8]
 8005a24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6959      	ldr	r1, [r3, #20]
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a46:	6800      	ldr	r0, [r0, #0]
 8005a48:	f001 f80d 	bl	8006a66 <USB_WritePMA>
 8005a4c:	e1b3      	b.n	8005db6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80c6 	beq.w	8005c20 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8005aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d177      	bne.n	8005ba0 <USB_EPStartXfer+0xb18>
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad0:	4413      	add	r3, r2
 8005ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aea:	667b      	str	r3, [r7, #100]	; 0x64
 8005aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b00:	2b3e      	cmp	r3, #62	; 0x3e
 8005b02:	d921      	bls.n	8005b48 <USB_EPStartXfer+0xac0>
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <USB_EPStartXfer+0xa9c>
 8005b1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4313      	orrs	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	e050      	b.n	8005bea <USB_EPStartXfer+0xb62>
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <USB_EPStartXfer+0xade>
 8005b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	e041      	b.n	8005bea <USB_EPStartXfer+0xb62>
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <USB_EPStartXfer+0xafe>
 8005b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	e024      	b.n	8005bea <USB_EPStartXfer+0xb62>
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d11c      	bne.n	8005bea <USB_EPStartXfer+0xb62>
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc4:	4413      	add	r3, r2
 8005bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	011a      	lsls	r2, r3, #4
 8005bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bd8:	4413      	add	r3, r2
 8005bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	895b      	ldrh	r3, [r3, #10]
 8005bf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6959      	ldr	r1, [r3, #20]
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c18:	6800      	ldr	r0, [r0, #0]
 8005c1a:	f000 ff24 	bl	8006a66 <USB_WritePMA>
 8005c1e:	e0ca      	b.n	8005db6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d177      	bne.n	8005d20 <USB_EPStartXfer+0xc98>
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c50:	4413      	add	r3, r2
 8005c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	011a      	lsls	r2, r3, #4
 8005c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c80:	2b3e      	cmp	r3, #62	; 0x3e
 8005c82:	d921      	bls.n	8005cc8 <USB_EPStartXfer+0xc40>
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <USB_EPStartXfer+0xc1c>
 8005c9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	029b      	lsls	r3, r3, #10
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	e05c      	b.n	8005d82 <USB_EPStartXfer+0xcfa>
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <USB_EPStartXfer+0xc5e>
 8005cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e04d      	b.n	8005d82 <USB_EPStartXfer+0xcfa>
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <USB_EPStartXfer+0xc7e>
 8005cfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d00:	3301      	adds	r3, #1
 8005d02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	4313      	orrs	r3, r2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e030      	b.n	8005d82 <USB_EPStartXfer+0xcfa>
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d128      	bne.n	8005d82 <USB_EPStartXfer+0xcfa>
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d54:	4413      	add	r3, r2
 8005d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	011a      	lsls	r2, r3, #4
 8005d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	891b      	ldrh	r3, [r3, #8]
 8005d8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6959      	ldr	r1, [r3, #20]
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005da8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005dac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005db0:	6800      	ldr	r0, [r0, #0]
 8005db2:	f000 fe58 	bl	8006a66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	817b      	strh	r3, [r7, #10]
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	f083 0310 	eor.w	r3, r3, #16
 8005de4:	817b      	strh	r3, [r7, #10]
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	f083 0320 	eor.w	r3, r3, #32
 8005dec:	817b      	strh	r3, [r7, #10]
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	897b      	ldrh	r3, [r7, #10]
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
 8005e1e:	f000 bcde 	b.w	80067de <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 80bb 	bne.w	8005faa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d917      	bls.n	8005e80 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	619a      	str	r2, [r3, #24]
 8005e7e:	e00e      	b.n	8005e9e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	011a      	lsls	r2, r3, #4
 8005ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efc:	2b3e      	cmp	r3, #62	; 0x3e
 8005efe:	d924      	bls.n	8005f4a <USB_EPStartXfer+0xec2>
 8005f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <USB_EPStartXfer+0xe98>
 8005f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	f000 bc10 	b.w	800676a <USB_EPStartXfer+0x16e2>
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10c      	bne.n	8005f6c <USB_EPStartXfer+0xee4>
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	e3fe      	b.n	800676a <USB_EPStartXfer+0x16e2>
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <USB_EPStartXfer+0xf04>
 8005f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	029b      	lsls	r3, r3, #10
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e3df      	b.n	800676a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	78db      	ldrb	r3, [r3, #3]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	f040 8218 	bne.w	80063ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 809d 	bne.w	8006108 <USB_EPStartXfer+0x1080>
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	011a      	lsls	r2, r3, #4
 8006006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800600a:	4413      	add	r3, r2
 800600c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b3e      	cmp	r3, #62	; 0x3e
 8006036:	d92b      	bls.n	8006090 <USB_EPStartXfer+0x1008>
 8006038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800604a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <USB_EPStartXfer+0xfe0>
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006062:	3b01      	subs	r3, #1
 8006064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	b29b      	uxth	r3, r3
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	b29b      	uxth	r3, r3
 800607a:	4313      	orrs	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e070      	b.n	8006172 <USB_EPStartXfer+0x10ea>
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10c      	bne.n	80060ba <USB_EPStartXfer+0x1032>
 80060a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e05b      	b.n	8006172 <USB_EPStartXfer+0x10ea>
 80060ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0x1062>
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e034      	b.n	8006172 <USB_EPStartXfer+0x10ea>
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d12c      	bne.n	8006172 <USB_EPStartXfer+0x10ea>
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006134:	b29b      	uxth	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800613c:	4413      	add	r3, r2
 800613e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	011a      	lsls	r2, r3, #4
 8006150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006154:	4413      	add	r3, r2
 8006156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800615a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	b29a      	uxth	r2, r3
 800616c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 809d 	bne.w	80062cc <USB_EPStartXfer+0x1244>
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	011a      	lsls	r2, r3, #4
 80061ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b3e      	cmp	r3, #62	; 0x3e
 80061fa:	d92b      	bls.n	8006254 <USB_EPStartXfer+0x11cc>
 80061fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800620e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <USB_EPStartXfer+0x11a4>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006226:	3b01      	subs	r3, #1
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	b29b      	uxth	r3, r3
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	b29b      	uxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e069      	b.n	8006328 <USB_EPStartXfer+0x12a0>
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10c      	bne.n	800627e <USB_EPStartXfer+0x11f6>
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	e054      	b.n	8006328 <USB_EPStartXfer+0x12a0>
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <USB_EPStartXfer+0x1226>
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a8:	3301      	adds	r3, #1
 80062aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	e02d      	b.n	8006328 <USB_EPStartXfer+0x12a0>
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d125      	bne.n	8006328 <USB_EPStartXfer+0x12a0>
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062f2:	4413      	add	r3, r2
 80062f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800630a:	4413      	add	r3, r2
 800630c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8218 	beq.w	800676a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800635a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800635e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <USB_EPStartXfer+0x12ea>
 8006366:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006372:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 81f5 	bne.w	800676a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006380:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 81ee 	bne.w	800676a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e1be      	b.n	800676a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	78db      	ldrb	r3, [r3, #3]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	f040 81b4 	bne.w	8006766 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d917      	bls.n	800644a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800642a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643a:	1ad2      	subs	r2, r2, r3
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	619a      	str	r2, [r3, #24]
 8006448:	e00e      	b.n	8006468 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800645a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 8085 	bne.w	8006584 <USB_EPStartXfer+0x14fc>
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800649e:	4413      	add	r3, r2
 80064a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d8:	2b3e      	cmp	r3, #62	; 0x3e
 80064da:	d923      	bls.n	8006524 <USB_EPStartXfer+0x149c>
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <USB_EPStartXfer+0x1474>
 80064f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f6:	3b01      	subs	r3, #1
 80064f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29a      	uxth	r2, r3
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	b29b      	uxth	r3, r3
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	b29b      	uxth	r3, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e060      	b.n	80065e6 <USB_EPStartXfer+0x155e>
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <USB_EPStartXfer+0x14be>
 800652c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653c:	b29a      	uxth	r2, r3
 800653e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e04f      	b.n	80065e6 <USB_EPStartXfer+0x155e>
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <USB_EPStartXfer+0x14de>
 800655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006560:	3301      	adds	r3, #1
 8006562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29a      	uxth	r2, r3
 800656e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006572:	b29b      	uxth	r3, r3
 8006574:	029b      	lsls	r3, r3, #10
 8006576:	b29b      	uxth	r3, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e030      	b.n	80065e6 <USB_EPStartXfer+0x155e>
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d128      	bne.n	80065e6 <USB_EPStartXfer+0x155e>
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 8085 	bne.w	8006710 <USB_EPStartXfer+0x1688>
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800662a:	4413      	add	r3, r2
 800662c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006642:	4413      	add	r3, r2
 8006644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800664c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006664:	2b3e      	cmp	r3, #62	; 0x3e
 8006666:	d923      	bls.n	80066b0 <USB_EPStartXfer+0x1628>
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <USB_EPStartXfer+0x1600>
 800667e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006682:	3b01      	subs	r3, #1
 8006684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006694:	b29b      	uxth	r3, r3
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	b29b      	uxth	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e05c      	b.n	800676a <USB_EPStartXfer+0x16e2>
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <USB_EPStartXfer+0x164a>
 80066b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e04b      	b.n	800676a <USB_EPStartXfer+0x16e2>
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <USB_EPStartXfer+0x166a>
 80066e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066fe:	b29b      	uxth	r3, r3
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	b29b      	uxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b29a      	uxth	r2, r3
 8006708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	e02c      	b.n	800676a <USB_EPStartXfer+0x16e2>
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d124      	bne.n	800676a <USB_EPStartXfer+0x16e2>
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006736:	4413      	add	r3, r2
 8006738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	011a      	lsls	r2, r3, #4
 800674a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800674e:	4413      	add	r3, r2
 8006750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e001      	b.n	800676a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e03a      	b.n	80067e0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006798:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800679c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d020      	beq.n	800683e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006812:	81bb      	strh	r3, [r7, #12]
 8006814:	89bb      	ldrh	r3, [r7, #12]
 8006816:	f083 0310 	eor.w	r3, r3, #16
 800681a:	81bb      	strh	r3, [r7, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	89bb      	ldrh	r3, [r7, #12]
 8006828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]
 800683c:	e01f      	b.n	800687e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	81fb      	strh	r3, [r7, #14]
 8006856:	89fb      	ldrh	r3, [r7, #14]
 8006858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800685c:	81fb      	strh	r3, [r7, #14]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	89fb      	ldrh	r3, [r7, #14]
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 809d 	bne.w	80069d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d04c      	beq.n	8006940 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	823b      	strh	r3, [r7, #16]
 80068b4:	8a3b      	ldrh	r3, [r7, #16]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01b      	beq.n	80068f6 <USB_EPClearStall+0x6c>
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	81fb      	strh	r3, [r7, #14]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	78db      	ldrb	r3, [r3, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d06c      	beq.n	80069d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	81bb      	strh	r3, [r7, #12]
 8006916:	89bb      	ldrh	r3, [r7, #12]
 8006918:	f083 0320 	eor.w	r3, r3, #32
 800691c:	81bb      	strh	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	89bb      	ldrh	r3, [r7, #12]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e04b      	b.n	80069d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	82fb      	strh	r3, [r7, #22]
 800694e:	8afb      	ldrh	r3, [r7, #22]
 8006950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01b      	beq.n	8006990 <USB_EPClearStall+0x106>
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	82bb      	strh	r3, [r7, #20]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	8abb      	ldrh	r3, [r7, #20]
 800697c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	827b      	strh	r3, [r7, #18]
 80069a8:	8a7b      	ldrh	r3, [r7, #18]
 80069aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ae:	827b      	strh	r3, [r7, #18]
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b6:	827b      	strh	r3, [r7, #18]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	8a7b      	ldrh	r3, [r7, #18]
 80069c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a44:	68fb      	ldr	r3, [r7, #12]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b08b      	sub	sp, #44	; 0x2c
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	4611      	mov	r1, r2
 8006a72:	461a      	mov	r2, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	80fb      	strh	r3, [r7, #6]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a7c:	88bb      	ldrh	r3, [r7, #4]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	005a      	lsls	r2, r3, #1
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	e01e      	b.n	8006ade <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	8a7a      	ldrh	r2, [r7, #18]
 8006abe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	3302      	adds	r3, #2
 8006aca:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	3b01      	subs	r3, #1
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1dd      	bne.n	8006aa0 <USB_WritePMA+0x3a>
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	372c      	adds	r7, #44	; 0x2c
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b08b      	sub	sp, #44	; 0x2c
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4611      	mov	r1, r2
 8006afc:	461a      	mov	r2, r3
 8006afe:	460b      	mov	r3, r1
 8006b00:	80fb      	strh	r3, [r7, #6]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b06:	88bb      	ldrh	r3, [r7, #4]
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	005a      	lsls	r2, r3, #1
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
 8006b28:	e01b      	b.n	8006b62 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	3302      	adds	r3, #2
 8006b36:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3301      	adds	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	3302      	adds	r3, #2
 8006b5a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e0      	bne.n	8006b2a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b68:	88bb      	ldrh	r3, [r7, #4]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	701a      	strb	r2, [r3, #0]
  }
}
 8006b84:	bf00      	nop
 8006b86:	372c      	adds	r7, #44	; 0x2c
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7c1b      	ldrb	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d115      	bne.n	8006bd2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006baa:	2202      	movs	r2, #2
 8006bac:	2181      	movs	r1, #129	; 0x81
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fe53 	bl	800885a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fe49 	bl	800885a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bd0:	e012      	b.n	8006bf8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bd2:	2340      	movs	r3, #64	; 0x40
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	2181      	movs	r1, #129	; 0x81
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fe3e 	bl	800885a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	2202      	movs	r2, #2
 8006be8:	2101      	movs	r1, #1
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fe35 	bl	800885a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	2182      	movs	r1, #130	; 0x82
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 fe2b 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c0a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c0e:	f001 ff4b 	bl	8008aa8 <USBD_static_malloc>
 8006c12:	4602      	mov	r2, r0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e026      	b.n	8006c78 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	7c1b      	ldrb	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5e:	2101      	movs	r1, #1
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 feeb 	bl	8008a3c <USBD_LL_PrepareReceive>
 8006c66:	e007      	b.n	8006c78 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6e:	2340      	movs	r3, #64	; 0x40
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fee2 	bl	8008a3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c92:	2181      	movs	r1, #129	; 0x81
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fe06 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fdff 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cb0:	2182      	movs	r1, #130	; 0x82
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fdf7 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00e      	beq.n	8006ce6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fef1 	bl	8008ac0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d00:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d039      	beq.n	8006d8e <USBD_CDC_Setup+0x9e>
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d17f      	bne.n	8006e1e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	88db      	ldrh	r3, [r3, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d029      	beq.n	8006d7a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da11      	bge.n	8006d54 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d3c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	88d2      	ldrh	r2, [r2, #6]
 8006d42:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d44:	6939      	ldr	r1, [r7, #16]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f9da 	bl	8008106 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d52:	e06b      	b.n	8006e2c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	785a      	ldrb	r2, [r3, #1]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f9f5 	bl	8008162 <USBD_CtlPrepareRx>
      break;
 8006d78:	e058      	b.n	8006e2c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	7850      	ldrb	r0, [r2, #1]
 8006d86:	2200      	movs	r2, #0
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4798      	blx	r3
      break;
 8006d8c:	e04e      	b.n	8006e2c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b0b      	cmp	r3, #11
 8006d94:	d02e      	beq.n	8006df4 <USBD_CDC_Setup+0x104>
 8006d96:	2b0b      	cmp	r3, #11
 8006d98:	dc38      	bgt.n	8006e0c <USBD_CDC_Setup+0x11c>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <USBD_CDC_Setup+0xb4>
 8006d9e:	2b0a      	cmp	r3, #10
 8006da0:	d014      	beq.n	8006dcc <USBD_CDC_Setup+0xdc>
 8006da2:	e033      	b.n	8006e0c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006dae:	f107 030c 	add.w	r3, r7, #12
 8006db2:	2202      	movs	r2, #2
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f9a5 	bl	8008106 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbc:	e02e      	b.n	8006e1c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f936 	bl	8008032 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dca:	e027      	b.n	8006e1c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d107      	bne.n	8006de6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dd6:	f107 030f 	add.w	r3, r7, #15
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f991 	bl	8008106 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de4:	e01a      	b.n	8006e1c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f922 	bl	8008032 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dee:	2302      	movs	r3, #2
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e013      	b.n	8006e1c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d00d      	beq.n	8006e1a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f916 	bl	8008032 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e0a:	e006      	b.n	8006e1a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 f90f 	bl	8008032 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e14:	2302      	movs	r3, #2
 8006e16:	75fb      	strb	r3, [r7, #23]
          break;
 8006e18:	e000      	b.n	8006e1c <USBD_CDC_Setup+0x12c>
          break;
 8006e1a:	bf00      	nop
      }
      break;
 8006e1c:	e006      	b.n	8006e2c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 f906 	bl	8008032 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e50:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03a      	beq.n	8006ed2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	331c      	adds	r3, #28
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d029      	beq.n	8006ec6 <USBD_CDC_DataIn+0x90>
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	331c      	adds	r3, #28
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	78f9      	ldrb	r1, [r7, #3]
 8006e86:	68b8      	ldr	r0, [r7, #8]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4403      	add	r3, r0
 8006e92:	3338      	adds	r3, #56	; 0x38
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	331c      	adds	r3, #28
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eb8:	78f9      	ldrb	r1, [r7, #3]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fd99 	bl	80089f6 <USBD_LL_Transmit>
 8006ec4:	e003      	b.n	8006ece <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e000      	b.n	8006ed4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
  }
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fdc4 	bl	8008a82 <USBD_LL_GetRxDataSize>
 8006efa:	4602      	mov	r2, r0
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00d      	beq.n	8006f28 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f20:	4611      	mov	r1, r2
 8006f22:	4798      	blx	r3

    return USBD_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f28:	2302      	movs	r3, #2
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d015      	beq.n	8006f78 <USBD_CDC_EP0_RxReady+0x46>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d010      	beq.n	8006f78 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f64:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	22ff      	movs	r2, #255	; 0xff
 8006f74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2243      	movs	r2, #67	; 0x43
 8006f90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000094 	.word	0x20000094

08006fa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2243      	movs	r2, #67	; 0x43
 8006fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fb2:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000050 	.word	0x20000050

08006fc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2243      	movs	r2, #67	; 0x43
 8006fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	200000d8 	.word	0x200000d8

08006fe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	220a      	movs	r2, #10
 8006ff0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ff2:	4b03      	ldr	r3, [pc, #12]	; (8007000 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000000c 	.word	0x2000000c

08007004 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	4613      	mov	r3, r2
 800703c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007044:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007096:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b4:	2101      	movs	r1, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fcc0 	bl	8008a3c <USBD_LL_PrepareReceive>
 80070bc:	e007      	b.n	80070ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	2101      	movs	r1, #1
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fcb7 	bl	8008a3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070f0:	2302      	movs	r3, #2
 80070f2:	e01a      	b.n	800712a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	79fa      	ldrb	r2, [r7, #7]
 8007120:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fb24 	bl	8008770 <USBD_LL_Init>

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d006      	beq.n	8007154 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e001      	b.n	8007158 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fb59 	bl	8008824 <USBD_LL_Start>

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800719c:	2302      	movs	r3, #2
 800719e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	4611      	mov	r1, r2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	4611      	mov	r1, r2
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fed7 	bl	8007fba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2b02      	cmp	r3, #2
 800722e:	d016      	beq.n	800725e <USBD_LL_SetupStage+0x6a>
 8007230:	2b02      	cmp	r3, #2
 8007232:	d81c      	bhi.n	800726e <USBD_LL_SetupStage+0x7a>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <USBD_LL_SetupStage+0x4a>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d008      	beq.n	800724e <USBD_LL_SetupStage+0x5a>
 800723c:	e017      	b.n	800726e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f9ca 	bl	80075e0 <USBD_StdDevReq>
      break;
 800724c:	e01a      	b.n	8007284 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa2c 	bl	80076b4 <USBD_StdItfReq>
      break;
 800725c:	e012      	b.n	8007284 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa6c 	bl	8007744 <USBD_StdEPReq>
      break;
 800726c:	e00a      	b.n	8007284 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007278:	b2db      	uxtb	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fb31 	bl	80088e4 <USBD_LL_StallEP>
      break;
 8007282:	bf00      	nop
  }

  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	460b      	mov	r3, r1
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800729c:	7afb      	ldrb	r3, [r7, #11]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d14b      	bne.n	800733a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d134      	bne.n	800731e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d919      	bls.n	80072f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d203      	bcs.n	80072e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072de:	b29b      	uxth	r3, r3
 80072e0:	e002      	b.n	80072e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 ff56 	bl	800819e <USBD_CtlContinueRx>
 80072f2:	e038      	b.n	8007366 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007306:	2b03      	cmp	r3, #3
 8007308:	d105      	bne.n	8007316 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 ff53 	bl	80081c2 <USBD_CtlSendStatus>
 800731c:	e023      	b.n	8007366 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007324:	2b05      	cmp	r3, #5
 8007326:	d11e      	bne.n	8007366 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007330:	2100      	movs	r1, #0
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f001 fad6 	bl	80088e4 <USBD_LL_StallEP>
 8007338:	e015      	b.n	8007366 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00d      	beq.n	8007362 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800734c:	2b03      	cmp	r3, #3
 800734e:	d108      	bne.n	8007362 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	7afa      	ldrb	r2, [r7, #11]
 800735a:	4611      	mov	r1, r2
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	4798      	blx	r3
 8007360:	e001      	b.n	8007366 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007362:	2302      	movs	r3, #2
 8007364:	e000      	b.n	8007368 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d17f      	bne.n	8007484 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3314      	adds	r3, #20
 8007388:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007390:	2b02      	cmp	r3, #2
 8007392:	d15c      	bne.n	800744e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	429a      	cmp	r2, r3
 800739e:	d915      	bls.n	80073cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fec0 	bl	800813e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f001 fb39 	bl	8008a3c <USBD_LL_PrepareReceive>
 80073ca:	e04e      	b.n	800746a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	6912      	ldr	r2, [r2, #16]
 80073d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073d8:	fb01 f202 	mul.w	r2, r1, r2
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11c      	bne.n	800741c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d316      	bcc.n	800741c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d20f      	bcs.n	800741c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073fc:	2200      	movs	r2, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fe9c 	bl	800813e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800740e:	2300      	movs	r3, #0
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fb11 	bl	8008a3c <USBD_LL_PrepareReceive>
 800741a:	e026      	b.n	800746a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800742e:	2b03      	cmp	r3, #3
 8007430:	d105      	bne.n	800743e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800743e:	2180      	movs	r1, #128	; 0x80
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 fa4f 	bl	80088e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fece 	bl	80081e8 <USBD_CtlReceiveStatus>
 800744c:	e00d      	b.n	800746a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007454:	2b04      	cmp	r3, #4
 8007456:	d004      	beq.n	8007462 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fa3d 	bl	80088e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11d      	bne.n	80074b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fe81 	bl	800717c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007482:	e015      	b.n	80074b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007496:	2b03      	cmp	r3, #3
 8007498:	d108      	bne.n	80074ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	7afa      	ldrb	r2, [r7, #11]
 80074a4:	4611      	mov	r1, r2
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
 80074aa:	e001      	b.n	80074b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ac:	2302      	movs	r3, #2
 80074ae:	e000      	b.n	80074b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c2:	2340      	movs	r3, #64	; 0x40
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f9c6 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2240      	movs	r2, #64	; 0x40
 80074da:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074de:	2340      	movs	r3, #64	; 0x40
 80074e0:	2200      	movs	r2, #0
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f9b8 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2240      	movs	r2, #64	; 0x40
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6852      	ldr	r2, [r2, #4]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	4611      	mov	r1, r2
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
  }

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2204      	movs	r2, #4
 8007572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	2b04      	cmp	r3, #4
 8007592:	d105      	bne.n	80075a0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d10b      	bne.n	80075d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d005      	beq.n	8007606 <USBD_StdDevReq+0x26>
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d84f      	bhi.n	800769e <USBD_StdDevReq+0xbe>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <USBD_StdDevReq+0x36>
 8007602:	2b20      	cmp	r3, #32
 8007604:	d14b      	bne.n	800769e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      break;
 8007614:	e048      	b.n	80076a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b09      	cmp	r3, #9
 800761c:	d839      	bhi.n	8007692 <USBD_StdDevReq+0xb2>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <USBD_StdDevReq+0x44>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007675 	.word	0x08007675
 8007628:	08007689 	.word	0x08007689
 800762c:	08007693 	.word	0x08007693
 8007630:	0800767f 	.word	0x0800767f
 8007634:	08007693 	.word	0x08007693
 8007638:	08007657 	.word	0x08007657
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007693 	.word	0x08007693
 8007644:	0800766b 	.word	0x0800766b
 8007648:	08007661 	.word	0x08007661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9dc 	bl	8007a0c <USBD_GetDescriptor>
          break;
 8007654:	e022      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fb3f 	bl	8007cdc <USBD_SetAddress>
          break;
 800765e:	e01d      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb7e 	bl	8007d64 <USBD_SetConfig>
          break;
 8007668:	e018      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc07 	bl	8007e80 <USBD_GetConfig>
          break;
 8007672:	e013      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fc37 	bl	8007eea <USBD_GetStatus>
          break;
 800767c:	e00e      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc65 	bl	8007f50 <USBD_SetFeature>
          break;
 8007686:	e009      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc74 	bl	8007f78 <USBD_ClrFeature>
          break;
 8007690:	e004      	b.n	800769c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fccc 	bl	8008032 <USBD_CtlError>
          break;
 800769a:	bf00      	nop
      }
      break;
 800769c:	e004      	b.n	80076a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fcc6 	bl	8008032 <USBD_CtlError>
      break;
 80076a6:	bf00      	nop
  }

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d005      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d82e      	bhi.n	8007730 <USBD_StdItfReq+0x7c>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d12a      	bne.n	8007730 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	3b01      	subs	r3, #1
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d81d      	bhi.n	8007722 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	889b      	ldrh	r3, [r3, #4]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d813      	bhi.n	8007718 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d110      	bne.n	800772c <USBD_StdItfReq+0x78>
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fd56 	bl	80081c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007716:	e009      	b.n	800772c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc89 	bl	8008032 <USBD_CtlError>
          break;
 8007720:	e004      	b.n	800772c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc84 	bl	8008032 <USBD_CtlError>
          break;
 800772a:	e000      	b.n	800772e <USBD_StdItfReq+0x7a>
          break;
 800772c:	bf00      	nop
      }
      break;
 800772e:	e004      	b.n	800773a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc7d 	bl	8008032 <USBD_CtlError>
      break;
 8007738:	bf00      	nop
  }

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d007      	beq.n	8007774 <USBD_StdEPReq+0x30>
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	f200 8146 	bhi.w	80079f6 <USBD_StdEPReq+0x2b2>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <USBD_StdEPReq+0x40>
 800776e:	2b20      	cmp	r3, #32
 8007770:	f040 8141 	bne.w	80079f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
      break;
 8007782:	e13d      	b.n	8007a00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778c:	2b20      	cmp	r3, #32
 800778e:	d10a      	bne.n	80077a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	e12d      	b.n	8007a02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d007      	beq.n	80077be <USBD_StdEPReq+0x7a>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f300 811b 	bgt.w	80079ea <USBD_StdEPReq+0x2a6>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d072      	beq.n	800789e <USBD_StdEPReq+0x15a>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d03a      	beq.n	8007832 <USBD_StdEPReq+0xee>
 80077bc:	e115      	b.n	80079ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d002      	beq.n	80077ce <USBD_StdEPReq+0x8a>
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d015      	beq.n	80077f8 <USBD_StdEPReq+0xb4>
 80077cc:	e02b      	b.n	8007826 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <USBD_StdEPReq+0xaa>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d009      	beq.n	80077ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 f880 	bl	80088e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f87c 	bl	80088e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077ec:	e020      	b.n	8007830 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc1e 	bl	8008032 <USBD_CtlError>
              break;
 80077f6:	e01b      	b.n	8007830 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10e      	bne.n	800781e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <USBD_StdEPReq+0xda>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d008      	beq.n	800781e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	88db      	ldrh	r3, [r3, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f863 	bl	80088e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fccf 	bl	80081c2 <USBD_CtlSendStatus>

              break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc02 	bl	8008032 <USBD_CtlError>
              break;
 800782e:	bf00      	nop
          }
          break;
 8007830:	e0e0      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0xfe>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d015      	beq.n	800786c <USBD_StdEPReq+0x128>
 8007840:	e026      	b.n	8007890 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <USBD_StdEPReq+0x11e>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d009      	beq.n	8007862 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f846 	bl	80088e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f842 	bl	80088e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007860:	e01c      	b.n	800789c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbe4 	bl	8008032 <USBD_CtlError>
              break;
 800786a:	e017      	b.n	800789c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d112      	bne.n	800789a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f84d 	bl	8008922 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc9a 	bl	80081c2 <USBD_CtlSendStatus>
              }
              break;
 800788e:	e004      	b.n	800789a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbcd 	bl	8008032 <USBD_CtlError>
              break;
 8007898:	e000      	b.n	800789c <USBD_StdEPReq+0x158>
              break;
 800789a:	bf00      	nop
          }
          break;
 800789c:	e0aa      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_StdEPReq+0x16a>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d032      	beq.n	8007912 <USBD_StdEPReq+0x1ce>
 80078ac:	e097      	b.n	80079de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <USBD_StdEPReq+0x180>
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d004      	beq.n	80078c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fbb8 	bl	8008032 <USBD_CtlError>
                break;
 80078c2:	e091      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da0b      	bge.n	80078e4 <USBD_StdEPReq+0x1a0>
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	3310      	adds	r3, #16
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	e00b      	b.n	80078fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	3304      	adds	r3, #4
 80078fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2202      	movs	r2, #2
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fbfb 	bl	8008106 <USBD_CtlSendData>
              break;
 8007910:	e06a      	b.n	80079e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da11      	bge.n	800793e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	3318      	adds	r3, #24
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d117      	bne.n	8007964 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fb7b 	bl	8008032 <USBD_CtlError>
                  break;
 800793c:	e054      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fb68 	bl	8008032 <USBD_CtlError>
                  break;
 8007962:	e041      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007968:	2b00      	cmp	r3, #0
 800796a:	da0b      	bge.n	8007984 <USBD_StdEPReq+0x240>
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	3310      	adds	r3, #16
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	3304      	adds	r3, #4
 8007982:	e00b      	b.n	800799c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <USBD_StdEPReq+0x266>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d103      	bne.n	80079b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e00e      	b.n	80079d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 ffd2 	bl	8008960 <USBD_LL_IsStallEP>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb95 	bl	8008106 <USBD_CtlSendData>
              break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb26 	bl	8008032 <USBD_CtlError>
              break;
 80079e6:	bf00      	nop
          }
          break;
 80079e8:	e004      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb20 	bl	8008032 <USBD_CtlError>
          break;
 80079f2:	bf00      	nop
      }
      break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fb1a 	bl	8008032 <USBD_CtlError>
      break;
 80079fe:	bf00      	nop
  }

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	2b06      	cmp	r3, #6
 8007a2e:	f200 8128 	bhi.w	8007c82 <USBD_GetDescriptor+0x276>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <USBD_GetDescriptor+0x2c>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a6d 	.word	0x08007a6d
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007c83 	.word	0x08007c83
 8007a48:	08007c83 	.word	0x08007c83
 8007a4c:	08007c23 	.word	0x08007c23
 8007a50:	08007c4f 	.word	0x08007c4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
      break;
 8007a6a:	e112      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7c1b      	ldrb	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10d      	bne.n	8007a90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f107 0208 	add.w	r2, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a8e:	e100      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f107 0208 	add.w	r2, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
      break;
 8007aaa:	e0f2      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	885b      	ldrh	r3, [r3, #2]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	f200 80ac 	bhi.w	8007c10 <USBD_GetDescriptor+0x204>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_GetDescriptor+0xb4>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007b0d 	.word	0x08007b0d
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b75 	.word	0x08007b75
 8007ad0:	08007ba9 	.word	0x08007ba9
 8007ad4:	08007bdd 	.word	0x08007bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afa:	e091      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa97 	bl	8008032 <USBD_CtlError>
            err++;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	3301      	adds	r3, #1
 8007b08:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0a:	e089      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e077      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa7d 	bl	8008032 <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e06f      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e05d      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa63 	bl	8008032 <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e055      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e043      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa49 	bl	8008032 <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e03b      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e029      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa2f 	bl	8008032 <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e021      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e00f      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa15 	bl	8008032 <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e007      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa0d 	bl	8008032 <USBD_CtlError>
          err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c1e:	e038      	b.n	8007c92 <USBD_GetDescriptor+0x286>
 8007c20:	e037      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7c1b      	ldrb	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	f107 0208 	add.w	r2, r7, #8
 8007c36:	4610      	mov	r0, r2
 8007c38:	4798      	blx	r3
 8007c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3c:	e029      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9f6 	bl	8008032 <USBD_CtlError>
        err++;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4c:	e021      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7c1b      	ldrb	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	4610      	mov	r0, r2
 8007c64:	4798      	blx	r3
 8007c66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	2207      	movs	r2, #7
 8007c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c70:	e00f      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9dc 	bl	8008032 <USBD_CtlError>
        err++;
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c80:	e007      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9d4 	bl	8008032 <USBD_CtlError>
      err++;
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c90:	bf00      	nop
  }

  if (err != 0U)
 8007c92:	7afb      	ldrb	r3, [r7, #11]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11c      	bne.n	8007cd2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c98:	893b      	ldrh	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <USBD_GetDescriptor+0x2b6>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88da      	ldrh	r2, [r3, #6]
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bf28      	it	cs
 8007cb0:	4613      	movcs	r3, r2
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cb6:	893b      	ldrh	r3, [r7, #8]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68f9      	ldr	r1, [r7, #12]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa22 	bl	8008106 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa79 	bl	80081c2 <USBD_CtlSendStatus>
 8007cd0:	e000      	b.n	8007cd4 <USBD_GetDescriptor+0x2c8>
    return;
 8007cd2:	bf00      	nop
    }
  }
}
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop

08007cdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d130      	bne.n	8007d50 <USBD_SetAddress+0x74>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d12c      	bne.n	8007d50 <USBD_SetAddress+0x74>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cfc:	d828      	bhi.n	8007d50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d104      	bne.n	8007d1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f98b 	bl	8008032 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1c:	e01d      	b.n	8007d5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fe44 	bl	80089b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa46 	bl	80081c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	e009      	b.n	8007d5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	e004      	b.n	8007d5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f96d 	bl	8008032 <USBD_CtlError>
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	4b41      	ldr	r3, [pc, #260]	; (8007e7c <USBD_SetConfig+0x118>)
 8007d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d78:	4b40      	ldr	r3, [pc, #256]	; (8007e7c <USBD_SetConfig+0x118>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d904      	bls.n	8007d8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f955 	bl	8008032 <USBD_CtlError>
 8007d88:	e075      	b.n	8007e76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d002      	beq.n	8007d9a <USBD_SetConfig+0x36>
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d023      	beq.n	8007de0 <USBD_SetConfig+0x7c>
 8007d98:	e062      	b.n	8007e60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d9a:	4b38      	ldr	r3, [pc, #224]	; (8007e7c <USBD_SetConfig+0x118>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01a      	beq.n	8007dd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007da2:	4b36      	ldr	r3, [pc, #216]	; (8007e7c <USBD_SetConfig+0x118>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2203      	movs	r2, #3
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007db4:	4b31      	ldr	r3, [pc, #196]	; (8007e7c <USBD_SetConfig+0x118>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff f9e8 	bl	8007190 <USBD_SetClassConfig>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d104      	bne.n	8007dd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f932 	bl	8008032 <USBD_CtlError>
            return;
 8007dce:	e052      	b.n	8007e76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9f6 	bl	80081c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd6:	e04e      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9f2 	bl	80081c2 <USBD_CtlSendStatus>
        break;
 8007dde:	e04a      	b.n	8007e76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007de0:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <USBD_SetConfig+0x118>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d112      	bne.n	8007e0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007df0:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <USBD_SetConfig+0x118>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dfa:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <USBD_SetConfig+0x118>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff f9e4 	bl	80071ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9db 	bl	80081c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e0c:	e033      	b.n	8007e76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <USBD_SetConfig+0x118>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d01d      	beq.n	8007e58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff f9d2 	bl	80071ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <USBD_SetConfig+0x118>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e34:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <USBD_SetConfig+0x118>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9a8 	bl	8007190 <USBD_SetClassConfig>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d104      	bne.n	8007e50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8f2 	bl	8008032 <USBD_CtlError>
            return;
 8007e4e:	e012      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9b6 	bl	80081c2 <USBD_CtlSendStatus>
        break;
 8007e56:	e00e      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9b2 	bl	80081c2 <USBD_CtlSendStatus>
        break;
 8007e5e:	e00a      	b.n	8007e76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8e5 	bl	8008032 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <USBD_SetConfig+0x118>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff f9ad 	bl	80071ce <USBD_ClrClassConfig>
        break;
 8007e74:	bf00      	nop
    }
  }
}
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	200002ec 	.word	0x200002ec

08007e80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	88db      	ldrh	r3, [r3, #6]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d004      	beq.n	8007e9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8cc 	bl	8008032 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e9a:	e022      	b.n	8007ee2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	dc02      	bgt.n	8007eac <USBD_GetConfig+0x2c>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc03      	bgt.n	8007eb2 <USBD_GetConfig+0x32>
 8007eaa:	e015      	b.n	8007ed8 <USBD_GetConfig+0x58>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetConfig+0x48>
 8007eb0:	e012      	b.n	8007ed8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f920 	bl	8008106 <USBD_CtlSendData>
        break;
 8007ec6:	e00c      	b.n	8007ee2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	2201      	movs	r2, #1
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f918 	bl	8008106 <USBD_CtlSendData>
        break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8a9 	bl	8008032 <USBD_CtlError>
        break;
 8007ee0:	bf00      	nop
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d81e      	bhi.n	8007f3e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d004      	beq.n	8007f12 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f891 	bl	8008032 <USBD_CtlError>
        break;
 8007f10:	e01a      	b.n	8007f48 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f043 0202 	orr.w	r2, r3, #2
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	330c      	adds	r3, #12
 8007f32:	2202      	movs	r2, #2
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8e5 	bl	8008106 <USBD_CtlSendData>
      break;
 8007f3c:	e004      	b.n	8007f48 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f876 	bl	8008032 <USBD_CtlError>
      break;
 8007f46:	bf00      	nop
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d106      	bne.n	8007f70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f929 	bl	80081c2 <USBD_CtlSendStatus>
  }
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d80b      	bhi.n	8007fa6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10c      	bne.n	8007fb0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f90f 	bl	80081c2 <USBD_CtlSendStatus>
      }
      break;
 8007fa4:	e004      	b.n	8007fb0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f842 	bl	8008032 <USBD_CtlError>
      break;
 8007fae:	e000      	b.n	8007fb2 <USBD_ClrFeature+0x3a>
      break;
 8007fb0:	bf00      	nop
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785a      	ldrb	r2, [r3, #1]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	3303      	adds	r3, #3
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	3305      	adds	r3, #5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b29b      	uxth	r3, r3
 8008004:	4413      	add	r3, r2
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	3306      	adds	r3, #6
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29a      	uxth	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3307      	adds	r3, #7
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b29b      	uxth	r3, r3
 8008020:	4413      	add	r3, r2
 8008022:	b29a      	uxth	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	80da      	strh	r2, [r3, #6]

}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr

08008032 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fc50 	bl	80088e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008044:	2100      	movs	r1, #0
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fc4c 	bl	80088e4 <USBD_LL_StallEP>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d032      	beq.n	80080d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f834 	bl	80080d8 <USBD_GetLen>
 8008070:	4603      	mov	r3, r0
 8008072:	3301      	adds	r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	b29a      	uxth	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	75fa      	strb	r2, [r7, #23]
 8008084:	461a      	mov	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4413      	add	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	75fa      	strb	r2, [r7, #23]
 8008096:	461a      	mov	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4413      	add	r3, r2
 800809c:	2203      	movs	r2, #3
 800809e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080a0:	e012      	b.n	80080c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	60fa      	str	r2, [r7, #12]
 80080a8:	7dfa      	ldrb	r2, [r7, #23]
 80080aa:	1c51      	adds	r1, r2, #1
 80080ac:	75f9      	strb	r1, [r7, #23]
 80080ae:	4611      	mov	r1, r2
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	440a      	add	r2, r1
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	75fa      	strb	r2, [r7, #23]
 80080be:	461a      	mov	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4413      	add	r3, r2
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e8      	bne.n	80080a2 <USBD_GetString+0x4e>
    }
  }
}
 80080d0:	bf00      	nop
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080e4:	e005      	b.n	80080f2 <USBD_GetLen+0x1a>
  {
    len++;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	3301      	adds	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3301      	adds	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f5      	bne.n	80080e6 <USBD_GetLen+0xe>
  }

  return len;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2202      	movs	r2, #2
 8008118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008122:	88fa      	ldrh	r2, [r7, #6]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	2100      	movs	r1, #0
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 fc61 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fc4f 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	4613      	mov	r3, r2
 800816e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2203      	movs	r2, #3
 8008174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008178:	88fa      	ldrh	r2, [r7, #6]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008180:	88fa      	ldrh	r2, [r7, #6]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	2100      	movs	r1, #0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fc54 	bl	8008a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	4613      	mov	r3, r2
 80081aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	2100      	movs	r1, #0
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 fc42 	bl	8008a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081d2:	2300      	movs	r3, #0
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fc0c 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2205      	movs	r2, #5
 80081f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f8:	2300      	movs	r3, #0
 80081fa:	2200      	movs	r2, #0
 80081fc:	2100      	movs	r1, #0
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fc1c 	bl	8008a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008214:	2200      	movs	r2, #0
 8008216:	4912      	ldr	r1, [pc, #72]	; (8008260 <MX_USB_DEVICE_Init+0x50>)
 8008218:	4812      	ldr	r0, [pc, #72]	; (8008264 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fe ff5f 	bl	80070dc <USBD_Init>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008224:	f7f8 f8fc 	bl	8000420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008228:	490f      	ldr	r1, [pc, #60]	; (8008268 <MX_USB_DEVICE_Init+0x58>)
 800822a:	480e      	ldr	r0, [pc, #56]	; (8008264 <MX_USB_DEVICE_Init+0x54>)
 800822c:	f7fe ff81 	bl	8007132 <USBD_RegisterClass>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008236:	f7f8 f8f3 	bl	8000420 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800823a:	490c      	ldr	r1, [pc, #48]	; (800826c <MX_USB_DEVICE_Init+0x5c>)
 800823c:	4809      	ldr	r0, [pc, #36]	; (8008264 <MX_USB_DEVICE_Init+0x54>)
 800823e:	f7fe fee1 	bl	8007004 <USBD_CDC_RegisterInterface>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008248:	f7f8 f8ea 	bl	8000420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800824c:	4805      	ldr	r0, [pc, #20]	; (8008264 <MX_USB_DEVICE_Init+0x54>)
 800824e:	f7fe ff89 	bl	8007164 <USBD_Start>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008258:	f7f8 f8e2 	bl	8000420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800825c:	bf00      	nop
 800825e:	bd80      	pop	{r7, pc}
 8008260:	2000012c 	.word	0x2000012c
 8008264:	200002f0 	.word	0x200002f0
 8008268:	20000018 	.word	0x20000018
 800826c:	2000011c 	.word	0x2000011c

08008270 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008274:	2200      	movs	r2, #0
 8008276:	4905      	ldr	r1, [pc, #20]	; (800828c <CDC_Init_FS+0x1c>)
 8008278:	4805      	ldr	r0, [pc, #20]	; (8008290 <CDC_Init_FS+0x20>)
 800827a:	f7fe fed9 	bl	8007030 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800827e:	4905      	ldr	r1, [pc, #20]	; (8008294 <CDC_Init_FS+0x24>)
 8008280:	4803      	ldr	r0, [pc, #12]	; (8008290 <CDC_Init_FS+0x20>)
 8008282:	f7fe feee 	bl	8007062 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008286:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008288:	4618      	mov	r0, r3
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200009b4 	.word	0x200009b4
 8008290:	200002f0 	.word	0x200002f0
 8008294:	200005b4 	.word	0x200005b4

08008298 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800829c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800829e:	4618      	mov	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr
	...

080082a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
 80082b4:	4613      	mov	r3, r2
 80082b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b23      	cmp	r3, #35	; 0x23
 80082bc:	d84a      	bhi.n	8008354 <CDC_Control_FS+0xac>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <CDC_Control_FS+0x1c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	08008355 	.word	0x08008355
 80082c8:	08008355 	.word	0x08008355
 80082cc:	08008355 	.word	0x08008355
 80082d0:	08008355 	.word	0x08008355
 80082d4:	08008355 	.word	0x08008355
 80082d8:	08008355 	.word	0x08008355
 80082dc:	08008355 	.word	0x08008355
 80082e0:	08008355 	.word	0x08008355
 80082e4:	08008355 	.word	0x08008355
 80082e8:	08008355 	.word	0x08008355
 80082ec:	08008355 	.word	0x08008355
 80082f0:	08008355 	.word	0x08008355
 80082f4:	08008355 	.word	0x08008355
 80082f8:	08008355 	.word	0x08008355
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008355 	.word	0x08008355
 8008304:	08008355 	.word	0x08008355
 8008308:	08008355 	.word	0x08008355
 800830c:	08008355 	.word	0x08008355
 8008310:	08008355 	.word	0x08008355
 8008314:	08008355 	.word	0x08008355
 8008318:	08008355 	.word	0x08008355
 800831c:	08008355 	.word	0x08008355
 8008320:	08008355 	.word	0x08008355
 8008324:	08008355 	.word	0x08008355
 8008328:	08008355 	.word	0x08008355
 800832c:	08008355 	.word	0x08008355
 8008330:	08008355 	.word	0x08008355
 8008334:	08008355 	.word	0x08008355
 8008338:	08008355 	.word	0x08008355
 800833c:	08008355 	.word	0x08008355
 8008340:	08008355 	.word	0x08008355
 8008344:	08008355 	.word	0x08008355
 8008348:	08008355 	.word	0x08008355
 800834c:	08008355 	.word	0x08008355
 8008350:	08008355 	.word	0x08008355
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008354:	bf00      	nop
  }

  return (USBD_OK);
 8008356:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4810      	ldr	r0, [pc, #64]	; (80083b4 <CDC_Receive_FS+0x50>)
 8008372:	f7fe fe76 	bl	8007062 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008376:	480f      	ldr	r0, [pc, #60]	; (80083b4 <CDC_Receive_FS+0x50>)
 8008378:	f7fe fe86 	bl	8007088 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800837c:	2240      	movs	r2, #64	; 0x40
 800837e:	2100      	movs	r1, #0
 8008380:	480d      	ldr	r0, [pc, #52]	; (80083b8 <CDC_Receive_FS+0x54>)
 8008382:	f000 fd6e 	bl	8008e62 <memset>
  uint8_t len = (uint8_t)*Len;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	461a      	mov	r2, r3
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4809      	ldr	r0, [pc, #36]	; (80083b8 <CDC_Receive_FS+0x54>)
 8008394:	f000 fe3d 	bl	8009012 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	461a      	mov	r2, r3
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fd5f 	bl	8008e62 <memset>

  fill_buffer_flag = 1;
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <CDC_Receive_FS+0x58>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80083aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200002f0 	.word	0x200002f0
 80083b8:	200001f4 	.word	0x200001f4
 80083bc:	20000234 	.word	0x20000234

080083c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2212      	movs	r2, #18
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083d2:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000148 	.word	0x20000148

080083e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2204      	movs	r2, #4
 80083f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000015c 	.word	0x2000015c

08008408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4907      	ldr	r1, [pc, #28]	; (800843c <USBD_FS_ProductStrDescriptor+0x34>)
 800841e:	4808      	ldr	r0, [pc, #32]	; (8008440 <USBD_FS_ProductStrDescriptor+0x38>)
 8008420:	f7ff fe18 	bl	8008054 <USBD_GetString>
 8008424:	e004      	b.n	8008430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <USBD_FS_ProductStrDescriptor+0x34>)
 800842a:	4805      	ldr	r0, [pc, #20]	; (8008440 <USBD_FS_ProductStrDescriptor+0x38>)
 800842c:	f7ff fe12 	bl	8008054 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000db4 	.word	0x20000db4
 8008440:	08009ca4 	.word	0x08009ca4

08008444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	4904      	ldr	r1, [pc, #16]	; (8008464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008454:	4804      	ldr	r0, [pc, #16]	; (8008468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008456:	f7ff fdfd 	bl	8008054 <USBD_GetString>
  return USBD_StrDesc;
 800845a:	4b02      	ldr	r3, [pc, #8]	; (8008464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000db4 	.word	0x20000db4
 8008468:	08009cbc 	.word	0x08009cbc

0800846c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	221a      	movs	r2, #26
 800847c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800847e:	f000 f843 	bl	8008508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008482:	4b02      	ldr	r3, [pc, #8]	; (800848c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000160 	.word	0x20000160

08008490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4907      	ldr	r1, [pc, #28]	; (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084a6:	4808      	ldr	r0, [pc, #32]	; (80084c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a8:	f7ff fdd4 	bl	8008054 <USBD_GetString>
 80084ac:	e004      	b.n	80084b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4904      	ldr	r1, [pc, #16]	; (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084b2:	4805      	ldr	r0, [pc, #20]	; (80084c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084b4:	f7ff fdce 	bl	8008054 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000db4 	.word	0x20000db4
 80084c8:	08009cd0 	.word	0x08009cd0

080084cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4907      	ldr	r1, [pc, #28]	; (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084e2:	4808      	ldr	r0, [pc, #32]	; (8008504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e4:	f7ff fdb6 	bl	8008054 <USBD_GetString>
 80084e8:	e004      	b.n	80084f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4904      	ldr	r1, [pc, #16]	; (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ee:	4805      	ldr	r0, [pc, #20]	; (8008504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084f0:	f7ff fdb0 	bl	8008054 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000db4 	.word	0x20000db4
 8008504:	08009cdc 	.word	0x08009cdc

08008508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800850e:	4b0f      	ldr	r3, [pc, #60]	; (800854c <Get_SerialNum+0x44>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <Get_SerialNum+0x48>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800851a:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <Get_SerialNum+0x4c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4413      	add	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800852e:	2208      	movs	r2, #8
 8008530:	4909      	ldr	r1, [pc, #36]	; (8008558 <Get_SerialNum+0x50>)
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f814 	bl	8008560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008538:	2204      	movs	r2, #4
 800853a:	4908      	ldr	r1, [pc, #32]	; (800855c <Get_SerialNum+0x54>)
 800853c:	68b8      	ldr	r0, [r7, #8]
 800853e:	f000 f80f 	bl	8008560 <IntToUnicode>
  }
}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	1ffff7e8 	.word	0x1ffff7e8
 8008550:	1ffff7ec 	.word	0x1ffff7ec
 8008554:	1ffff7f0 	.word	0x1ffff7f0
 8008558:	20000162 	.word	0x20000162
 800855c:	20000172 	.word	0x20000172

08008560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
 8008576:	e027      	b.n	80085c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	0f1b      	lsrs	r3, r3, #28
 800857c:	2b09      	cmp	r3, #9
 800857e:	d80b      	bhi.n	8008598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	b2da      	uxtb	r2, r3
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4619      	mov	r1, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	440b      	add	r3, r1
 8008590:	3230      	adds	r2, #48	; 0x30
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e00a      	b.n	80085ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	0f1b      	lsrs	r3, r3, #28
 800859c:	b2da      	uxtb	r2, r3
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4619      	mov	r1, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	440b      	add	r3, r1
 80085a8:	3237      	adds	r2, #55	; 0x37
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	3301      	adds	r3, #1
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	3301      	adds	r3, #1
 80085c6:	75fb      	strb	r3, [r7, #23]
 80085c8:	7dfa      	ldrb	r2, [r7, #23]
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3d3      	bcc.n	8008578 <IntToUnicode+0x18>
  }
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr

080085dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a11      	ldr	r2, [pc, #68]	; (8008630 <HAL_PCD_MspInit+0x54>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d11b      	bne.n	8008626 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <HAL_PCD_MspInit+0x58>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	4a10      	ldr	r2, [pc, #64]	; (8008634 <HAL_PCD_MspInit+0x58>)
 80085f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085f8:	61d3      	str	r3, [r2, #28]
 80085fa:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <HAL_PCD_MspInit+0x58>)
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	2013      	movs	r0, #19
 800860c:	f7f8 fb2b 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008610:	2013      	movs	r0, #19
 8008612:	f7f8 fb44 	bl	8000c9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	2014      	movs	r0, #20
 800861c:	f7f8 fb23 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008620:	2014      	movs	r0, #20
 8008622:	f7f8 fb3c 	bl	8000c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40005c00 	.word	0x40005c00
 8008634:	40021000 	.word	0x40021000

08008638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fe fdd0 	bl	80071f4 <USBD_LL_SetupStage>
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	440b      	add	r3, r1
 800867c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	4619      	mov	r1, r3
 8008686:	f7fe fe02 	bl	800728e <USBD_LL_DataOutStage>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	440b      	add	r3, r1
 80086b2:	333c      	adds	r3, #60	; 0x3c
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7fe fe59 	bl	8007370 <USBD_LL_DataInStage>
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe ff69 	bl	80075ac <USBD_LL_SOF>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086ea:	2301      	movs	r3, #1
 80086ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d001      	beq.n	80086fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086f6:	f7f7 fe93 	bl	8000420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008700:	7bfa      	ldrb	r2, [r7, #15]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe ff19 	bl	800753c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fed2 	bl	80074ba <USBD_LL_Reset>
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe ff13 	bl	800755a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800873c:	4b04      	ldr	r3, [pc, #16]	; (8008750 <HAL_PCD_SuspendCallback+0x30>)
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	4a03      	ldr	r2, [pc, #12]	; (8008750 <HAL_PCD_SuspendCallback+0x30>)
 8008742:	f043 0306 	orr.w	r3, r3, #6
 8008746:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	e000ed00 	.word	0xe000ed00

08008754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe ff0d 	bl	8007582 <USBD_LL_Resume>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008778:	4a28      	ldr	r2, [pc, #160]	; (800881c <USBD_LL_Init+0xac>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a26      	ldr	r2, [pc, #152]	; (800881c <USBD_LL_Init+0xac>)
 8008784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008788:	4b24      	ldr	r3, [pc, #144]	; (800881c <USBD_LL_Init+0xac>)
 800878a:	4a25      	ldr	r2, [pc, #148]	; (8008820 <USBD_LL_Init+0xb0>)
 800878c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800878e:	4b23      	ldr	r3, [pc, #140]	; (800881c <USBD_LL_Init+0xac>)
 8008790:	2208      	movs	r2, #8
 8008792:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008794:	4b21      	ldr	r3, [pc, #132]	; (800881c <USBD_LL_Init+0xac>)
 8008796:	2202      	movs	r2, #2
 8008798:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800879a:	4b20      	ldr	r3, [pc, #128]	; (800881c <USBD_LL_Init+0xac>)
 800879c:	2200      	movs	r2, #0
 800879e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <USBD_LL_Init+0xac>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087a6:	4b1d      	ldr	r3, [pc, #116]	; (800881c <USBD_LL_Init+0xac>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087ac:	481b      	ldr	r0, [pc, #108]	; (800881c <USBD_LL_Init+0xac>)
 80087ae:	f7f8 fc15 	bl	8000fdc <HAL_PCD_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087b8:	f7f7 fe32 	bl	8000420 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087c2:	2318      	movs	r3, #24
 80087c4:	2200      	movs	r2, #0
 80087c6:	2100      	movs	r1, #0
 80087c8:	f7fa f934 	bl	8002a34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087d2:	2358      	movs	r3, #88	; 0x58
 80087d4:	2200      	movs	r2, #0
 80087d6:	2180      	movs	r1, #128	; 0x80
 80087d8:	f7fa f92c 	bl	8002a34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087e2:	23c0      	movs	r3, #192	; 0xc0
 80087e4:	2200      	movs	r2, #0
 80087e6:	2181      	movs	r1, #129	; 0x81
 80087e8:	f7fa f924 	bl	8002a34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087f6:	2200      	movs	r2, #0
 80087f8:	2101      	movs	r1, #1
 80087fa:	f7fa f91b 	bl	8002a34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008808:	2200      	movs	r2, #0
 800880a:	2182      	movs	r1, #130	; 0x82
 800880c:	f7fa f912 	bl	8002a34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000fb4 	.word	0x20000fb4
 8008820:	40005c00 	.word	0x40005c00

08008824 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800883a:	4618      	mov	r0, r3
 800883c:	f7f8 fccd 	bl	80011da <HAL_PCD_Start>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f94e 	bl	8008ae8 <USBD_Get_USB_Status>
 800884c:	4603      	mov	r3, r0
 800884e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008850:	7bbb      	ldrb	r3, [r7, #14]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	461a      	mov	r2, r3
 8008868:	4603      	mov	r3, r0
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	460b      	mov	r3, r1
 800886e:	70bb      	strb	r3, [r7, #2]
 8008870:	4613      	mov	r3, r2
 8008872:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008882:	78bb      	ldrb	r3, [r7, #2]
 8008884:	883a      	ldrh	r2, [r7, #0]
 8008886:	78f9      	ldrb	r1, [r7, #3]
 8008888:	f7f8 fe22 	bl	80014d0 <HAL_PCD_EP_Open>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f928 	bl	8008ae8 <USBD_Get_USB_Status>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088c0:	78fa      	ldrb	r2, [r7, #3]
 80088c2:	4611      	mov	r1, r2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f8 fe60 	bl	800158a <HAL_PCD_EP_Close>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f909 	bl	8008ae8 <USBD_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7f8 ff08 	bl	8001718 <HAL_PCD_EP_SetStall>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f8ea 	bl	8008ae8 <USBD_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7f8 ff49 	bl	80017d8 <HAL_PCD_EP_ClrStall>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 f8cb 	bl	8008ae8 <USBD_Get_USB_Status>
 8008952:	4603      	mov	r3, r0
 8008954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008956:	7bbb      	ldrb	r3, [r7, #14]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008972:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008978:	2b00      	cmp	r3, #0
 800897a:	da0c      	bge.n	8008996 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008982:	68f9      	ldr	r1, [r7, #12]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	440b      	add	r3, r1
 8008990:	3302      	adds	r3, #2
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	e00b      	b.n	80089ae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	440b      	add	r3, r1
 80089a8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f8 fd55 	bl	8001486 <HAL_PCD_SetAddress>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f880 	bl	8008ae8 <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	461a      	mov	r2, r3
 8008a02:	460b      	mov	r3, r1
 8008a04:	72fb      	strb	r3, [r7, #11]
 8008a06:	4613      	mov	r3, r2
 8008a08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	7af9      	ldrb	r1, [r7, #11]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	f7f8 fe44 	bl	80016aa <HAL_PCD_EP_Transmit>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f85d 	bl	8008ae8 <USBD_Get_USB_Status>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a32:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	461a      	mov	r2, r3
 8008a48:	460b      	mov	r3, r1
 8008a4a:	72fb      	strb	r3, [r7, #11]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a5e:	893b      	ldrh	r3, [r7, #8]
 8008a60:	7af9      	ldrb	r1, [r7, #11]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	f7f8 fdd9 	bl	800161a <HAL_PCD_EP_Receive>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f83a 	bl	8008ae8 <USBD_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7f8 fdef 	bl	800167c <HAL_PCD_EP_GetRxCount>
 8008a9e:	4603      	mov	r3, r0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ab0:	4b02      	ldr	r3, [pc, #8]	; (8008abc <USBD_static_malloc+0x14>)
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	200012a4 	.word	0x200012a4

08008ac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d817      	bhi.n	8008b2c <USBD_Get_USB_Status+0x44>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBD_Get_USB_Status+0x1c>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b1b 	.word	0x08008b1b
 8008b0c:	08008b21 	.word	0x08008b21
 8008b10:	08008b27 	.word	0x08008b27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
    break;
 8008b18:	e00b      	b.n	8008b32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1e:	e008      	b.n	8008b32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]
    break;
 8008b24:	e005      	b.n	8008b32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b26:	2302      	movs	r3, #2
 8008b28:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2a:	e002      	b.n	8008b32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b30:	bf00      	nop
  }
  return usb_status;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <atoi>:
 8008b40:	220a      	movs	r2, #10
 8008b42:	2100      	movs	r1, #0
 8008b44:	f000 b87e 	b.w	8008c44 <strtol>

08008b48 <_strtol_l.constprop.0>:
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4e:	4686      	mov	lr, r0
 8008b50:	4690      	mov	r8, r2
 8008b52:	d001      	beq.n	8008b58 <_strtol_l.constprop.0+0x10>
 8008b54:	2b24      	cmp	r3, #36	; 0x24
 8008b56:	d906      	bls.n	8008b66 <_strtol_l.constprop.0+0x1e>
 8008b58:	f000 fa2e 	bl	8008fb8 <__errno>
 8008b5c:	2316      	movs	r3, #22
 8008b5e:	6003      	str	r3, [r0, #0]
 8008b60:	2000      	movs	r0, #0
 8008b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b66:	460d      	mov	r5, r1
 8008b68:	4835      	ldr	r0, [pc, #212]	; (8008c40 <_strtol_l.constprop.0+0xf8>)
 8008b6a:	462a      	mov	r2, r5
 8008b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b70:	5d06      	ldrb	r6, [r0, r4]
 8008b72:	f016 0608 	ands.w	r6, r6, #8
 8008b76:	d1f8      	bne.n	8008b6a <_strtol_l.constprop.0+0x22>
 8008b78:	2c2d      	cmp	r4, #45	; 0x2d
 8008b7a:	d12e      	bne.n	8008bda <_strtol_l.constprop.0+0x92>
 8008b7c:	2601      	movs	r6, #1
 8008b7e:	782c      	ldrb	r4, [r5, #0]
 8008b80:	1c95      	adds	r5, r2, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d057      	beq.n	8008c36 <_strtol_l.constprop.0+0xee>
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d109      	bne.n	8008b9e <_strtol_l.constprop.0+0x56>
 8008b8a:	2c30      	cmp	r4, #48	; 0x30
 8008b8c:	d107      	bne.n	8008b9e <_strtol_l.constprop.0+0x56>
 8008b8e:	782a      	ldrb	r2, [r5, #0]
 8008b90:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008b94:	2a58      	cmp	r2, #88	; 0x58
 8008b96:	d149      	bne.n	8008c2c <_strtol_l.constprop.0+0xe4>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	786c      	ldrb	r4, [r5, #1]
 8008b9c:	3502      	adds	r5, #2
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ba8:	fbbc f9f3 	udiv	r9, ip, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008bb6:	2f09      	cmp	r7, #9
 8008bb8:	d814      	bhi.n	8008be4 <_strtol_l.constprop.0+0x9c>
 8008bba:	463c      	mov	r4, r7
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	dd20      	ble.n	8008c02 <_strtol_l.constprop.0+0xba>
 8008bc0:	1c57      	adds	r7, r2, #1
 8008bc2:	d007      	beq.n	8008bd4 <_strtol_l.constprop.0+0x8c>
 8008bc4:	4581      	cmp	r9, r0
 8008bc6:	d319      	bcc.n	8008bfc <_strtol_l.constprop.0+0xb4>
 8008bc8:	d101      	bne.n	8008bce <_strtol_l.constprop.0+0x86>
 8008bca:	45a2      	cmp	sl, r4
 8008bcc:	db16      	blt.n	8008bfc <_strtol_l.constprop.0+0xb4>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8008bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bd8:	e7eb      	b.n	8008bb2 <_strtol_l.constprop.0+0x6a>
 8008bda:	2c2b      	cmp	r4, #43	; 0x2b
 8008bdc:	bf04      	itt	eq
 8008bde:	782c      	ldrbeq	r4, [r5, #0]
 8008be0:	1c95      	addeq	r5, r2, #2
 8008be2:	e7ce      	b.n	8008b82 <_strtol_l.constprop.0+0x3a>
 8008be4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008be8:	2f19      	cmp	r7, #25
 8008bea:	d801      	bhi.n	8008bf0 <_strtol_l.constprop.0+0xa8>
 8008bec:	3c37      	subs	r4, #55	; 0x37
 8008bee:	e7e5      	b.n	8008bbc <_strtol_l.constprop.0+0x74>
 8008bf0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008bf4:	2f19      	cmp	r7, #25
 8008bf6:	d804      	bhi.n	8008c02 <_strtol_l.constprop.0+0xba>
 8008bf8:	3c57      	subs	r4, #87	; 0x57
 8008bfa:	e7df      	b.n	8008bbc <_strtol_l.constprop.0+0x74>
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	e7e8      	b.n	8008bd4 <_strtol_l.constprop.0+0x8c>
 8008c02:	1c53      	adds	r3, r2, #1
 8008c04:	d108      	bne.n	8008c18 <_strtol_l.constprop.0+0xd0>
 8008c06:	2322      	movs	r3, #34	; 0x22
 8008c08:	4660      	mov	r0, ip
 8008c0a:	f8ce 3000 	str.w	r3, [lr]
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	d0a6      	beq.n	8008b62 <_strtol_l.constprop.0+0x1a>
 8008c14:	1e69      	subs	r1, r5, #1
 8008c16:	e006      	b.n	8008c26 <_strtol_l.constprop.0+0xde>
 8008c18:	b106      	cbz	r6, 8008c1c <_strtol_l.constprop.0+0xd4>
 8008c1a:	4240      	negs	r0, r0
 8008c1c:	f1b8 0f00 	cmp.w	r8, #0
 8008c20:	d09f      	beq.n	8008b62 <_strtol_l.constprop.0+0x1a>
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d1f6      	bne.n	8008c14 <_strtol_l.constprop.0+0xcc>
 8008c26:	f8c8 1000 	str.w	r1, [r8]
 8008c2a:	e79a      	b.n	8008b62 <_strtol_l.constprop.0+0x1a>
 8008c2c:	2430      	movs	r4, #48	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1b5      	bne.n	8008b9e <_strtol_l.constprop.0+0x56>
 8008c32:	2308      	movs	r3, #8
 8008c34:	e7b3      	b.n	8008b9e <_strtol_l.constprop.0+0x56>
 8008c36:	2c30      	cmp	r4, #48	; 0x30
 8008c38:	d0a9      	beq.n	8008b8e <_strtol_l.constprop.0+0x46>
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	e7af      	b.n	8008b9e <_strtol_l.constprop.0+0x56>
 8008c3e:	bf00      	nop
 8008c40:	08009d0f 	.word	0x08009d0f

08008c44 <strtol>:
 8008c44:	4613      	mov	r3, r2
 8008c46:	460a      	mov	r2, r1
 8008c48:	4601      	mov	r1, r0
 8008c4a:	4802      	ldr	r0, [pc, #8]	; (8008c54 <strtol+0x10>)
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	f7ff bf7b 	b.w	8008b48 <_strtol_l.constprop.0>
 8008c52:	bf00      	nop
 8008c54:	200001d4 	.word	0x200001d4

08008c58 <std>:
 8008c58:	2300      	movs	r3, #0
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c66:	6083      	str	r3, [r0, #8]
 8008c68:	8181      	strh	r1, [r0, #12]
 8008c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c6c:	81c2      	strh	r2, [r0, #14]
 8008c6e:	6183      	str	r3, [r0, #24]
 8008c70:	4619      	mov	r1, r3
 8008c72:	2208      	movs	r2, #8
 8008c74:	305c      	adds	r0, #92	; 0x5c
 8008c76:	f000 f8f4 	bl	8008e62 <memset>
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <std+0x58>)
 8008c7c:	6224      	str	r4, [r4, #32]
 8008c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8008c80:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <std+0x5c>)
 8008c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <std+0x60>)
 8008c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <std+0x64>)
 8008c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c8c:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <std+0x68>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d006      	beq.n	8008ca0 <std+0x48>
 8008c92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c96:	4294      	cmp	r4, r2
 8008c98:	d002      	beq.n	8008ca0 <std+0x48>
 8008c9a:	33d0      	adds	r3, #208	; 0xd0
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d105      	bne.n	8008cac <std+0x54>
 8008ca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca8:	f000 b9b0 	b.w	800900c <__retarget_lock_init_recursive>
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	bf00      	nop
 8008cb0:	08008ddd 	.word	0x08008ddd
 8008cb4:	08008dff 	.word	0x08008dff
 8008cb8:	08008e37 	.word	0x08008e37
 8008cbc:	08008e5b 	.word	0x08008e5b
 8008cc0:	200014c4 	.word	0x200014c4

08008cc4 <stdio_exit_handler>:
 8008cc4:	4a02      	ldr	r2, [pc, #8]	; (8008cd0 <stdio_exit_handler+0xc>)
 8008cc6:	4903      	ldr	r1, [pc, #12]	; (8008cd4 <stdio_exit_handler+0x10>)
 8008cc8:	4803      	ldr	r0, [pc, #12]	; (8008cd8 <stdio_exit_handler+0x14>)
 8008cca:	f000 b869 	b.w	8008da0 <_fwalk_sglue>
 8008cce:	bf00      	nop
 8008cd0:	2000017c 	.word	0x2000017c
 8008cd4:	08009369 	.word	0x08009369
 8008cd8:	20000188 	.word	0x20000188

08008cdc <cleanup_stdio>:
 8008cdc:	6841      	ldr	r1, [r0, #4]
 8008cde:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <cleanup_stdio+0x34>)
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	d001      	beq.n	8008cec <cleanup_stdio+0x10>
 8008ce8:	f000 fb3e 	bl	8009368 <_fflush_r>
 8008cec:	68a1      	ldr	r1, [r4, #8]
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <cleanup_stdio+0x38>)
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d002      	beq.n	8008cfa <cleanup_stdio+0x1e>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fb37 	bl	8009368 <_fflush_r>
 8008cfa:	68e1      	ldr	r1, [r4, #12]
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <cleanup_stdio+0x3c>)
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	d004      	beq.n	8008d0c <cleanup_stdio+0x30>
 8008d02:	4620      	mov	r0, r4
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f000 bb2e 	b.w	8009368 <_fflush_r>
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	bf00      	nop
 8008d10:	200014c4 	.word	0x200014c4
 8008d14:	2000152c 	.word	0x2000152c
 8008d18:	20001594 	.word	0x20001594

08008d1c <global_stdio_init.part.0>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <global_stdio_init.part.0+0x30>)
 8008d20:	4c0b      	ldr	r4, [pc, #44]	; (8008d50 <global_stdio_init.part.0+0x34>)
 8008d22:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <global_stdio_init.part.0+0x38>)
 8008d24:	4620      	mov	r0, r4
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	2104      	movs	r1, #4
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7ff ff94 	bl	8008c58 <std>
 8008d30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d34:	2201      	movs	r2, #1
 8008d36:	2109      	movs	r1, #9
 8008d38:	f7ff ff8e 	bl	8008c58 <std>
 8008d3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d40:	2202      	movs	r2, #2
 8008d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d46:	2112      	movs	r1, #18
 8008d48:	f7ff bf86 	b.w	8008c58 <std>
 8008d4c:	200015fc 	.word	0x200015fc
 8008d50:	200014c4 	.word	0x200014c4
 8008d54:	08008cc5 	.word	0x08008cc5

08008d58 <__sfp_lock_acquire>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sfp_lock_acquire+0x8>)
 8008d5a:	f000 b958 	b.w	800900e <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	20001605 	.word	0x20001605

08008d64 <__sfp_lock_release>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sfp_lock_release+0x8>)
 8008d66:	f000 b953 	b.w	8009010 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20001605 	.word	0x20001605

08008d70 <__sinit>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	f7ff fff0 	bl	8008d58 <__sfp_lock_acquire>
 8008d78:	6a23      	ldr	r3, [r4, #32]
 8008d7a:	b11b      	cbz	r3, 8008d84 <__sinit+0x14>
 8008d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d80:	f7ff bff0 	b.w	8008d64 <__sfp_lock_release>
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <__sinit+0x28>)
 8008d86:	6223      	str	r3, [r4, #32]
 8008d88:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <__sinit+0x2c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f5      	bne.n	8008d7c <__sinit+0xc>
 8008d90:	f7ff ffc4 	bl	8008d1c <global_stdio_init.part.0>
 8008d94:	e7f2      	b.n	8008d7c <__sinit+0xc>
 8008d96:	bf00      	nop
 8008d98:	08008cdd 	.word	0x08008cdd
 8008d9c:	200015fc 	.word	0x200015fc

08008da0 <_fwalk_sglue>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4607      	mov	r7, r0
 8008da6:	4688      	mov	r8, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	2600      	movs	r6, #0
 8008dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008db0:	f1b9 0901 	subs.w	r9, r9, #1
 8008db4:	d505      	bpl.n	8008dc2 <_fwalk_sglue+0x22>
 8008db6:	6824      	ldr	r4, [r4, #0]
 8008db8:	2c00      	cmp	r4, #0
 8008dba:	d1f7      	bne.n	8008dac <_fwalk_sglue+0xc>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d907      	bls.n	8008dd8 <_fwalk_sglue+0x38>
 8008dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	d003      	beq.n	8008dd8 <_fwalk_sglue+0x38>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	47c0      	blx	r8
 8008dd6:	4306      	orrs	r6, r0
 8008dd8:	3568      	adds	r5, #104	; 0x68
 8008dda:	e7e9      	b.n	8008db0 <_fwalk_sglue+0x10>

08008ddc <__sread>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	460c      	mov	r4, r1
 8008de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de4:	f000 f8c4 	bl	8008f70 <_read_r>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	bfab      	itete	ge
 8008dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dee:	89a3      	ldrhlt	r3, [r4, #12]
 8008df0:	181b      	addge	r3, r3, r0
 8008df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008df6:	bfac      	ite	ge
 8008df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dfa:	81a3      	strhlt	r3, [r4, #12]
 8008dfc:	bd10      	pop	{r4, pc}

08008dfe <__swrite>:
 8008dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	461f      	mov	r7, r3
 8008e04:	898b      	ldrh	r3, [r1, #12]
 8008e06:	4605      	mov	r5, r0
 8008e08:	05db      	lsls	r3, r3, #23
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	d505      	bpl.n	8008e1c <__swrite+0x1e>
 8008e10:	2302      	movs	r3, #2
 8008e12:	2200      	movs	r2, #0
 8008e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e18:	f000 f898 	bl	8008f4c <_lseek_r>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	4632      	mov	r2, r6
 8008e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	4628      	mov	r0, r5
 8008e28:	463b      	mov	r3, r7
 8008e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	f000 b8af 	b.w	8008f94 <_write_r>

08008e36 <__sseek>:
 8008e36:	b510      	push	{r4, lr}
 8008e38:	460c      	mov	r4, r1
 8008e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3e:	f000 f885 	bl	8008f4c <_lseek_r>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	bf15      	itete	ne
 8008e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e52:	81a3      	strheq	r3, [r4, #12]
 8008e54:	bf18      	it	ne
 8008e56:	81a3      	strhne	r3, [r4, #12]
 8008e58:	bd10      	pop	{r4, pc}

08008e5a <__sclose>:
 8008e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5e:	f000 b865 	b.w	8008f2c <_close_r>

08008e62 <memset>:
 8008e62:	4603      	mov	r3, r0
 8008e64:	4402      	add	r2, r0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d100      	bne.n	8008e6c <memset+0xa>
 8008e6a:	4770      	bx	lr
 8008e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8008e70:	e7f9      	b.n	8008e66 <memset+0x4>
	...

08008e74 <strtok>:
 8008e74:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <strtok+0x5c>)
 8008e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	681f      	ldr	r7, [r3, #0]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008e80:	460e      	mov	r6, r1
 8008e82:	b9ec      	cbnz	r4, 8008ec0 <strtok+0x4c>
 8008e84:	2050      	movs	r0, #80	; 0x50
 8008e86:	f000 f939 	bl	80090fc <malloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	6478      	str	r0, [r7, #68]	; 0x44
 8008e8e:	b920      	cbnz	r0, 8008e9a <strtok+0x26>
 8008e90:	215b      	movs	r1, #91	; 0x5b
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <strtok+0x60>)
 8008e94:	4810      	ldr	r0, [pc, #64]	; (8008ed8 <strtok+0x64>)
 8008e96:	f000 f8cb 	bl	8009030 <__assert_func>
 8008e9a:	e9c0 4400 	strd	r4, r4, [r0]
 8008e9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ea2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ea6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008eaa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008eae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008eb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008eb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008eba:	6184      	str	r4, [r0, #24]
 8008ebc:	7704      	strb	r4, [r0, #28]
 8008ebe:	6244      	str	r4, [r0, #36]	; 0x24
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	f000 b806 	b.w	8008edc <__strtok_r>
 8008ed0:	200001d4 	.word	0x200001d4
 8008ed4:	08009e0f 	.word	0x08009e0f
 8008ed8:	08009e26 	.word	0x08009e26

08008edc <__strtok_r>:
 8008edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ede:	b908      	cbnz	r0, 8008ee4 <__strtok_r+0x8>
 8008ee0:	6810      	ldr	r0, [r2, #0]
 8008ee2:	b188      	cbz	r0, 8008f08 <__strtok_r+0x2c>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008eee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ef2:	b91e      	cbnz	r6, 8008efc <__strtok_r+0x20>
 8008ef4:	b965      	cbnz	r5, 8008f10 <__strtok_r+0x34>
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	6015      	str	r5, [r2, #0]
 8008efa:	e005      	b.n	8008f08 <__strtok_r+0x2c>
 8008efc:	42b5      	cmp	r5, r6
 8008efe:	d1f6      	bne.n	8008eee <__strtok_r+0x12>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f0      	bne.n	8008ee6 <__strtok_r+0xa>
 8008f04:	6014      	str	r4, [r2, #0]
 8008f06:	7003      	strb	r3, [r0, #0]
 8008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0a:	461c      	mov	r4, r3
 8008f0c:	e00c      	b.n	8008f28 <__strtok_r+0x4c>
 8008f0e:	b915      	cbnz	r5, 8008f16 <__strtok_r+0x3a>
 8008f10:	460e      	mov	r6, r1
 8008f12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f1a:	42ab      	cmp	r3, r5
 8008f1c:	d1f7      	bne.n	8008f0e <__strtok_r+0x32>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f3      	beq.n	8008f0a <__strtok_r+0x2e>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	e7ed      	b.n	8008f08 <__strtok_r+0x2c>

08008f2c <_close_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4d05      	ldr	r5, [pc, #20]	; (8008f48 <_close_r+0x1c>)
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	f7f7 fb4a 	bl	80005d0 <_close>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_close_r+0x1a>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_close_r+0x1a>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	20001600 	.word	0x20001600

08008f4c <_lseek_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	2200      	movs	r2, #0
 8008f56:	4d05      	ldr	r5, [pc, #20]	; (8008f6c <_lseek_r+0x20>)
 8008f58:	602a      	str	r2, [r5, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f7f7 fb5c 	bl	8000618 <_lseek>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_lseek_r+0x1e>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_lseek_r+0x1e>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20001600 	.word	0x20001600

08008f70 <_read_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4d05      	ldr	r5, [pc, #20]	; (8008f90 <_read_r+0x20>)
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f7 faed 	bl	800055e <_read>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_read_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_read_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20001600 	.word	0x20001600

08008f94 <_write_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4d05      	ldr	r5, [pc, #20]	; (8008fb4 <_write_r+0x20>)
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f7 faf8 	bl	8000598 <_write>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_write_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_write_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20001600 	.word	0x20001600

08008fb8 <__errno>:
 8008fb8:	4b01      	ldr	r3, [pc, #4]	; (8008fc0 <__errno+0x8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200001d4 	.word	0x200001d4

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	4d0c      	ldr	r5, [pc, #48]	; (8008ffc <__libc_init_array+0x38>)
 8008fca:	4c0d      	ldr	r4, [pc, #52]	; (8009000 <__libc_init_array+0x3c>)
 8008fcc:	1b64      	subs	r4, r4, r5
 8008fce:	10a4      	asrs	r4, r4, #2
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	f000 fe5a 	bl	8009c8c <_init>
 8008fd8:	2600      	movs	r6, #0
 8008fda:	4d0a      	ldr	r5, [pc, #40]	; (8009004 <__libc_init_array+0x40>)
 8008fdc:	4c0a      	ldr	r4, [pc, #40]	; (8009008 <__libc_init_array+0x44>)
 8008fde:	1b64      	subs	r4, r4, r5
 8008fe0:	10a4      	asrs	r4, r4, #2
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	08009ef0 	.word	0x08009ef0
 8009000:	08009ef0 	.word	0x08009ef0
 8009004:	08009ef0 	.word	0x08009ef0
 8009008:	08009ef4 	.word	0x08009ef4

0800900c <__retarget_lock_init_recursive>:
 800900c:	4770      	bx	lr

0800900e <__retarget_lock_acquire_recursive>:
 800900e:	4770      	bx	lr

08009010 <__retarget_lock_release_recursive>:
 8009010:	4770      	bx	lr

08009012 <memcpy>:
 8009012:	440a      	add	r2, r1
 8009014:	4291      	cmp	r1, r2
 8009016:	f100 33ff 	add.w	r3, r0, #4294967295
 800901a:	d100      	bne.n	800901e <memcpy+0xc>
 800901c:	4770      	bx	lr
 800901e:	b510      	push	{r4, lr}
 8009020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009024:	4291      	cmp	r1, r2
 8009026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800902a:	d1f9      	bne.n	8009020 <memcpy+0xe>
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <__assert_func>:
 8009030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009032:	4614      	mov	r4, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <__assert_func+0x2c>)
 8009038:	4605      	mov	r5, r0
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68d8      	ldr	r0, [r3, #12]
 800903e:	b14c      	cbz	r4, 8009054 <__assert_func+0x24>
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <__assert_func+0x30>)
 8009042:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009046:	9100      	str	r1, [sp, #0]
 8009048:	462b      	mov	r3, r5
 800904a:	4906      	ldr	r1, [pc, #24]	; (8009064 <__assert_func+0x34>)
 800904c:	f000 f9b4 	bl	80093b8 <fiprintf>
 8009050:	f000 f9d4 	bl	80093fc <abort>
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <__assert_func+0x38>)
 8009056:	461c      	mov	r4, r3
 8009058:	e7f3      	b.n	8009042 <__assert_func+0x12>
 800905a:	bf00      	nop
 800905c:	200001d4 	.word	0x200001d4
 8009060:	08009e80 	.word	0x08009e80
 8009064:	08009e8d 	.word	0x08009e8d
 8009068:	08009ebb 	.word	0x08009ebb

0800906c <_free_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4605      	mov	r5, r0
 8009070:	2900      	cmp	r1, #0
 8009072:	d040      	beq.n	80090f6 <_free_r+0x8a>
 8009074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009078:	1f0c      	subs	r4, r1, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfb8      	it	lt
 800907e:	18e4      	addlt	r4, r4, r3
 8009080:	f000 f8e4 	bl	800924c <__malloc_lock>
 8009084:	4a1c      	ldr	r2, [pc, #112]	; (80090f8 <_free_r+0x8c>)
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	b933      	cbnz	r3, 8009098 <_free_r+0x2c>
 800908a:	6063      	str	r3, [r4, #4]
 800908c:	6014      	str	r4, [r2, #0]
 800908e:	4628      	mov	r0, r5
 8009090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009094:	f000 b8e0 	b.w	8009258 <__malloc_unlock>
 8009098:	42a3      	cmp	r3, r4
 800909a:	d908      	bls.n	80090ae <_free_r+0x42>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	1821      	adds	r1, r4, r0
 80090a0:	428b      	cmp	r3, r1
 80090a2:	bf01      	itttt	eq
 80090a4:	6819      	ldreq	r1, [r3, #0]
 80090a6:	685b      	ldreq	r3, [r3, #4]
 80090a8:	1809      	addeq	r1, r1, r0
 80090aa:	6021      	streq	r1, [r4, #0]
 80090ac:	e7ed      	b.n	800908a <_free_r+0x1e>
 80090ae:	461a      	mov	r2, r3
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	b10b      	cbz	r3, 80090b8 <_free_r+0x4c>
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d9fa      	bls.n	80090ae <_free_r+0x42>
 80090b8:	6811      	ldr	r1, [r2, #0]
 80090ba:	1850      	adds	r0, r2, r1
 80090bc:	42a0      	cmp	r0, r4
 80090be:	d10b      	bne.n	80090d8 <_free_r+0x6c>
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	4401      	add	r1, r0
 80090c4:	1850      	adds	r0, r2, r1
 80090c6:	4283      	cmp	r3, r0
 80090c8:	6011      	str	r1, [r2, #0]
 80090ca:	d1e0      	bne.n	800908e <_free_r+0x22>
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4408      	add	r0, r1
 80090d2:	6010      	str	r0, [r2, #0]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	e7da      	b.n	800908e <_free_r+0x22>
 80090d8:	d902      	bls.n	80090e0 <_free_r+0x74>
 80090da:	230c      	movs	r3, #12
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	e7d6      	b.n	800908e <_free_r+0x22>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	1821      	adds	r1, r4, r0
 80090e4:	428b      	cmp	r3, r1
 80090e6:	bf01      	itttt	eq
 80090e8:	6819      	ldreq	r1, [r3, #0]
 80090ea:	685b      	ldreq	r3, [r3, #4]
 80090ec:	1809      	addeq	r1, r1, r0
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	6054      	str	r4, [r2, #4]
 80090f4:	e7cb      	b.n	800908e <_free_r+0x22>
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20001608 	.word	0x20001608

080090fc <malloc>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <malloc+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f000 b823 	b.w	800914c <_malloc_r>
 8009106:	bf00      	nop
 8009108:	200001d4 	.word	0x200001d4

0800910c <sbrk_aligned>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4e0e      	ldr	r6, [pc, #56]	; (8009148 <sbrk_aligned+0x3c>)
 8009110:	460c      	mov	r4, r1
 8009112:	6831      	ldr	r1, [r6, #0]
 8009114:	4605      	mov	r5, r0
 8009116:	b911      	cbnz	r1, 800911e <sbrk_aligned+0x12>
 8009118:	f000 f960 	bl	80093dc <_sbrk_r>
 800911c:	6030      	str	r0, [r6, #0]
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f95b 	bl	80093dc <_sbrk_r>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d00a      	beq.n	8009140 <sbrk_aligned+0x34>
 800912a:	1cc4      	adds	r4, r0, #3
 800912c:	f024 0403 	bic.w	r4, r4, #3
 8009130:	42a0      	cmp	r0, r4
 8009132:	d007      	beq.n	8009144 <sbrk_aligned+0x38>
 8009134:	1a21      	subs	r1, r4, r0
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f950 	bl	80093dc <_sbrk_r>
 800913c:	3001      	adds	r0, #1
 800913e:	d101      	bne.n	8009144 <sbrk_aligned+0x38>
 8009140:	f04f 34ff 	mov.w	r4, #4294967295
 8009144:	4620      	mov	r0, r4
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	2000160c 	.word	0x2000160c

0800914c <_malloc_r>:
 800914c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009150:	1ccd      	adds	r5, r1, #3
 8009152:	f025 0503 	bic.w	r5, r5, #3
 8009156:	3508      	adds	r5, #8
 8009158:	2d0c      	cmp	r5, #12
 800915a:	bf38      	it	cc
 800915c:	250c      	movcc	r5, #12
 800915e:	2d00      	cmp	r5, #0
 8009160:	4607      	mov	r7, r0
 8009162:	db01      	blt.n	8009168 <_malloc_r+0x1c>
 8009164:	42a9      	cmp	r1, r5
 8009166:	d905      	bls.n	8009174 <_malloc_r+0x28>
 8009168:	230c      	movs	r3, #12
 800916a:	2600      	movs	r6, #0
 800916c:	603b      	str	r3, [r7, #0]
 800916e:	4630      	mov	r0, r6
 8009170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009248 <_malloc_r+0xfc>
 8009178:	f000 f868 	bl	800924c <__malloc_lock>
 800917c:	f8d8 3000 	ldr.w	r3, [r8]
 8009180:	461c      	mov	r4, r3
 8009182:	bb5c      	cbnz	r4, 80091dc <_malloc_r+0x90>
 8009184:	4629      	mov	r1, r5
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ffc0 	bl	800910c <sbrk_aligned>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	4604      	mov	r4, r0
 8009190:	d155      	bne.n	800923e <_malloc_r+0xf2>
 8009192:	f8d8 4000 	ldr.w	r4, [r8]
 8009196:	4626      	mov	r6, r4
 8009198:	2e00      	cmp	r6, #0
 800919a:	d145      	bne.n	8009228 <_malloc_r+0xdc>
 800919c:	2c00      	cmp	r4, #0
 800919e:	d048      	beq.n	8009232 <_malloc_r+0xe6>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	4631      	mov	r1, r6
 80091a4:	4638      	mov	r0, r7
 80091a6:	eb04 0903 	add.w	r9, r4, r3
 80091aa:	f000 f917 	bl	80093dc <_sbrk_r>
 80091ae:	4581      	cmp	r9, r0
 80091b0:	d13f      	bne.n	8009232 <_malloc_r+0xe6>
 80091b2:	6821      	ldr	r1, [r4, #0]
 80091b4:	4638      	mov	r0, r7
 80091b6:	1a6d      	subs	r5, r5, r1
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7ff ffa7 	bl	800910c <sbrk_aligned>
 80091be:	3001      	adds	r0, #1
 80091c0:	d037      	beq.n	8009232 <_malloc_r+0xe6>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	442b      	add	r3, r5
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	f8d8 3000 	ldr.w	r3, [r8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d038      	beq.n	8009242 <_malloc_r+0xf6>
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	42a2      	cmp	r2, r4
 80091d4:	d12b      	bne.n	800922e <_malloc_r+0xe2>
 80091d6:	2200      	movs	r2, #0
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	e00f      	b.n	80091fc <_malloc_r+0xb0>
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	1b52      	subs	r2, r2, r5
 80091e0:	d41f      	bmi.n	8009222 <_malloc_r+0xd6>
 80091e2:	2a0b      	cmp	r2, #11
 80091e4:	d917      	bls.n	8009216 <_malloc_r+0xca>
 80091e6:	1961      	adds	r1, r4, r5
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	6025      	str	r5, [r4, #0]
 80091ec:	bf18      	it	ne
 80091ee:	6059      	strne	r1, [r3, #4]
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	bf08      	it	eq
 80091f4:	f8c8 1000 	streq.w	r1, [r8]
 80091f8:	5162      	str	r2, [r4, r5]
 80091fa:	604b      	str	r3, [r1, #4]
 80091fc:	4638      	mov	r0, r7
 80091fe:	f104 060b 	add.w	r6, r4, #11
 8009202:	f000 f829 	bl	8009258 <__malloc_unlock>
 8009206:	f026 0607 	bic.w	r6, r6, #7
 800920a:	1d23      	adds	r3, r4, #4
 800920c:	1af2      	subs	r2, r6, r3
 800920e:	d0ae      	beq.n	800916e <_malloc_r+0x22>
 8009210:	1b9b      	subs	r3, r3, r6
 8009212:	50a3      	str	r3, [r4, r2]
 8009214:	e7ab      	b.n	800916e <_malloc_r+0x22>
 8009216:	42a3      	cmp	r3, r4
 8009218:	6862      	ldr	r2, [r4, #4]
 800921a:	d1dd      	bne.n	80091d8 <_malloc_r+0x8c>
 800921c:	f8c8 2000 	str.w	r2, [r8]
 8009220:	e7ec      	b.n	80091fc <_malloc_r+0xb0>
 8009222:	4623      	mov	r3, r4
 8009224:	6864      	ldr	r4, [r4, #4]
 8009226:	e7ac      	b.n	8009182 <_malloc_r+0x36>
 8009228:	4634      	mov	r4, r6
 800922a:	6876      	ldr	r6, [r6, #4]
 800922c:	e7b4      	b.n	8009198 <_malloc_r+0x4c>
 800922e:	4613      	mov	r3, r2
 8009230:	e7cc      	b.n	80091cc <_malloc_r+0x80>
 8009232:	230c      	movs	r3, #12
 8009234:	4638      	mov	r0, r7
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	f000 f80e 	bl	8009258 <__malloc_unlock>
 800923c:	e797      	b.n	800916e <_malloc_r+0x22>
 800923e:	6025      	str	r5, [r4, #0]
 8009240:	e7dc      	b.n	80091fc <_malloc_r+0xb0>
 8009242:	605b      	str	r3, [r3, #4]
 8009244:	deff      	udf	#255	; 0xff
 8009246:	bf00      	nop
 8009248:	20001608 	.word	0x20001608

0800924c <__malloc_lock>:
 800924c:	4801      	ldr	r0, [pc, #4]	; (8009254 <__malloc_lock+0x8>)
 800924e:	f7ff bede 	b.w	800900e <__retarget_lock_acquire_recursive>
 8009252:	bf00      	nop
 8009254:	20001604 	.word	0x20001604

08009258 <__malloc_unlock>:
 8009258:	4801      	ldr	r0, [pc, #4]	; (8009260 <__malloc_unlock+0x8>)
 800925a:	f7ff bed9 	b.w	8009010 <__retarget_lock_release_recursive>
 800925e:	bf00      	nop
 8009260:	20001604 	.word	0x20001604

08009264 <__sflush_r>:
 8009264:	898a      	ldrh	r2, [r1, #12]
 8009266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009268:	4605      	mov	r5, r0
 800926a:	0710      	lsls	r0, r2, #28
 800926c:	460c      	mov	r4, r1
 800926e:	d457      	bmi.n	8009320 <__sflush_r+0xbc>
 8009270:	684b      	ldr	r3, [r1, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	dc04      	bgt.n	8009280 <__sflush_r+0x1c>
 8009276:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc01      	bgt.n	8009280 <__sflush_r+0x1c>
 800927c:	2000      	movs	r0, #0
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009282:	2e00      	cmp	r6, #0
 8009284:	d0fa      	beq.n	800927c <__sflush_r+0x18>
 8009286:	2300      	movs	r3, #0
 8009288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800928c:	682f      	ldr	r7, [r5, #0]
 800928e:	6a21      	ldr	r1, [r4, #32]
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	d032      	beq.n	80092fa <__sflush_r+0x96>
 8009294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	075a      	lsls	r2, r3, #29
 800929a:	d505      	bpl.n	80092a8 <__sflush_r+0x44>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	1ac0      	subs	r0, r0, r3
 80092a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a2:	b10b      	cbz	r3, 80092a8 <__sflush_r+0x44>
 80092a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092a6:	1ac0      	subs	r0, r0, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	4602      	mov	r2, r0
 80092ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ae:	4628      	mov	r0, r5
 80092b0:	6a21      	ldr	r1, [r4, #32]
 80092b2:	47b0      	blx	r6
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	d106      	bne.n	80092c8 <__sflush_r+0x64>
 80092ba:	6829      	ldr	r1, [r5, #0]
 80092bc:	291d      	cmp	r1, #29
 80092be:	d82b      	bhi.n	8009318 <__sflush_r+0xb4>
 80092c0:	4a28      	ldr	r2, [pc, #160]	; (8009364 <__sflush_r+0x100>)
 80092c2:	410a      	asrs	r2, r1
 80092c4:	07d6      	lsls	r6, r2, #31
 80092c6:	d427      	bmi.n	8009318 <__sflush_r+0xb4>
 80092c8:	2200      	movs	r2, #0
 80092ca:	6062      	str	r2, [r4, #4]
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	04d9      	lsls	r1, r3, #19
 80092d0:	6022      	str	r2, [r4, #0]
 80092d2:	d504      	bpl.n	80092de <__sflush_r+0x7a>
 80092d4:	1c42      	adds	r2, r0, #1
 80092d6:	d101      	bne.n	80092dc <__sflush_r+0x78>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b903      	cbnz	r3, 80092de <__sflush_r+0x7a>
 80092dc:	6560      	str	r0, [r4, #84]	; 0x54
 80092de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092e0:	602f      	str	r7, [r5, #0]
 80092e2:	2900      	cmp	r1, #0
 80092e4:	d0ca      	beq.n	800927c <__sflush_r+0x18>
 80092e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d002      	beq.n	80092f4 <__sflush_r+0x90>
 80092ee:	4628      	mov	r0, r5
 80092f0:	f7ff febc 	bl	800906c <_free_r>
 80092f4:	2000      	movs	r0, #0
 80092f6:	6360      	str	r0, [r4, #52]	; 0x34
 80092f8:	e7c1      	b.n	800927e <__sflush_r+0x1a>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	1c41      	adds	r1, r0, #1
 8009302:	d1c8      	bne.n	8009296 <__sflush_r+0x32>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0c5      	beq.n	8009296 <__sflush_r+0x32>
 800930a:	2b1d      	cmp	r3, #29
 800930c:	d001      	beq.n	8009312 <__sflush_r+0xae>
 800930e:	2b16      	cmp	r3, #22
 8009310:	d101      	bne.n	8009316 <__sflush_r+0xb2>
 8009312:	602f      	str	r7, [r5, #0]
 8009314:	e7b2      	b.n	800927c <__sflush_r+0x18>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7ae      	b.n	800927e <__sflush_r+0x1a>
 8009320:	690f      	ldr	r7, [r1, #16]
 8009322:	2f00      	cmp	r7, #0
 8009324:	d0aa      	beq.n	800927c <__sflush_r+0x18>
 8009326:	0793      	lsls	r3, r2, #30
 8009328:	bf18      	it	ne
 800932a:	2300      	movne	r3, #0
 800932c:	680e      	ldr	r6, [r1, #0]
 800932e:	bf08      	it	eq
 8009330:	694b      	ldreq	r3, [r1, #20]
 8009332:	1bf6      	subs	r6, r6, r7
 8009334:	600f      	str	r7, [r1, #0]
 8009336:	608b      	str	r3, [r1, #8]
 8009338:	2e00      	cmp	r6, #0
 800933a:	dd9f      	ble.n	800927c <__sflush_r+0x18>
 800933c:	4633      	mov	r3, r6
 800933e:	463a      	mov	r2, r7
 8009340:	4628      	mov	r0, r5
 8009342:	6a21      	ldr	r1, [r4, #32]
 8009344:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009348:	47e0      	blx	ip
 800934a:	2800      	cmp	r0, #0
 800934c:	dc06      	bgt.n	800935c <__sflush_r+0xf8>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e790      	b.n	800927e <__sflush_r+0x1a>
 800935c:	4407      	add	r7, r0
 800935e:	1a36      	subs	r6, r6, r0
 8009360:	e7ea      	b.n	8009338 <__sflush_r+0xd4>
 8009362:	bf00      	nop
 8009364:	dfbffffe 	.word	0xdfbffffe

08009368 <_fflush_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	690b      	ldr	r3, [r1, #16]
 800936c:	4605      	mov	r5, r0
 800936e:	460c      	mov	r4, r1
 8009370:	b913      	cbnz	r3, 8009378 <_fflush_r+0x10>
 8009372:	2500      	movs	r5, #0
 8009374:	4628      	mov	r0, r5
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	b118      	cbz	r0, 8009382 <_fflush_r+0x1a>
 800937a:	6a03      	ldr	r3, [r0, #32]
 800937c:	b90b      	cbnz	r3, 8009382 <_fflush_r+0x1a>
 800937e:	f7ff fcf7 	bl	8008d70 <__sinit>
 8009382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0f3      	beq.n	8009372 <_fflush_r+0xa>
 800938a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800938c:	07d0      	lsls	r0, r2, #31
 800938e:	d404      	bmi.n	800939a <_fflush_r+0x32>
 8009390:	0599      	lsls	r1, r3, #22
 8009392:	d402      	bmi.n	800939a <_fflush_r+0x32>
 8009394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009396:	f7ff fe3a 	bl	800900e <__retarget_lock_acquire_recursive>
 800939a:	4628      	mov	r0, r5
 800939c:	4621      	mov	r1, r4
 800939e:	f7ff ff61 	bl	8009264 <__sflush_r>
 80093a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a4:	4605      	mov	r5, r0
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d4e4      	bmi.n	8009374 <_fflush_r+0xc>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	059b      	lsls	r3, r3, #22
 80093ae:	d4e1      	bmi.n	8009374 <_fflush_r+0xc>
 80093b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093b2:	f7ff fe2d 	bl	8009010 <__retarget_lock_release_recursive>
 80093b6:	e7dd      	b.n	8009374 <_fflush_r+0xc>

080093b8 <fiprintf>:
 80093b8:	b40e      	push	{r1, r2, r3}
 80093ba:	b503      	push	{r0, r1, lr}
 80093bc:	4601      	mov	r1, r0
 80093be:	ab03      	add	r3, sp, #12
 80093c0:	4805      	ldr	r0, [pc, #20]	; (80093d8 <fiprintf+0x20>)
 80093c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c6:	6800      	ldr	r0, [r0, #0]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	f000 f845 	bl	8009458 <_vfiprintf_r>
 80093ce:	b002      	add	sp, #8
 80093d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093d4:	b003      	add	sp, #12
 80093d6:	4770      	bx	lr
 80093d8:	200001d4 	.word	0x200001d4

080093dc <_sbrk_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	2300      	movs	r3, #0
 80093e0:	4d05      	ldr	r5, [pc, #20]	; (80093f8 <_sbrk_r+0x1c>)
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	f7f7 f922 	bl	8000630 <_sbrk>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_sbrk_r+0x1a>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_sbrk_r+0x1a>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20001600 	.word	0x20001600

080093fc <abort>:
 80093fc:	2006      	movs	r0, #6
 80093fe:	b508      	push	{r3, lr}
 8009400:	f000 fb96 	bl	8009b30 <raise>
 8009404:	2001      	movs	r0, #1
 8009406:	f7f7 f8a0 	bl	800054a <_exit>

0800940a <__sfputc_r>:
 800940a:	6893      	ldr	r3, [r2, #8]
 800940c:	b410      	push	{r4}
 800940e:	3b01      	subs	r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	6093      	str	r3, [r2, #8]
 8009414:	da07      	bge.n	8009426 <__sfputc_r+0x1c>
 8009416:	6994      	ldr	r4, [r2, #24]
 8009418:	42a3      	cmp	r3, r4
 800941a:	db01      	blt.n	8009420 <__sfputc_r+0x16>
 800941c:	290a      	cmp	r1, #10
 800941e:	d102      	bne.n	8009426 <__sfputc_r+0x1c>
 8009420:	bc10      	pop	{r4}
 8009422:	f000 bac7 	b.w	80099b4 <__swbuf_r>
 8009426:	6813      	ldr	r3, [r2, #0]
 8009428:	1c58      	adds	r0, r3, #1
 800942a:	6010      	str	r0, [r2, #0]
 800942c:	7019      	strb	r1, [r3, #0]
 800942e:	4608      	mov	r0, r1
 8009430:	bc10      	pop	{r4}
 8009432:	4770      	bx	lr

08009434 <__sfputs_r>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	4606      	mov	r6, r0
 8009438:	460f      	mov	r7, r1
 800943a:	4614      	mov	r4, r2
 800943c:	18d5      	adds	r5, r2, r3
 800943e:	42ac      	cmp	r4, r5
 8009440:	d101      	bne.n	8009446 <__sfputs_r+0x12>
 8009442:	2000      	movs	r0, #0
 8009444:	e007      	b.n	8009456 <__sfputs_r+0x22>
 8009446:	463a      	mov	r2, r7
 8009448:	4630      	mov	r0, r6
 800944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944e:	f7ff ffdc 	bl	800940a <__sfputc_r>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d1f3      	bne.n	800943e <__sfputs_r+0xa>
 8009456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009458 <_vfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	460d      	mov	r5, r1
 800945e:	4614      	mov	r4, r2
 8009460:	4698      	mov	r8, r3
 8009462:	4606      	mov	r6, r0
 8009464:	b09d      	sub	sp, #116	; 0x74
 8009466:	b118      	cbz	r0, 8009470 <_vfiprintf_r+0x18>
 8009468:	6a03      	ldr	r3, [r0, #32]
 800946a:	b90b      	cbnz	r3, 8009470 <_vfiprintf_r+0x18>
 800946c:	f7ff fc80 	bl	8008d70 <__sinit>
 8009470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	d405      	bmi.n	8009482 <_vfiprintf_r+0x2a>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d402      	bmi.n	8009482 <_vfiprintf_r+0x2a>
 800947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947e:	f7ff fdc6 	bl	800900e <__retarget_lock_acquire_recursive>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	071b      	lsls	r3, r3, #28
 8009486:	d501      	bpl.n	800948c <_vfiprintf_r+0x34>
 8009488:	692b      	ldr	r3, [r5, #16]
 800948a:	b99b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x5c>
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f000 face 	bl	8009a30 <__swsetup_r>
 8009494:	b170      	cbz	r0, 80094b4 <_vfiprintf_r+0x5c>
 8009496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009498:	07dc      	lsls	r4, r3, #31
 800949a:	d504      	bpl.n	80094a6 <_vfiprintf_r+0x4e>
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	b01d      	add	sp, #116	; 0x74
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	0598      	lsls	r0, r3, #22
 80094aa:	d4f7      	bmi.n	800949c <_vfiprintf_r+0x44>
 80094ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ae:	f7ff fdaf 	bl	8009010 <__retarget_lock_release_recursive>
 80094b2:	e7f3      	b.n	800949c <_vfiprintf_r+0x44>
 80094b4:	2300      	movs	r3, #0
 80094b6:	9309      	str	r3, [sp, #36]	; 0x24
 80094b8:	2320      	movs	r3, #32
 80094ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094be:	2330      	movs	r3, #48	; 0x30
 80094c0:	f04f 0901 	mov.w	r9, #1
 80094c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009678 <_vfiprintf_r+0x220>
 80094cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094d0:	4623      	mov	r3, r4
 80094d2:	469a      	mov	sl, r3
 80094d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d8:	b10a      	cbz	r2, 80094de <_vfiprintf_r+0x86>
 80094da:	2a25      	cmp	r2, #37	; 0x25
 80094dc:	d1f9      	bne.n	80094d2 <_vfiprintf_r+0x7a>
 80094de:	ebba 0b04 	subs.w	fp, sl, r4
 80094e2:	d00b      	beq.n	80094fc <_vfiprintf_r+0xa4>
 80094e4:	465b      	mov	r3, fp
 80094e6:	4622      	mov	r2, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7ff ffa2 	bl	8009434 <__sfputs_r>
 80094f0:	3001      	adds	r0, #1
 80094f2:	f000 80a9 	beq.w	8009648 <_vfiprintf_r+0x1f0>
 80094f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f8:	445a      	add	r2, fp
 80094fa:	9209      	str	r2, [sp, #36]	; 0x24
 80094fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 80a1 	beq.w	8009648 <_vfiprintf_r+0x1f0>
 8009506:	2300      	movs	r3, #0
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009510:	f10a 0a01 	add.w	sl, sl, #1
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800951c:	931a      	str	r3, [sp, #104]	; 0x68
 800951e:	4654      	mov	r4, sl
 8009520:	2205      	movs	r2, #5
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	4854      	ldr	r0, [pc, #336]	; (8009678 <_vfiprintf_r+0x220>)
 8009528:	f000 fb1e 	bl	8009b68 <memchr>
 800952c:	9a04      	ldr	r2, [sp, #16]
 800952e:	b9d8      	cbnz	r0, 8009568 <_vfiprintf_r+0x110>
 8009530:	06d1      	lsls	r1, r2, #27
 8009532:	bf44      	itt	mi
 8009534:	2320      	movmi	r3, #32
 8009536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953a:	0713      	lsls	r3, r2, #28
 800953c:	bf44      	itt	mi
 800953e:	232b      	movmi	r3, #43	; 0x2b
 8009540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b2a      	cmp	r3, #42	; 0x2a
 800954a:	d015      	beq.n	8009578 <_vfiprintf_r+0x120>
 800954c:	4654      	mov	r4, sl
 800954e:	2000      	movs	r0, #0
 8009550:	f04f 0c0a 	mov.w	ip, #10
 8009554:	9a07      	ldr	r2, [sp, #28]
 8009556:	4621      	mov	r1, r4
 8009558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800955c:	3b30      	subs	r3, #48	; 0x30
 800955e:	2b09      	cmp	r3, #9
 8009560:	d94d      	bls.n	80095fe <_vfiprintf_r+0x1a6>
 8009562:	b1b0      	cbz	r0, 8009592 <_vfiprintf_r+0x13a>
 8009564:	9207      	str	r2, [sp, #28]
 8009566:	e014      	b.n	8009592 <_vfiprintf_r+0x13a>
 8009568:	eba0 0308 	sub.w	r3, r0, r8
 800956c:	fa09 f303 	lsl.w	r3, r9, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	46a2      	mov	sl, r4
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	e7d2      	b.n	800951e <_vfiprintf_r+0xc6>
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	1d19      	adds	r1, r3, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	9103      	str	r1, [sp, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfbb      	ittet	lt
 8009584:	425b      	neglt	r3, r3
 8009586:	f042 0202 	orrlt.w	r2, r2, #2
 800958a:	9307      	strge	r3, [sp, #28]
 800958c:	9307      	strlt	r3, [sp, #28]
 800958e:	bfb8      	it	lt
 8009590:	9204      	strlt	r2, [sp, #16]
 8009592:	7823      	ldrb	r3, [r4, #0]
 8009594:	2b2e      	cmp	r3, #46	; 0x2e
 8009596:	d10c      	bne.n	80095b2 <_vfiprintf_r+0x15a>
 8009598:	7863      	ldrb	r3, [r4, #1]
 800959a:	2b2a      	cmp	r3, #42	; 0x2a
 800959c:	d134      	bne.n	8009608 <_vfiprintf_r+0x1b0>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	3402      	adds	r4, #2
 80095a2:	1d1a      	adds	r2, r3, #4
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	9203      	str	r2, [sp, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bfb8      	it	lt
 80095ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800967c <_vfiprintf_r+0x224>
 80095b6:	2203      	movs	r2, #3
 80095b8:	4650      	mov	r0, sl
 80095ba:	7821      	ldrb	r1, [r4, #0]
 80095bc:	f000 fad4 	bl	8009b68 <memchr>
 80095c0:	b138      	cbz	r0, 80095d2 <_vfiprintf_r+0x17a>
 80095c2:	2240      	movs	r2, #64	; 0x40
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	eba0 000a 	sub.w	r0, r0, sl
 80095ca:	4082      	lsls	r2, r0
 80095cc:	4313      	orrs	r3, r2
 80095ce:	3401      	adds	r4, #1
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d6:	2206      	movs	r2, #6
 80095d8:	4829      	ldr	r0, [pc, #164]	; (8009680 <_vfiprintf_r+0x228>)
 80095da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095de:	f000 fac3 	bl	8009b68 <memchr>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d03f      	beq.n	8009666 <_vfiprintf_r+0x20e>
 80095e6:	4b27      	ldr	r3, [pc, #156]	; (8009684 <_vfiprintf_r+0x22c>)
 80095e8:	bb1b      	cbnz	r3, 8009632 <_vfiprintf_r+0x1da>
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	3307      	adds	r3, #7
 80095ee:	f023 0307 	bic.w	r3, r3, #7
 80095f2:	3308      	adds	r3, #8
 80095f4:	9303      	str	r3, [sp, #12]
 80095f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f8:	443b      	add	r3, r7
 80095fa:	9309      	str	r3, [sp, #36]	; 0x24
 80095fc:	e768      	b.n	80094d0 <_vfiprintf_r+0x78>
 80095fe:	460c      	mov	r4, r1
 8009600:	2001      	movs	r0, #1
 8009602:	fb0c 3202 	mla	r2, ip, r2, r3
 8009606:	e7a6      	b.n	8009556 <_vfiprintf_r+0xfe>
 8009608:	2300      	movs	r3, #0
 800960a:	f04f 0c0a 	mov.w	ip, #10
 800960e:	4619      	mov	r1, r3
 8009610:	3401      	adds	r4, #1
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	4620      	mov	r0, r4
 8009616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800961a:	3a30      	subs	r2, #48	; 0x30
 800961c:	2a09      	cmp	r2, #9
 800961e:	d903      	bls.n	8009628 <_vfiprintf_r+0x1d0>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0c6      	beq.n	80095b2 <_vfiprintf_r+0x15a>
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	e7c4      	b.n	80095b2 <_vfiprintf_r+0x15a>
 8009628:	4604      	mov	r4, r0
 800962a:	2301      	movs	r3, #1
 800962c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009630:	e7f0      	b.n	8009614 <_vfiprintf_r+0x1bc>
 8009632:	ab03      	add	r3, sp, #12
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	462a      	mov	r2, r5
 8009638:	4630      	mov	r0, r6
 800963a:	4b13      	ldr	r3, [pc, #76]	; (8009688 <_vfiprintf_r+0x230>)
 800963c:	a904      	add	r1, sp, #16
 800963e:	f3af 8000 	nop.w
 8009642:	4607      	mov	r7, r0
 8009644:	1c78      	adds	r0, r7, #1
 8009646:	d1d6      	bne.n	80095f6 <_vfiprintf_r+0x19e>
 8009648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	d405      	bmi.n	800965a <_vfiprintf_r+0x202>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	059a      	lsls	r2, r3, #22
 8009652:	d402      	bmi.n	800965a <_vfiprintf_r+0x202>
 8009654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009656:	f7ff fcdb 	bl	8009010 <__retarget_lock_release_recursive>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	065b      	lsls	r3, r3, #25
 800965e:	f53f af1d 	bmi.w	800949c <_vfiprintf_r+0x44>
 8009662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009664:	e71c      	b.n	80094a0 <_vfiprintf_r+0x48>
 8009666:	ab03      	add	r3, sp, #12
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	462a      	mov	r2, r5
 800966c:	4630      	mov	r0, r6
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <_vfiprintf_r+0x230>)
 8009670:	a904      	add	r1, sp, #16
 8009672:	f000 f87d 	bl	8009770 <_printf_i>
 8009676:	e7e4      	b.n	8009642 <_vfiprintf_r+0x1ea>
 8009678:	08009ebc 	.word	0x08009ebc
 800967c:	08009ec2 	.word	0x08009ec2
 8009680:	08009ec6 	.word	0x08009ec6
 8009684:	00000000 	.word	0x00000000
 8009688:	08009435 	.word	0x08009435

0800968c <_printf_common>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	4616      	mov	r6, r2
 8009692:	4699      	mov	r9, r3
 8009694:	688a      	ldr	r2, [r1, #8]
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	4607      	mov	r7, r0
 800969a:	4293      	cmp	r3, r2
 800969c:	bfb8      	it	lt
 800969e:	4613      	movlt	r3, r2
 80096a0:	6033      	str	r3, [r6, #0]
 80096a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096a6:	460c      	mov	r4, r1
 80096a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096ac:	b10a      	cbz	r2, 80096b2 <_printf_common+0x26>
 80096ae:	3301      	adds	r3, #1
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	0699      	lsls	r1, r3, #26
 80096b6:	bf42      	ittt	mi
 80096b8:	6833      	ldrmi	r3, [r6, #0]
 80096ba:	3302      	addmi	r3, #2
 80096bc:	6033      	strmi	r3, [r6, #0]
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	f015 0506 	ands.w	r5, r5, #6
 80096c4:	d106      	bne.n	80096d4 <_printf_common+0x48>
 80096c6:	f104 0a19 	add.w	sl, r4, #25
 80096ca:	68e3      	ldr	r3, [r4, #12]
 80096cc:	6832      	ldr	r2, [r6, #0]
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc2b      	bgt.n	800972c <_printf_common+0xa0>
 80096d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096d8:	1e13      	subs	r3, r2, #0
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	bf18      	it	ne
 80096de:	2301      	movne	r3, #1
 80096e0:	0692      	lsls	r2, r2, #26
 80096e2:	d430      	bmi.n	8009746 <_printf_common+0xba>
 80096e4:	4649      	mov	r1, r9
 80096e6:	4638      	mov	r0, r7
 80096e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d023      	beq.n	800973a <_printf_common+0xae>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	f003 0306 	and.w	r3, r3, #6
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	bf14      	ite	ne
 80096fe:	2500      	movne	r5, #0
 8009700:	6833      	ldreq	r3, [r6, #0]
 8009702:	f04f 0600 	mov.w	r6, #0
 8009706:	bf08      	it	eq
 8009708:	68e5      	ldreq	r5, [r4, #12]
 800970a:	f104 041a 	add.w	r4, r4, #26
 800970e:	bf08      	it	eq
 8009710:	1aed      	subeq	r5, r5, r3
 8009712:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009716:	bf08      	it	eq
 8009718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800971c:	4293      	cmp	r3, r2
 800971e:	bfc4      	itt	gt
 8009720:	1a9b      	subgt	r3, r3, r2
 8009722:	18ed      	addgt	r5, r5, r3
 8009724:	42b5      	cmp	r5, r6
 8009726:	d11a      	bne.n	800975e <_printf_common+0xd2>
 8009728:	2000      	movs	r0, #0
 800972a:	e008      	b.n	800973e <_printf_common+0xb2>
 800972c:	2301      	movs	r3, #1
 800972e:	4652      	mov	r2, sl
 8009730:	4649      	mov	r1, r9
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	3001      	adds	r0, #1
 8009738:	d103      	bne.n	8009742 <_printf_common+0xb6>
 800973a:	f04f 30ff 	mov.w	r0, #4294967295
 800973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009742:	3501      	adds	r5, #1
 8009744:	e7c1      	b.n	80096ca <_printf_common+0x3e>
 8009746:	2030      	movs	r0, #48	; 0x30
 8009748:	18e1      	adds	r1, r4, r3
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009754:	4422      	add	r2, r4
 8009756:	3302      	adds	r3, #2
 8009758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800975c:	e7c2      	b.n	80096e4 <_printf_common+0x58>
 800975e:	2301      	movs	r3, #1
 8009760:	4622      	mov	r2, r4
 8009762:	4649      	mov	r1, r9
 8009764:	4638      	mov	r0, r7
 8009766:	47c0      	blx	r8
 8009768:	3001      	adds	r0, #1
 800976a:	d0e6      	beq.n	800973a <_printf_common+0xae>
 800976c:	3601      	adds	r6, #1
 800976e:	e7d9      	b.n	8009724 <_printf_common+0x98>

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	7e0f      	ldrb	r7, [r1, #24]
 8009776:	4691      	mov	r9, r2
 8009778:	2f78      	cmp	r7, #120	; 0x78
 800977a:	4680      	mov	r8, r0
 800977c:	460c      	mov	r4, r1
 800977e:	469a      	mov	sl, r3
 8009780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	; 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d5 	beq.w	800993c <_printf_i+0x1cc>
 8009792:	2f58      	cmp	r7, #88	; 0x58
 8009794:	f000 80c1 	beq.w	800991a <_printf_i+0x1aa>
 8009798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a101      	add	r1, pc, #4	; (adr r1, 80097b0 <_printf_i+0x40>)
 80097ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	08009923 	.word	0x08009923
 80097e0:	08009849 	.word	0x08009849
 80097e4:	080098dd 	.word	0x080098dd
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	08009945 	.word	0x08009945
 80097f4:	08009799 	.word	0x08009799
 80097f8:	08009849 	.word	0x08009849
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	080098e5 	.word	0x080098e5
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	602a      	str	r2, [r5, #0]
 8009810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e0a0      	b.n	800995e <_printf_i+0x1ee>
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	0607      	lsls	r7, r0, #24
 8009822:	f103 0104 	add.w	r1, r3, #4
 8009826:	6029      	str	r1, [r5, #0]
 8009828:	d501      	bpl.n	800982e <_printf_i+0xbe>
 800982a:	681e      	ldr	r6, [r3, #0]
 800982c:	e003      	b.n	8009836 <_printf_i+0xc6>
 800982e:	0646      	lsls	r6, r0, #25
 8009830:	d5fb      	bpl.n	800982a <_printf_i+0xba>
 8009832:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009836:	2e00      	cmp	r6, #0
 8009838:	da03      	bge.n	8009842 <_printf_i+0xd2>
 800983a:	232d      	movs	r3, #45	; 0x2d
 800983c:	4276      	negs	r6, r6
 800983e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009842:	230a      	movs	r3, #10
 8009844:	4859      	ldr	r0, [pc, #356]	; (80099ac <_printf_i+0x23c>)
 8009846:	e012      	b.n	800986e <_printf_i+0xfe>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	1d19      	adds	r1, r3, #4
 800984e:	6029      	str	r1, [r5, #0]
 8009850:	0605      	lsls	r5, r0, #24
 8009852:	d501      	bpl.n	8009858 <_printf_i+0xe8>
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	e002      	b.n	800985e <_printf_i+0xee>
 8009858:	0641      	lsls	r1, r0, #25
 800985a:	d5fb      	bpl.n	8009854 <_printf_i+0xe4>
 800985c:	881e      	ldrh	r6, [r3, #0]
 800985e:	2f6f      	cmp	r7, #111	; 0x6f
 8009860:	bf0c      	ite	eq
 8009862:	2308      	moveq	r3, #8
 8009864:	230a      	movne	r3, #10
 8009866:	4851      	ldr	r0, [pc, #324]	; (80099ac <_printf_i+0x23c>)
 8009868:	2100      	movs	r1, #0
 800986a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800986e:	6865      	ldr	r5, [r4, #4]
 8009870:	2d00      	cmp	r5, #0
 8009872:	bfa8      	it	ge
 8009874:	6821      	ldrge	r1, [r4, #0]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	bfa4      	itt	ge
 800987a:	f021 0104 	bicge.w	r1, r1, #4
 800987e:	6021      	strge	r1, [r4, #0]
 8009880:	b90e      	cbnz	r6, 8009886 <_printf_i+0x116>
 8009882:	2d00      	cmp	r5, #0
 8009884:	d04b      	beq.n	800991e <_printf_i+0x1ae>
 8009886:	4615      	mov	r5, r2
 8009888:	fbb6 f1f3 	udiv	r1, r6, r3
 800988c:	fb03 6711 	mls	r7, r3, r1, r6
 8009890:	5dc7      	ldrb	r7, [r0, r7]
 8009892:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009896:	4637      	mov	r7, r6
 8009898:	42bb      	cmp	r3, r7
 800989a:	460e      	mov	r6, r1
 800989c:	d9f4      	bls.n	8009888 <_printf_i+0x118>
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d10b      	bne.n	80098ba <_printf_i+0x14a>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07de      	lsls	r6, r3, #31
 80098a6:	d508      	bpl.n	80098ba <_printf_i+0x14a>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	4299      	cmp	r1, r3
 80098ae:	bfde      	ittt	le
 80098b0:	2330      	movle	r3, #48	; 0x30
 80098b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ba:	1b52      	subs	r2, r2, r5
 80098bc:	6122      	str	r2, [r4, #16]
 80098be:	464b      	mov	r3, r9
 80098c0:	4621      	mov	r1, r4
 80098c2:	4640      	mov	r0, r8
 80098c4:	f8cd a000 	str.w	sl, [sp]
 80098c8:	aa03      	add	r2, sp, #12
 80098ca:	f7ff fedf 	bl	800968c <_printf_common>
 80098ce:	3001      	adds	r0, #1
 80098d0:	d14a      	bne.n	8009968 <_printf_i+0x1f8>
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295
 80098d6:	b004      	add	sp, #16
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	f043 0320 	orr.w	r3, r3, #32
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	2778      	movs	r7, #120	; 0x78
 80098e6:	4832      	ldr	r0, [pc, #200]	; (80099b0 <_printf_i+0x240>)
 80098e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	6829      	ldr	r1, [r5, #0]
 80098f0:	061f      	lsls	r7, r3, #24
 80098f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80098f6:	d402      	bmi.n	80098fe <_printf_i+0x18e>
 80098f8:	065f      	lsls	r7, r3, #25
 80098fa:	bf48      	it	mi
 80098fc:	b2b6      	uxthmi	r6, r6
 80098fe:	07df      	lsls	r7, r3, #31
 8009900:	bf48      	it	mi
 8009902:	f043 0320 	orrmi.w	r3, r3, #32
 8009906:	6029      	str	r1, [r5, #0]
 8009908:	bf48      	it	mi
 800990a:	6023      	strmi	r3, [r4, #0]
 800990c:	b91e      	cbnz	r6, 8009916 <_printf_i+0x1a6>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	f023 0320 	bic.w	r3, r3, #32
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	2310      	movs	r3, #16
 8009918:	e7a6      	b.n	8009868 <_printf_i+0xf8>
 800991a:	4824      	ldr	r0, [pc, #144]	; (80099ac <_printf_i+0x23c>)
 800991c:	e7e4      	b.n	80098e8 <_printf_i+0x178>
 800991e:	4615      	mov	r5, r2
 8009920:	e7bd      	b.n	800989e <_printf_i+0x12e>
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	6826      	ldr	r6, [r4, #0]
 8009926:	1d18      	adds	r0, r3, #4
 8009928:	6961      	ldr	r1, [r4, #20]
 800992a:	6028      	str	r0, [r5, #0]
 800992c:	0635      	lsls	r5, r6, #24
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	d501      	bpl.n	8009936 <_printf_i+0x1c6>
 8009932:	6019      	str	r1, [r3, #0]
 8009934:	e002      	b.n	800993c <_printf_i+0x1cc>
 8009936:	0670      	lsls	r0, r6, #25
 8009938:	d5fb      	bpl.n	8009932 <_printf_i+0x1c2>
 800993a:	8019      	strh	r1, [r3, #0]
 800993c:	2300      	movs	r3, #0
 800993e:	4615      	mov	r5, r2
 8009940:	6123      	str	r3, [r4, #16]
 8009942:	e7bc      	b.n	80098be <_printf_i+0x14e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	2100      	movs	r1, #0
 8009948:	1d1a      	adds	r2, r3, #4
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	681d      	ldr	r5, [r3, #0]
 800994e:	6862      	ldr	r2, [r4, #4]
 8009950:	4628      	mov	r0, r5
 8009952:	f000 f909 	bl	8009b68 <memchr>
 8009956:	b108      	cbz	r0, 800995c <_printf_i+0x1ec>
 8009958:	1b40      	subs	r0, r0, r5
 800995a:	6060      	str	r0, [r4, #4]
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	6123      	str	r3, [r4, #16]
 8009960:	2300      	movs	r3, #0
 8009962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009966:	e7aa      	b.n	80098be <_printf_i+0x14e>
 8009968:	462a      	mov	r2, r5
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	47d0      	blx	sl
 8009972:	3001      	adds	r0, #1
 8009974:	d0ad      	beq.n	80098d2 <_printf_i+0x162>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	079b      	lsls	r3, r3, #30
 800997a:	d413      	bmi.n	80099a4 <_printf_i+0x234>
 800997c:	68e0      	ldr	r0, [r4, #12]
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	4298      	cmp	r0, r3
 8009982:	bfb8      	it	lt
 8009984:	4618      	movlt	r0, r3
 8009986:	e7a6      	b.n	80098d6 <_printf_i+0x166>
 8009988:	2301      	movs	r3, #1
 800998a:	4632      	mov	r2, r6
 800998c:	4649      	mov	r1, r9
 800998e:	4640      	mov	r0, r8
 8009990:	47d0      	blx	sl
 8009992:	3001      	adds	r0, #1
 8009994:	d09d      	beq.n	80098d2 <_printf_i+0x162>
 8009996:	3501      	adds	r5, #1
 8009998:	68e3      	ldr	r3, [r4, #12]
 800999a:	9903      	ldr	r1, [sp, #12]
 800999c:	1a5b      	subs	r3, r3, r1
 800999e:	42ab      	cmp	r3, r5
 80099a0:	dcf2      	bgt.n	8009988 <_printf_i+0x218>
 80099a2:	e7eb      	b.n	800997c <_printf_i+0x20c>
 80099a4:	2500      	movs	r5, #0
 80099a6:	f104 0619 	add.w	r6, r4, #25
 80099aa:	e7f5      	b.n	8009998 <_printf_i+0x228>
 80099ac:	08009ecd 	.word	0x08009ecd
 80099b0:	08009ede 	.word	0x08009ede

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <__swbuf_r+0x12>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	b90b      	cbnz	r3, 80099c6 <__swbuf_r+0x12>
 80099c2:	f7ff f9d5 	bl	8008d70 <__sinit>
 80099c6:	69a3      	ldr	r3, [r4, #24]
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	071a      	lsls	r2, r3, #28
 80099ce:	d525      	bpl.n	8009a1c <__swbuf_r+0x68>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b31b      	cbz	r3, 8009a1c <__swbuf_r+0x68>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	6922      	ldr	r2, [r4, #16]
 80099d8:	b2f6      	uxtb	r6, r6
 80099da:	1a98      	subs	r0, r3, r2
 80099dc:	6963      	ldr	r3, [r4, #20]
 80099de:	4637      	mov	r7, r6
 80099e0:	4283      	cmp	r3, r0
 80099e2:	dc04      	bgt.n	80099ee <__swbuf_r+0x3a>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7ff fcbe 	bl	8009368 <_fflush_r>
 80099ec:	b9e0      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	60a3      	str	r3, [r4, #8]
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	701e      	strb	r6, [r3, #0]
 80099fc:	6962      	ldr	r2, [r4, #20]
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d004      	beq.n	8009a0e <__swbuf_r+0x5a>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	07db      	lsls	r3, r3, #31
 8009a08:	d506      	bpl.n	8009a18 <__swbuf_r+0x64>
 8009a0a:	2e0a      	cmp	r6, #10
 8009a0c:	d104      	bne.n	8009a18 <__swbuf_r+0x64>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7ff fca9 	bl	8009368 <_fflush_r>
 8009a16:	b938      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 8009a18:	4638      	mov	r0, r7
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f806 	bl	8009a30 <__swsetup_r>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0d5      	beq.n	80099d4 <__swbuf_r+0x20>
 8009a28:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2c:	e7f4      	b.n	8009a18 <__swbuf_r+0x64>
	...

08009a30 <__swsetup_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <__swsetup_r+0xac>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	b118      	cbz	r0, 8009a44 <__swsetup_r+0x14>
 8009a3c:	6a03      	ldr	r3, [r0, #32]
 8009a3e:	b90b      	cbnz	r3, 8009a44 <__swsetup_r+0x14>
 8009a40:	f7ff f996 	bl	8008d70 <__sinit>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a4a:	0718      	lsls	r0, r3, #28
 8009a4c:	d422      	bmi.n	8009a94 <__swsetup_r+0x64>
 8009a4e:	06d9      	lsls	r1, r3, #27
 8009a50:	d407      	bmi.n	8009a62 <__swsetup_r+0x32>
 8009a52:	2309      	movs	r3, #9
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e034      	b.n	8009acc <__swsetup_r+0x9c>
 8009a62:	0758      	lsls	r0, r3, #29
 8009a64:	d512      	bpl.n	8009a8c <__swsetup_r+0x5c>
 8009a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a68:	b141      	cbz	r1, 8009a7c <__swsetup_r+0x4c>
 8009a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d002      	beq.n	8009a78 <__swsetup_r+0x48>
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7ff fafa 	bl	800906c <_free_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0308 	orr.w	r3, r3, #8
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b94b      	cbnz	r3, 8009aac <__swsetup_r+0x7c>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa2:	d003      	beq.n	8009aac <__swsetup_r+0x7c>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f891 	bl	8009bce <__smakebuf_r>
 8009aac:	89a0      	ldrh	r0, [r4, #12]
 8009aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab2:	f010 0301 	ands.w	r3, r0, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	425b      	negs	r3, r3
 8009ac0:	61a3      	str	r3, [r4, #24]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swsetup_r+0xa8>
 8009ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aca:	d1c4      	bne.n	8009a56 <__swsetup_r+0x26>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0781      	lsls	r1, r0, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6963      	ldrpl	r3, [r4, #20]
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x92>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x9c>
 8009adc:	200001d4 	.word	0x200001d4

08009ae0 <_raise_r>:
 8009ae0:	291f      	cmp	r1, #31
 8009ae2:	b538      	push	{r3, r4, r5, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	d904      	bls.n	8009af4 <_raise_r+0x14>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009af6:	b112      	cbz	r2, 8009afe <_raise_r+0x1e>
 8009af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009afc:	b94b      	cbnz	r3, 8009b12 <_raise_r+0x32>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f830 	bl	8009b64 <_getpid_r>
 8009b04:	462a      	mov	r2, r5
 8009b06:	4601      	mov	r1, r0
 8009b08:	4620      	mov	r0, r4
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f000 b817 	b.w	8009b40 <_kill_r>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d00a      	beq.n	8009b2c <_raise_r+0x4c>
 8009b16:	1c59      	adds	r1, r3, #1
 8009b18:	d103      	bne.n	8009b22 <_raise_r+0x42>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7e7      	b.n	8009af2 <_raise_r+0x12>
 8009b22:	2400      	movs	r4, #0
 8009b24:	4628      	mov	r0, r5
 8009b26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b2a:	4798      	blx	r3
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7e0      	b.n	8009af2 <_raise_r+0x12>

08009b30 <raise>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <raise+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f7ff bfd3 	b.w	8009ae0 <_raise_r>
 8009b3a:	bf00      	nop
 8009b3c:	200001d4 	.word	0x200001d4

08009b40 <_kill_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	2300      	movs	r3, #0
 8009b44:	4d06      	ldr	r5, [pc, #24]	; (8009b60 <_kill_r+0x20>)
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f6 fcec 	bl	800052a <_kill>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_kill_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_kill_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001600 	.word	0x20001600

08009b64 <_getpid_r>:
 8009b64:	f7f6 bcda 	b.w	800051c <_getpid>

08009b68 <memchr>:
 8009b68:	4603      	mov	r3, r0
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	b2c9      	uxtb	r1, r1
 8009b6e:	4402      	add	r2, r0
 8009b70:	4293      	cmp	r3, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	d101      	bne.n	8009b7a <memchr+0x12>
 8009b76:	2000      	movs	r0, #0
 8009b78:	e003      	b.n	8009b82 <memchr+0x1a>
 8009b7a:	7804      	ldrb	r4, [r0, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	428c      	cmp	r4, r1
 8009b80:	d1f6      	bne.n	8009b70 <memchr+0x8>
 8009b82:	bd10      	pop	{r4, pc}

08009b84 <__swhatbuf_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460c      	mov	r4, r1
 8009b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	461e      	mov	r6, r3
 8009b92:	b096      	sub	sp, #88	; 0x58
 8009b94:	da0c      	bge.n	8009bb0 <__swhatbuf_r+0x2c>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b9e:	bf0c      	ite	eq
 8009ba0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ba4:	2340      	movne	r3, #64	; 0x40
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	6031      	str	r1, [r6, #0]
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	b016      	add	sp, #88	; 0x58
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	466a      	mov	r2, sp
 8009bb2:	f000 f849 	bl	8009c48 <_fstat_r>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	dbed      	blt.n	8009b96 <__swhatbuf_r+0x12>
 8009bba:	9901      	ldr	r1, [sp, #4]
 8009bbc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009bc0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009bc4:	4259      	negs	r1, r3
 8009bc6:	4159      	adcs	r1, r3
 8009bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bcc:	e7eb      	b.n	8009ba6 <__swhatbuf_r+0x22>

08009bce <__smakebuf_r>:
 8009bce:	898b      	ldrh	r3, [r1, #12]
 8009bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bd2:	079d      	lsls	r5, r3, #30
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	d507      	bpl.n	8009bea <__smakebuf_r+0x1c>
 8009bda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	2301      	movs	r3, #1
 8009be4:	6163      	str	r3, [r4, #20]
 8009be6:	b002      	add	sp, #8
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	466a      	mov	r2, sp
 8009bec:	ab01      	add	r3, sp, #4
 8009bee:	f7ff ffc9 	bl	8009b84 <__swhatbuf_r>
 8009bf2:	9900      	ldr	r1, [sp, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7ff faa8 	bl	800914c <_malloc_r>
 8009bfc:	b948      	cbnz	r0, 8009c12 <__smakebuf_r+0x44>
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	059a      	lsls	r2, r3, #22
 8009c04:	d4ef      	bmi.n	8009be6 <__smakebuf_r+0x18>
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	f043 0302 	orr.w	r3, r3, #2
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	e7e3      	b.n	8009bda <__smakebuf_r+0xc>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	6020      	str	r0, [r4, #0]
 8009c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	9b00      	ldr	r3, [sp, #0]
 8009c1e:	6120      	str	r0, [r4, #16]
 8009c20:	6163      	str	r3, [r4, #20]
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	b15b      	cbz	r3, 8009c3e <__smakebuf_r+0x70>
 8009c26:	4630      	mov	r0, r6
 8009c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2c:	f000 f81e 	bl	8009c6c <_isatty_r>
 8009c30:	b128      	cbz	r0, 8009c3e <__smakebuf_r+0x70>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f023 0303 	bic.w	r3, r3, #3
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	431d      	orrs	r5, r3
 8009c42:	81a5      	strh	r5, [r4, #12]
 8009c44:	e7cf      	b.n	8009be6 <__smakebuf_r+0x18>
	...

08009c48 <_fstat_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4d06      	ldr	r5, [pc, #24]	; (8009c68 <_fstat_r+0x20>)
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f7f6 fcc6 	bl	80005e6 <_fstat>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d102      	bne.n	8009c64 <_fstat_r+0x1c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b103      	cbz	r3, 8009c64 <_fstat_r+0x1c>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	20001600 	.word	0x20001600

08009c6c <_isatty_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4d05      	ldr	r5, [pc, #20]	; (8009c88 <_isatty_r+0x1c>)
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f6 fcc4 	bl	8000604 <_isatty>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_isatty_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_isatty_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20001600 	.word	0x20001600

08009c8c <_init>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr

08009c98 <_fini>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr
