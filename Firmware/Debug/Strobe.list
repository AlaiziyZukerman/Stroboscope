
Strobe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af10  0800af10  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800af10  0800af10  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af10  0800af10  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800af18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  20000224  0800b13c  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001740  0800b13c  00021740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132e8  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aeb  00000000  00000000  00033578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  00038310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd6d  00000000  00000000  0003912f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fce  00000000  00000000  00055e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa9ff  00000000  00000000  0006de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059e4  00000000  00000000  0011886c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0011e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000224 	.word	0x20000224
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a8ec 	.word	0x0800a8ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000228 	.word	0x20000228
 8000148:	0800a8ec 	.word	0x0800a8ec

0800014c <setjmp>:
 800014c:	46ec      	mov	ip, sp
 800014e:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000152:	f04f 0000 	mov.w	r0, #0
 8000156:	4770      	bx	lr

08000158 <longjmp>:
 8000158:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800015c:	46e5      	mov	sp, ip
 800015e:	0008      	movs	r0, r1
 8000160:	bf08      	it	eq
 8000162:	2001      	moveq	r0, #1
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop

08000168 <strcmp>:
 8000168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800016c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000170:	2a01      	cmp	r2, #1
 8000172:	bf28      	it	cs
 8000174:	429a      	cmpcs	r2, r3
 8000176:	d0f7      	beq.n	8000168 <strcmp>
 8000178:	1ad0      	subs	r0, r2, r3
 800017a:	4770      	bx	lr

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0310 	add.w	r3, r7, #16
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a0:	4b1e      	ldr	r3, [pc, #120]	; (800021c <MX_GPIO_Init+0x90>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a1d      	ldr	r2, [pc, #116]	; (800021c <MX_GPIO_Init+0x90>)
 80001a6:	f043 0310 	orr.w	r3, r3, #16
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0310 	and.w	r3, r3, #16
 80001b4:	60fb      	str	r3, [r7, #12]
 80001b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b8:	4b18      	ldr	r3, [pc, #96]	; (800021c <MX_GPIO_Init+0x90>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <MX_GPIO_Init+0x90>)
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <MX_GPIO_Init+0x90>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0320 	and.w	r3, r3, #32
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <MX_GPIO_Init+0x90>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a11      	ldr	r2, [pc, #68]	; (800021c <MX_GPIO_Init+0x90>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6193      	str	r3, [r2, #24]
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <MX_GPIO_Init+0x90>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	f003 0304 	and.w	r3, r3, #4
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ee:	480c      	ldr	r0, [pc, #48]	; (8000220 <MX_GPIO_Init+0x94>)
 80001f0:	f000 fe9e 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2302      	movs	r3, #2
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <MX_GPIO_Init+0x94>)
 800020e:	f000 fd0b 	bl	8000c28 <HAL_GPIO_Init>

}
 8000212:	bf00      	nop
 8000214:	3720      	adds	r7, #32
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40011000 	.word	0x40011000

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fb8e 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */
#if !defined(UNITY_TEST_HOST)
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f824 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f7ff ffac 	bl	800018c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000234:	f000 fa8a 	bl	800074c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000238:	f008 faf4 	bl	8008824 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
#endif
#if defined(UNITY_TEST)
  initialise_monitor_handles();
 800023c:	f00a fab0 	bl	800a7a0 <initialise_monitor_handles>

    /* USER CODE BEGIN 3 */
  }
#else

  my_parameters.status = 1;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x4c>)
 8000242:	2201      	movs	r2, #1
 8000244:	601a      	str	r2, [r3, #0]
  my_parameters.power = 0;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	605a      	str	r2, [r3, #4]
  my_parameters.light = 0;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <main+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  my_parameters.brightness = 50;
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x4c>)
 8000254:	2232      	movs	r2, #50	; 0x32
 8000256:	60da      	str	r2, [r3, #12]
  my_parameters.frequency = 100;
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <main+0x4c>)
 800025a:	2264      	movs	r2, #100	; 0x64
 800025c:	611a      	str	r2, [r3, #16]
  my_parameters.period = 100;
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <main+0x4c>)
 8000260:	2264      	movs	r2, #100	; 0x64
 8000262:	615a      	str	r2, [r3, #20]

  UnityMain(0, NULL, RunAllTests);
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <main+0x50>)
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f006 f9fd 	bl	8006668 <UnityMain>
  while(1);
 800026e:	e7fe      	b.n	800026e <main+0x4a>
 8000270:	20000244 	.word	0x20000244
 8000274:	08006447 	.word	0x08006447

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b094      	sub	sp, #80	; 0x50
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f009 f8fd 	bl	8009486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fbb4 	bl	8002a3c <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002da:	f000 f987 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2101      	movs	r1, #1
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fe20 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000306:	f000 f971 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800030a:	2310      	movs	r3, #16
 800030c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800030e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000312:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f002 ff6e 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000322:	f000 f963 	bl	80005ec <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3750      	adds	r7, #80	; 0x50
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <fill_parameters>:

/* USER CODE BEGIN 4 */
status fill_parameters(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
	char sep []= ".";
 8000336:	232e      	movs	r3, #46	; 0x2e
 8000338:	81bb      	strh	r3, [r7, #12]
	char *mystr;
	mystr = strtok(buffer, sep);
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	4619      	mov	r1, r3
 8000340:	4840      	ldr	r0, [pc, #256]	; (8000444 <fill_parameters+0x114>)
 8000342:	f009 f8a9 	bl	8009498 <strtok>
 8000346:	61f8      	str	r0, [r7, #28]

	for (int i=0; i<=6; i++){
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
 800034c:	e06d      	b.n	800042a <fill_parameters+0xfa>
	   char *mystr_last = mystr;
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	613b      	str	r3, [r7, #16]
	   mystr = strtok (NULL,sep);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4619      	mov	r1, r3
 8000358:	2000      	movs	r0, #0
 800035a:	f009 f89d 	bl	8009498 <strtok>
 800035e:	61f8      	str	r0, [r7, #28]
	   if(mystr == NULL) break;
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d065      	beq.n	8000432 <fill_parameters+0x102>
	   int num = mystr - mystr_last;
 8000366:	69fa      	ldr	r2, [r7, #28]
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
	   (num < 1) ? (num = 1) : (num--);
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	2b00      	cmp	r3, #0
 8000372:	dc02      	bgt.n	800037a <fill_parameters+0x4a>
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e002      	b.n	8000380 <fill_parameters+0x50>
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3b01      	subs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
	   char numeric [7] = {0}; //4 default
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	2100      	movs	r1, #0
 800038a:	460a      	mov	r2, r1
 800038c:	801a      	strh	r2, [r3, #0]
 800038e:	460a      	mov	r2, r1
 8000390:	709a      	strb	r2, [r3, #2]
	   memcpy(&numeric, mystr_last, num);
 8000392:	697a      	ldr	r2, [r7, #20]
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	6939      	ldr	r1, [r7, #16]
 8000398:	4618      	mov	r0, r3
 800039a:	f009 f962 	bl	8009662 <memcpy>
	   switch (i){
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	2b05      	cmp	r3, #5
 80003a2:	d83f      	bhi.n	8000424 <fill_parameters+0xf4>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fill_parameters+0x7c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003c5 	.word	0x080003c5
 80003b0:	080003d5 	.word	0x080003d5
 80003b4:	080003e5 	.word	0x080003e5
 80003b8:	080003f5 	.word	0x080003f5
 80003bc:	08000405 	.word	0x08000405
 80003c0:	08000415 	.word	0x08000415
		   case 0:
			   my_parameters.status=atoi(numeric);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f008 fec4 	bl	8009154 <atoi>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <fill_parameters+0x118>)
 80003d0:	6013      	str	r3, [r2, #0]

			   break;
 80003d2:	e027      	b.n	8000424 <fill_parameters+0xf4>
		   case 1:
			   my_parameters.power=atoi(numeric);
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f008 febc 	bl	8009154 <atoi>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <fill_parameters+0x118>)
 80003e0:	6053      	str	r3, [r2, #4]

			   break;
 80003e2:	e01f      	b.n	8000424 <fill_parameters+0xf4>
		   case 2:
			   my_parameters.light=atoi(numeric);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4618      	mov	r0, r3
 80003e8:	f008 feb4 	bl	8009154 <atoi>
 80003ec:	4603      	mov	r3, r0
 80003ee:	4a16      	ldr	r2, [pc, #88]	; (8000448 <fill_parameters+0x118>)
 80003f0:	6093      	str	r3, [r2, #8]

			   break;
 80003f2:	e017      	b.n	8000424 <fill_parameters+0xf4>
		   case 3:
			   my_parameters.brightness=atoi(numeric);
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f008 feac 	bl	8009154 <atoi>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <fill_parameters+0x118>)
 8000400:	60d3      	str	r3, [r2, #12]

			   break;
 8000402:	e00f      	b.n	8000424 <fill_parameters+0xf4>
		   case 4:
			   my_parameters.frequency=atoi(numeric);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4618      	mov	r0, r3
 8000408:	f008 fea4 	bl	8009154 <atoi>
 800040c:	4603      	mov	r3, r0
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <fill_parameters+0x118>)
 8000410:	6113      	str	r3, [r2, #16]

			   break;
 8000412:	e007      	b.n	8000424 <fill_parameters+0xf4>
		   case 5:
			   my_parameters.period=atoi(numeric);
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f008 fe9c 	bl	8009154 <atoi>
 800041c:	4603      	mov	r3, r0
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <fill_parameters+0x118>)
 8000420:	6153      	str	r3, [r2, #20]

			   break;
 8000422:	bf00      	nop
	for (int i=0; i<=6; i++){
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	3301      	adds	r3, #1
 8000428:	61bb      	str	r3, [r7, #24]
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	2b06      	cmp	r3, #6
 800042e:	dd8e      	ble.n	800034e <fill_parameters+0x1e>
 8000430:	e000      	b.n	8000434 <fill_parameters+0x104>
	   if(mystr == NULL) break;
 8000432:	bf00      	nop
	   }
	}
	refresh_parameters = 1;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <fill_parameters+0x11c>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
	return NO_ERR;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000000 	.word	0x20000000
 8000448:	20000244 	.word	0x20000244
 800044c:	20000241 	.word	0x20000241

08000450 <set_parameters>:

status set_parameters (void){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

		set_power();
 8000454:	f000 f81c 	bl	8000490 <set_power>
		set_shutdown();
 8000458:	f000 f8a2 	bl	80005a0 <set_shutdown>
		if (my_parameters.light && my_parameters.status){
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <set_parameters+0x3c>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d005      	beq.n	8000470 <set_parameters+0x20>
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <set_parameters+0x3c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <set_parameters+0x20>
			set_light();
 800046c:	f000 f82c 	bl	80004c8 <set_light>
		}

		if ((0 == my_parameters.light) && my_parameters.status){
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <set_parameters+0x3c>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <set_parameters+0x34>
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <set_parameters+0x3c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <set_parameters+0x34>
			set_strob();
 8000480:	f000 f850 	bl	8000524 <set_strob>
		}

		return NO_ERR;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000244 	.word	0x20000244

08000490 <set_power>:

status set_power (void){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	if (my_parameters.power) {
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <set_power+0x30>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d007      	beq.n	80004ac <set_power+0x1c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <set_power+0x34>)
 80004a4:	f000 fd44 	bl	8000f30 <HAL_GPIO_WritePin>
		return ON;
 80004a8:	2305      	movs	r3, #5
 80004aa:	e006      	b.n	80004ba <set_power+0x2a>
	}
	else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <set_power+0x34>)
 80004b4:	f000 fd3c 	bl	8000f30 <HAL_GPIO_WritePin>
		return OFF;
 80004b8:	2306      	movs	r3, #6
	}
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000244 	.word	0x20000244
 80004c4:	40011000 	.word	0x40011000

080004c8 <set_light>:

status set_light (void){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0

	uint32_t brightness = (uint32_t)((331 + 1) * my_parameters.brightness) / 100;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <set_light+0x50>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <set_light+0x54>)
 80004de:	fba3 2302 	umull	r2, r3, r3, r2
 80004e2:	095b      	lsrs	r3, r3, #5
 80004e4:	607b      	str	r3, [r7, #4]
	TIM1->ARR = 331;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <set_light+0x58>)
 80004e8:	f240 124b 	movw	r2, #331	; 0x14b
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
	if (brightness > 100) return CONFLICT_Values;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b64      	cmp	r3, #100	; 0x64
 80004f2:	d901      	bls.n	80004f8 <set_light+0x30>
 80004f4:	2303      	movs	r3, #3
 80004f6:	e00a      	b.n	800050e <set_light+0x46>
	TIM1->CCR1 = brightness;
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <set_light+0x58>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6353      	str	r3, [r2, #52]	; 0x34
	if (TIM1->CCR1 != brightness) return ERR;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <set_light+0x58>)
 8000500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	d001      	beq.n	800050c <set_light+0x44>
 8000508:	2301      	movs	r3, #1
 800050a:	e000      	b.n	800050e <set_light+0x46>
	return ON;
 800050c:	2305      	movs	r3, #5
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	20000244 	.word	0x20000244
 800051c:	51eb851f 	.word	0x51eb851f
 8000520:	40012c00 	.word	0x40012c00

08000524 <set_strob>:

status set_strob (void){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

	uint32_t freq = (uint32_t) ((SystemCoreClock / (TIM1->PSC + 1)) / (my_parameters.frequency) - 1);
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <set_strob+0x6c>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <set_strob+0x70>)
 8000530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000532:	3301      	adds	r3, #1
 8000534:	fbb2 f3f3 	udiv	r3, r2, r3
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <set_strob+0x74>)
 800053a:	6912      	ldr	r2, [r2, #16]
 800053c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000540:	3b01      	subs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
	uint32_t period = ((uint32_t) ( (my_parameters.period)) / (10000 / freq));
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <set_strob+0x74>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4619      	mov	r1, r3
 800054a:	f242 7210 	movw	r2, #10000	; 0x2710
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	fbb2 f3f3 	udiv	r3, r2, r3
 8000554:	fbb1 f3f3 	udiv	r3, r1, r3
 8000558:	603b      	str	r3, [r7, #0]
	if ((TIM1->ARR != freq) || (TIM1->CCR1 != period )){
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <set_strob+0x70>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	d104      	bne.n	800056e <set_strob+0x4a>
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <set_strob+0x70>)
 8000566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	429a      	cmp	r2, r3
 800056c:	d00b      	beq.n	8000586 <set_strob+0x62>
		TIM1->ARR = freq;
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <set_strob+0x70>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM1->CCR1 = period;
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <set_strob+0x70>)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <set_strob+0x78>)
 800057e:	f002 ff41 	bl	8003404 <HAL_TIM_PWM_Start>
		return NO_ERR;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <set_strob+0x64>
	}

	return FAILURE;
 8000586:	2304      	movs	r3, #4

}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000040 	.word	0x20000040
 8000594:	40012c00 	.word	0x40012c00
 8000598:	20000244 	.word	0x20000244
 800059c:	20000260 	.word	0x20000260

080005a0 <set_shutdown>:

status set_shutdown(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	if (0 == my_parameters.status) {
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <set_shutdown+0x44>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d105      	bne.n	80005ba <set_shutdown+0x1a>
		status = HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <set_shutdown+0x48>)
 80005b2:	f002 ffc9 	bl	8003548 <HAL_TIM_PWM_Stop>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	}
	if(my_parameters.status) {
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <set_shutdown+0x44>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d005      	beq.n	80005ce <set_shutdown+0x2e>
		status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <set_shutdown+0x48>)
 80005c6:	f002 ff1d 	bl	8003404 <HAL_TIM_PWM_Start>
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_ERROR ==  status) return FAILURE;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d101      	bne.n	80005d8 <set_shutdown+0x38>
 80005d4:	2304      	movs	r3, #4
 80005d6:	e000      	b.n	80005da <set_shutdown+0x3a>
	return NO_ERR;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000244 	.word	0x20000244
 80005e8:	20000260 	.word	0x20000260

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000660:	e7fe      	b.n	8000660 <NMI_Handler+0x4>

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <MemManage_Handler+0x4>

0800066e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler+0x4>

0800067a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a2:	f000 f997 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80006b2:	f000 fd7a 	bl	80011aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20001038 	.word	0x20001038

080006c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006c6:	f000 fd70 	bl	80011aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20001038 	.word	0x20001038

080006d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <_sbrk+0x5c>)
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <_sbrk+0x60>)
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <_sbrk+0x64>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <_sbrk+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d207      	bcs.n	8000714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000704:	f008 ff80 	bl	8009608 <__errno>
 8000708:	4603      	mov	r3, r0
 800070a:	220c      	movs	r2, #12
 800070c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	e009      	b.n	8000728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <_sbrk+0x64>)
 8000724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20005000 	.word	0x20005000
 8000734:	00000400 	.word	0x00000400
 8000738:	2000025c 	.word	0x2000025c
 800073c:	20001740 	.word	0x20001740

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b092      	sub	sp, #72	; 0x48
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f008 fe85 	bl	8009486 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_TIM1_Init+0x104>)
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <MX_TIM1_Init+0x108>)
 8000780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 731;
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <MX_TIM1_Init+0x104>)
 8000784:	f240 22db 	movw	r2, #731	; 0x2db
 8000788:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_TIM1_Init+0x104>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_TIM1_Init+0x104>)
 8000792:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000796:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_TIM1_Init+0x104>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <MX_TIM1_Init+0x104>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_TIM1_Init+0x104>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007aa:	4829      	ldr	r0, [pc, #164]	; (8000850 <MX_TIM1_Init+0x104>)
 80007ac:	f002 fdda 	bl	8003364 <HAL_TIM_PWM_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f7ff ff19 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c6:	4619      	mov	r1, r3
 80007c8:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_TIM1_Init+0x104>)
 80007ca:	f003 f9f1 	bl	8003bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f7ff ff0a 	bl	80005ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80007dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_TIM1_Init+0x104>)
 8000800:	f002 ff06 	bl	8003610 <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800080a:	f7ff feef 	bl	80005ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM1_Init+0x104>)
 8000832:	f003 fa1b 	bl	8003c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800083c:	f7ff fed6 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM1_Init+0x104>)
 8000842:	f000 f827 	bl	8000894 <HAL_TIM_MspPostInit>

}
 8000846:	bf00      	nop
 8000848:	3748      	adds	r7, #72	; 0x48
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000260 	.word	0x20000260
 8000854:	40012c00 	.word	0x40012c00

08000858 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <HAL_TIM_PWM_MspInit+0x34>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10b      	bne.n	8000882 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_TIM_PWM_MspInit+0x38>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_TIM_PWM_MspInit+0x38>)
 8000870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_TIM_PWM_MspInit+0x38>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40012c00 	.word	0x40012c00
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_TIM_MspPostInit+0x5c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d118      	bne.n	80008e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_TIM_MspPostInit+0x60>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_TIM_MspPostInit+0x60>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_TIM_MspPostInit+0x60>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_TIM_MspPostInit+0x64>)
 80008e2:	f000 f9a1 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ff20 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f008 fe75 	bl	8009614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc7b 	bl	8000224 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8000938:	0800af18 	.word	0x0800af18
  ldr r2, =_sbss
 800093c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8000940:	20001740 	.word	0x20001740

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f923 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe48 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f93b 	bl	8000c0e <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f903 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000040 	.word	0x20000040
 80009cc:	20000048 	.word	0x20000048
 80009d0:	20000044 	.word	0x20000044

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000048 	.word	0x20000048
 80009f4:	200002a8 	.word	0x200002a8

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200002a8 	.word	0x200002a8

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <__NVIC_EnableIRQ+0x34>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff90 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff2d 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff42 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff90 	bl	8000afc <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5f 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff35 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e169      	b.n	8000f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 8158 	bne.w	8000f0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a9a      	ldr	r2, [pc, #616]	; (8000ec8 <HAL_GPIO_Init+0x2a0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d05e      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
 8000c64:	4a98      	ldr	r2, [pc, #608]	; (8000ec8 <HAL_GPIO_Init+0x2a0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d875      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000c6a:	4a98      	ldr	r2, [pc, #608]	; (8000ecc <HAL_GPIO_Init+0x2a4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d058      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
 8000c70:	4a96      	ldr	r2, [pc, #600]	; (8000ecc <HAL_GPIO_Init+0x2a4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d86f      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000c76:	4a96      	ldr	r2, [pc, #600]	; (8000ed0 <HAL_GPIO_Init+0x2a8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d052      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
 8000c7c:	4a94      	ldr	r2, [pc, #592]	; (8000ed0 <HAL_GPIO_Init+0x2a8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d869      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000c82:	4a94      	ldr	r2, [pc, #592]	; (8000ed4 <HAL_GPIO_Init+0x2ac>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d04c      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
 8000c88:	4a92      	ldr	r2, [pc, #584]	; (8000ed4 <HAL_GPIO_Init+0x2ac>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d863      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000c8e:	4a92      	ldr	r2, [pc, #584]	; (8000ed8 <HAL_GPIO_Init+0x2b0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d046      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
 8000c94:	4a90      	ldr	r2, [pc, #576]	; (8000ed8 <HAL_GPIO_Init+0x2b0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d85d      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d82a      	bhi.n	8000cf4 <HAL_GPIO_Init+0xcc>
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d859      	bhi.n	8000d56 <HAL_GPIO_Init+0x12e>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <HAL_GPIO_Init+0x80>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000cfd 	.word	0x08000cfd
 8000cb0:	08000d0f 	.word	0x08000d0f
 8000cb4:	08000d51 	.word	0x08000d51
 8000cb8:	08000d57 	.word	0x08000d57
 8000cbc:	08000d57 	.word	0x08000d57
 8000cc0:	08000d57 	.word	0x08000d57
 8000cc4:	08000d57 	.word	0x08000d57
 8000cc8:	08000d57 	.word	0x08000d57
 8000ccc:	08000d57 	.word	0x08000d57
 8000cd0:	08000d57 	.word	0x08000d57
 8000cd4:	08000d57 	.word	0x08000d57
 8000cd8:	08000d57 	.word	0x08000d57
 8000cdc:	08000d57 	.word	0x08000d57
 8000ce0:	08000d57 	.word	0x08000d57
 8000ce4:	08000d57 	.word	0x08000d57
 8000ce8:	08000d57 	.word	0x08000d57
 8000cec:	08000d05 	.word	0x08000d05
 8000cf0:	08000d19 	.word	0x08000d19
 8000cf4:	4a79      	ldr	r2, [pc, #484]	; (8000edc <HAL_GPIO_Init+0x2b4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d013      	beq.n	8000d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cfa:	e02c      	b.n	8000d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	623b      	str	r3, [r7, #32]
          break;
 8000d02:	e029      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e024      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	3308      	adds	r3, #8
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e01f      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	330c      	adds	r3, #12
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e01a      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e013      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d105      	bne.n	8000d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69fa      	ldr	r2, [r7, #28]
 8000d40:	611a      	str	r2, [r3, #16]
          break;
 8000d42:	e009      	b.n	8000d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d44:	2308      	movs	r3, #8
 8000d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	615a      	str	r2, [r3, #20]
          break;
 8000d4e:	e003      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x130>
          break;
 8000d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2bff      	cmp	r3, #255	; 0xff
 8000d5c:	d801      	bhi.n	8000d62 <HAL_GPIO_Init+0x13a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	e001      	b.n	8000d66 <HAL_GPIO_Init+0x13e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3304      	adds	r3, #4
 8000d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d802      	bhi.n	8000d74 <HAL_GPIO_Init+0x14c>
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x152>
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	3b08      	subs	r3, #8
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	210f      	movs	r1, #15
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	6a39      	ldr	r1, [r7, #32]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	431a      	orrs	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <HAL_GPIO_Init+0x2b8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc0:	4a48      	ldr	r2, [pc, #288]	; (8000ee4 <HAL_GPIO_Init+0x2bc>)
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a40      	ldr	r2, [pc, #256]	; (8000ee8 <HAL_GPIO_Init+0x2c0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d013      	beq.n	8000e14 <HAL_GPIO_Init+0x1ec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3f      	ldr	r2, [pc, #252]	; (8000eec <HAL_GPIO_Init+0x2c4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d00d      	beq.n	8000e10 <HAL_GPIO_Init+0x1e8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3e      	ldr	r2, [pc, #248]	; (8000ef0 <HAL_GPIO_Init+0x2c8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d007      	beq.n	8000e0c <HAL_GPIO_Init+0x1e4>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <HAL_GPIO_Init+0x2cc>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d101      	bne.n	8000e08 <HAL_GPIO_Init+0x1e0>
 8000e04:	2303      	movs	r3, #3
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x1ee>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e004      	b.n	8000e16 <HAL_GPIO_Init+0x1ee>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e002      	b.n	8000e16 <HAL_GPIO_Init+0x1ee>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <HAL_GPIO_Init+0x1ee>
 8000e14:	2300      	movs	r3, #0
 8000e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e18:	f002 0203 	and.w	r2, r2, #3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e26:	492f      	ldr	r1, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x2bc>)
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	492c      	ldr	r1, [pc, #176]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	608b      	str	r3, [r1, #8]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4928      	ldr	r1, [pc, #160]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	4922      	ldr	r1, [pc, #136]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60cb      	str	r3, [r1, #12]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	491e      	ldr	r1, [pc, #120]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4918      	ldr	r1, [pc, #96]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4914      	ldr	r1, [pc, #80]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d021      	beq.n	8000efc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]
 8000ec4:	e021      	b.n	8000f0a <HAL_GPIO_Init+0x2e2>
 8000ec6:	bf00      	nop
 8000ec8:	10320000 	.word	0x10320000
 8000ecc:	10310000 	.word	0x10310000
 8000ed0:	10220000 	.word	0x10220000
 8000ed4:	10210000 	.word	0x10210000
 8000ed8:	10120000 	.word	0x10120000
 8000edc:	10110000 	.word	0x10110000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40011400 	.word	0x40011400
 8000ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4909      	ldr	r1, [pc, #36]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f47f ae8e 	bne.w	8000c3c <HAL_GPIO_Init+0x14>
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af06      	add	r7, sp, #24
 8000f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0f1      	b.n	8001156 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f007 fe32 	bl	8008bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fede 	bl	8003d5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	687e      	ldr	r6, [r7, #4]
 8000fa6:	466d      	mov	r5, sp
 8000fa8:	f106 0410 	add.w	r4, r6, #16
 8000fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	602b      	str	r3, [r5, #0]
 8000fb4:	1d33      	adds	r3, r6, #4
 8000fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f002 fea8 	bl	8003d0e <USB_CoreInit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0c2      	b.n	8001156 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fed9 	bl	8003d8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e040      	b.n	8001064 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3303      	adds	r3, #3
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	3338      	adds	r3, #56	; 0x38
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	333c      	adds	r3, #60	; 0x3c
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	3340      	adds	r3, #64	; 0x40
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3301      	adds	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3b9      	bcc.n	8000fe2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e044      	b.n	80010fe <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3b5      	bcc.n	8001074 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	687e      	ldr	r6, [r7, #4]
 8001110:	466d      	mov	r5, sp
 8001112:	f106 0410 	add.w	r4, r6, #16
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	1d33      	adds	r3, r6, #4
 8001120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f002 fe3f 	bl	8003da6 <USB_DevInit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00d      	b.n	8001156 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f005 f8c1 	bl	80062d6 <USB_DevDisconnect>

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800115e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_PCD_Start+0x16>
 8001170:	2302      	movs	r3, #2
 8001172:	e016      	b.n	80011a2 <HAL_PCD_Start+0x44>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fdd4 	bl	8003d2e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001186:	2101      	movs	r1, #1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f007 ffac 	bl	80090e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f005 f895 	bl	80062c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b088      	sub	sp, #32
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 f897 	bl	80062ea <USB_ReadInterrupts>
 80011bc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fb1b 	bl	8001804 <PCD_EP_ISR_Handler>

    return;
 80011ce:	e119      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d013      	beq.n	8001202 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f007 fd7f 	bl	8008cf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011f8:	2100      	movs	r1, #0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f905 	bl	800140a <HAL_PCD_SetAddress>

    return;
 8001200:	e100      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001224:	e0ee      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001242:	b292      	uxth	r2, r2
 8001244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001248:	e0dc      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d027      	beq.n	80012a4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800125c:	b29a      	uxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0204 	bic.w	r2, r2, #4
 8001266:	b292      	uxth	r2, r2
 8001268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0208 	bic.w	r2, r2, #8
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f007 fd6f 	bl	8008d68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012a2:	e0af      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8083 	beq.w	80013b6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
 80012b4:	e010      	b.n	80012d8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	441a      	add	r2, r3
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	b292      	uxth	r2, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3320      	adds	r3, #32
 80012cc:	443b      	add	r3, r7
 80012ce:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	3301      	adds	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9eb      	bls.n	80012b6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	b292      	uxth	r2, r2
 80012f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	b292      	uxth	r2, r2
 800130a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800130e:	bf00      	nop
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001318:	b29b      	uxth	r3, r3
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f6      	beq.n	8001310 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001334:	b292      	uxth	r2, r2
 8001336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	77fb      	strb	r3, [r7, #31]
 800133e:	e00f      	b.n	8001360 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	4611      	mov	r1, r2
 8001348:	7ffa      	ldrb	r2, [r7, #31]
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	440a      	add	r2, r1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	3320      	adds	r3, #32
 8001352:	443b      	add	r3, r7
 8001354:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001358:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	3301      	adds	r3, #1
 800135e:	77fb      	strb	r3, [r7, #31]
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d9ec      	bls.n	8001340 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800136e:	b29a      	uxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0208 	orr.w	r2, r2, #8
 8001378:	b292      	uxth	r2, r2
 800137a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0204 	orr.w	r2, r2, #4
 80013a8:	b292      	uxth	r2, r2
 80013aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f007 fcc0 	bl	8008d34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013b4:	e026      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00f      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013d2:	b292      	uxth	r2, r2
 80013d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f007 fc7e 	bl	8008cda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013de:	e011      	b.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	b292      	uxth	r2, r2
 80013fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001402:	bf00      	nop
  }
}
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_PCD_SetAddress+0x1a>
 8001420:	2302      	movs	r3, #2
 8001422:	e013      	b.n	800144c <HAL_PCD_SetAddress+0x42>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	78fa      	ldrb	r2, [r7, #3]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f004 ff2d 	bl	800629c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	70fb      	strb	r3, [r7, #3]
 8001466:	460b      	mov	r3, r1
 8001468:	803b      	strh	r3, [r7, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	da0e      	bge.n	8001498 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	705a      	strb	r2, [r3, #1]
 8001496:	e00e      	b.n	80014b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0207 	and.w	r2, r3, #7
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014c2:	883a      	ldrh	r2, [r7, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	78ba      	ldrb	r2, [r7, #2]
 80014cc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014ce:	78bb      	ldrb	r3, [r7, #2]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_PCD_EP_Open+0x94>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e00e      	b.n	8001506 <HAL_PCD_EP_Open+0xb2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68f9      	ldr	r1, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fc76 	bl	8003de8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001504:	7afb      	ldrb	r3, [r7, #11]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da0e      	bge.n	8001540 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	e00e      	b.n	800155e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0207 	and.w	r2, r3, #7
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_PCD_EP_Close+0x6a>
 8001574:	2302      	movs	r3, #2
 8001576:	e00e      	b.n	8001596 <HAL_PCD_EP_Close+0x88>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68f9      	ldr	r1, [r7, #12]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 ffee 	bl	8004568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	460b      	mov	r3, r1
 80015ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	f003 0207 	and.w	r2, r3, #7
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2200      	movs	r2, #0
 80015dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f9a5 	bl	8004940 <USB_EPStartXfer>

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	f003 0207 	and.w	r2, r3, #7
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	460b      	mov	r3, r1
 800163c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2201      	movs	r2, #1
 8001678:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	b2da      	uxtb	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6979      	ldr	r1, [r7, #20]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f957 	bl	8004940 <USB_EPStartXfer>

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	f003 0207 	and.w	r2, r3, #7
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d901      	bls.n	80016ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e04c      	b.n	8001754 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da0e      	bge.n	80016e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	705a      	strb	r2, [r3, #1]
 80016de:	e00c      	b.n	80016fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_PCD_EP_SetStall+0x7e>
 8001716:	2302      	movs	r3, #2
 8001718:	e01c      	b.n	8001754 <HAL_PCD_EP_SetStall+0xb8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fcba 	bl	80060a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	2b00      	cmp	r3, #0
 8001736:	d108      	bne.n	800174a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f004 fddf 	bl	8006308 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 020f 	and.w	r2, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d901      	bls.n	800177a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e040      	b.n	80017fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800177a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da0e      	bge.n	80017a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	705a      	strb	r2, [r3, #1]
 800179e:	e00e      	b.n	80017be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 0207 	and.w	r2, r3, #7
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_PCD_EP_ClrStall+0x82>
 80017da:	2302      	movs	r3, #2
 80017dc:	e00e      	b.n	80017fc <HAL_PCD_EP_ClrStall+0xa0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fca8 	bl	8006142 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b096      	sub	sp, #88	; 0x58
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800180c:	e3bf      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001816:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800181a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001828:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 8179 	bne.w	8001b24 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d152      	bne.n	80018e4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800185a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800185e:	b29b      	uxth	r3, r3
 8001860:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3328      	adds	r3, #40	; 0x28
 8001866:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	3302      	adds	r3, #2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	441a      	add	r2, r3
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018a2:	2100      	movs	r1, #0
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f007 f9fe 	bl	8008ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 836b 	beq.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 8366 	bne.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018e2:	e354      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d034      	beq.n	800196c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	3306      	adds	r3, #6
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001940:	b29b      	uxth	r3, r3
 8001942:	f004 fd31 	bl	80063a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29a      	uxth	r2, r3
 800194e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001952:	4013      	ands	r3, r2
 8001954:	823b      	strh	r3, [r7, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	8a3a      	ldrh	r2, [r7, #16]
 800195c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001960:	b292      	uxth	r2, r2
 8001962:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f007 f971 	bl	8008c4c <HAL_PCD_SetupStageCallback>
 800196a:	e310      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800196c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001970:	2b00      	cmp	r3, #0
 8001972:	f280 830c 	bge.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b29a      	uxth	r2, r3
 800197e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001982:	4013      	ands	r3, r2
 8001984:	83fb      	strh	r3, [r7, #30]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	8bfa      	ldrh	r2, [r7, #30]
 800198c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001990:	b292      	uxth	r2, r2
 8001992:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	3306      	adds	r3, #6
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d019      	beq.n	80019fc <PCD_EP_ISR_Handler+0x1f8>
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	6959      	ldr	r1, [r3, #20]
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f004 fce1 	bl	80063a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	441a      	add	r2, r3
 80019f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019f4:	2100      	movs	r1, #0
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f007 f93a 	bl	8008c70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 82bd 	bne.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
 8001a14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a20:	f000 82b5 	beq.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4413      	add	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	801a      	strh	r2, [r3, #0]
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b3e      	cmp	r3, #62	; 0x3e
 8001a5a:	d91d      	bls.n	8001a98 <PCD_EP_ISR_Handler+0x294>
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <PCD_EP_ISR_Handler+0x272>
 8001a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a72:	3b01      	subs	r3, #1
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	e026      	b.n	8001ae6 <PCD_EP_ISR_Handler+0x2e2>
 8001a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10a      	bne.n	8001ab6 <PCD_EP_ISR_Handler+0x2b2>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	801a      	strh	r2, [r3, #0]
 8001ab4:	e017      	b.n	8001ae6 <PCD_EP_ISR_Handler+0x2e2>
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <PCD_EP_ISR_Handler+0x2cc>
 8001aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001acc:	3301      	adds	r3, #1
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af6:	827b      	strh	r3, [r7, #18]
 8001af8:	8a7b      	ldrh	r3, [r7, #18]
 8001afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001afe:	827b      	strh	r3, [r7, #18]
 8001b00:	8a7b      	ldrh	r3, [r7, #18]
 8001b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b06:	827b      	strh	r3, [r7, #18]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	8a7b      	ldrh	r3, [r7, #18]
 8001b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	8013      	strh	r3, [r2, #0]
 8001b22:	e234      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f280 80fc 	bge.w	8001d3a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b58:	4013      	ands	r3, r2
 8001b5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b74:	b292      	uxth	r2, r2
 8001b76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b78:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	7b1b      	ldrb	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d125      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3306      	adds	r3, #6
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bbe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8092 	beq.w	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	6959      	ldr	r1, [r3, #20]
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	88da      	ldrh	r2, [r3, #6]
 8001bd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bdc:	f004 fbe4 	bl	80063a8 <USB_ReadPMA>
 8001be0:	e086      	b.n	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	78db      	ldrb	r3, [r3, #3]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d10a      	bne.n	8001c00 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f9d9 	bl	8001faa <HAL_PCD_EP_DB_Receive>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001bfe:	e077      	b.n	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	441a      	add	r2, r3
 8001c2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d024      	beq.n	8001ca8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	3302      	adds	r3, #2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02e      	beq.n	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	6959      	ldr	r1, [r3, #20]
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	891a      	ldrh	r2, [r3, #8]
 8001c9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ca2:	f004 fb81 	bl	80063a8 <USB_ReadPMA>
 8001ca6:	e023      	b.n	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	6959      	ldr	r1, [r3, #20]
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	895a      	ldrh	r2, [r3, #10]
 8001ce8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cec:	f004 fb5c 	bl	80063a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cf8:	441a      	add	r2, r3
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d06:	441a      	add	r2, r3
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <PCD_EP_ISR_Handler+0x51c>
 8001d14:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d206      	bcs.n	8001d2e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f006 ffa2 	bl	8008c70 <HAL_PCD_DataOutStageCallback>
 8001d2c:	e005      	b.n	8001d3a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 fe03 	bl	8004940 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8123 	beq.w	8001f8e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	78db      	ldrb	r3, [r3, #3]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 80a2 	bne.w	8001ee6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	7b1b      	ldrb	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8093 	beq.w	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001db2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d046      	beq.n	8001e4c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d126      	bne.n	8001e14 <PCD_EP_ISR_Handler+0x610>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	4413      	add	r3, r2
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	011a      	lsls	r2, r3, #4
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	4413      	add	r3, r2
 8001de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dec:	623b      	str	r3, [r7, #32]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	e061      	b.n	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d15d      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	4413      	add	r3, r2
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	011a      	lsls	r2, r3, #4
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e045      	b.n	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d126      	bne.n	8001ea8 <PCD_EP_ISR_Handler+0x6a4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6e:	4413      	add	r3, r2
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	011a      	lsls	r2, r3, #4
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e017      	b.n	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d113      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0x6d4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ebe:	4413      	add	r3, r2
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	011a      	lsls	r2, r3, #4
 8001ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eca:	4413      	add	r3, r2
 8001ecc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f006 fee1 	bl	8008ca6 <HAL_PCD_DataInStageCallback>
 8001ee4:	e053      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ee6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d146      	bne.n	8001f80 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	3302      	adds	r3, #2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d907      	bls.n	8001f3a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f32:	1ad2      	subs	r2, r2, r3
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	619a      	str	r2, [r3, #24]
 8001f38:	e002      	b.n	8001f40 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f006 fea9 	bl	8008ca6 <HAL_PCD_DataInStageCallback>
 8001f54:	e01b      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f5e:	441a      	add	r2, r3
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f6c:	441a      	add	r2, r3
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fce1 	bl	8004940 <USB_EPStartXfer>
 8001f7e:	e006      	b.n	8001f8e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f84:	461a      	mov	r2, r3
 8001f86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f91b 	bl	80021c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f6ff ac37 	blt.w	800180e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3758      	adds	r7, #88	; 0x58
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07e      	beq.n	80020c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d306      	bcc.n	8002004 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	8b7b      	ldrh	r3, [r7, #26]
 8001ffc:	1ad2      	subs	r2, r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	e002      	b.n	800200a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d123      	bne.n	800205a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	833b      	strh	r3, [r7, #24]
 800202e:	8b3b      	ldrh	r3, [r7, #24]
 8002030:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002034:	833b      	strh	r3, [r7, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	441a      	add	r2, r3
 8002044:	8b3b      	ldrh	r3, [r7, #24]
 8002046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800204a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002056:	b29b      	uxth	r3, r3
 8002058:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01f      	beq.n	80020a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	82fb      	strh	r3, [r7, #22]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020a4:	8b7b      	ldrh	r3, [r7, #26]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6959      	ldr	r1, [r3, #20]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	891a      	ldrh	r2, [r3, #8]
 80020b8:	8b7b      	ldrh	r3, [r7, #26]
 80020ba:	f004 f975 	bl	80063a8 <USB_ReadPMA>
 80020be:	e07c      	b.n	80021ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	3306      	adds	r3, #6
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	8b7b      	ldrh	r3, [r7, #26]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d306      	bcc.n	8002102 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	8b7b      	ldrh	r3, [r7, #26]
 80020fa:	1ad2      	subs	r2, r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	e002      	b.n	8002108 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d123      	bne.n	8002158 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	83fb      	strh	r3, [r7, #30]
 800212c:	8bfb      	ldrh	r3, [r7, #30]
 800212e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002132:	83fb      	strh	r3, [r7, #30]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	441a      	add	r2, r3
 8002142:	8bfb      	ldrh	r3, [r7, #30]
 8002144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	b29b      	uxth	r3, r3
 8002156:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11f      	bne.n	80021a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	83bb      	strh	r3, [r7, #28]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	8bbb      	ldrh	r3, [r7, #28]
 800218e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800219e:	b29b      	uxth	r3, r3
 80021a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021a2:	8b7b      	ldrh	r3, [r7, #26]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6959      	ldr	r1, [r3, #20]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	895a      	ldrh	r2, [r3, #10]
 80021b4:	8b7b      	ldrh	r3, [r7, #26]
 80021b6:	f004 f8f7 	bl	80063a8 <USB_ReadPMA>
    }
  }

  return count;
 80021ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0a4      	sub	sp, #144	; 0x90
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 81dd 	beq.w	8002598 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	3302      	adds	r3, #2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002206:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002212:	429a      	cmp	r2, r3
 8002214:	d907      	bls.n	8002226 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	e002      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 80b9 	bne.w	80023a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d126      	bne.n	800228c <HAL_PCD_EP_DB_Transmit+0xc8>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	4413      	add	r3, r2
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	4413      	add	r3, r2
 8002260:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002270:	b29a      	uxth	r2, r3
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002284:	b29a      	uxth	r2, r3
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	e01a      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d116      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	4413      	add	r3, r2
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	011a      	lsls	r2, r3, #4
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	2200      	movs	r2, #0
 80022c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d126      	bne.n	800231e <HAL_PCD_EP_DB_Transmit+0x15a>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	011a      	lsls	r2, r3, #4
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002302:	b29a      	uxth	r2, r3
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002316:	b29a      	uxth	r2, r3
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	e017      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x18a>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d113      	bne.n	800234e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	4413      	add	r3, r2
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	011a      	lsls	r2, r3, #4
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	4413      	add	r3, r2
 8002342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4619      	mov	r1, r3
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f006 fca6 	bl	8008ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 82fc 	beq.w	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002380:	82fb      	strh	r3, [r7, #22]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	8afb      	ldrh	r3, [r7, #22]
 8002392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800239a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800239e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8013      	strh	r3, [r2, #0]
 80023a6:	e2da      	b.n	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d021      	beq.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	441a      	add	r2, r3
 80023de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	f040 82ae 	bne.w	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800240a:	441a      	add	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002418:	441a      	add	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	429a      	cmp	r2, r3
 8002428:	d30b      	bcc.n	8002442 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	621a      	str	r2, [r3, #32]
 8002440:	e017      	b.n	8002472 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800244a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800244e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800245a:	e00a      	b.n	8002472 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d165      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x382>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	4413      	add	r3, r2
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	011a      	lsls	r2, r3, #4
 8002498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249a:	4413      	add	r3, r2
 800249c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b6:	2b3e      	cmp	r3, #62	; 0x3e
 80024b8:	d91d      	bls.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_PCD_EP_DB_Transmit+0x310>
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	3b01      	subs	r3, #1
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	b29b      	uxth	r3, r3
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	e044      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0x350>
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250c:	b29a      	uxth	r2, r3
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	e035      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48
 800251c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252a:	3301      	adds	r3, #1
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29a      	uxth	r2, r3
 8002534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002536:	b29b      	uxth	r3, r3
 8002538:	029b      	lsls	r3, r3, #10
 800253a:	b29b      	uxth	r3, r3
 800253c:	4313      	orrs	r3, r2
 800253e:	b29a      	uxth	r2, r3
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01c      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d118      	bne.n	8002580 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	647b      	str	r3, [r7, #68]	; 0x44
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002562:	4413      	add	r3, r2
 8002564:	647b      	str	r3, [r7, #68]	; 0x44
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	011a      	lsls	r2, r3, #4
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	4413      	add	r3, r2
 8002570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002574:	643b      	str	r3, [r7, #64]	; 0x40
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257a:	b29a      	uxth	r2, r3
 800257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	891a      	ldrh	r2, [r3, #8]
 800258c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002590:	b29b      	uxth	r3, r3
 8002592:	f003 fec4 	bl	800631e <USB_WritePMA>
 8002596:	e1e2      	b.n	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3306      	adds	r3, #6
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d307      	bcc.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	619a      	str	r2, [r3, #24]
 80025de:	e002      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 80c0 	bne.w	8002770 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d126      	bne.n	8002646 <HAL_PCD_EP_DB_Transmit+0x482>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800260c:	4413      	add	r3, r2
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	011a      	lsls	r2, r3, #4
 8002616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002618:	4413      	add	r3, r2
 800261a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800261e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	b29a      	uxth	r2, r3
 800262c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263e:	b29a      	uxth	r2, r3
 8002640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	e01a      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d116      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	667b      	str	r3, [r7, #100]	; 0x64
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002662:	4413      	add	r3, r2
 8002664:	667b      	str	r3, [r7, #100]	; 0x64
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	011a      	lsls	r2, r3, #4
 800266c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266e:	4413      	add	r3, r2
 8002670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	677b      	str	r3, [r7, #116]	; 0x74
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d12b      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	4413      	add	r3, r2
 80026a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	e017      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x54e>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d113      	bne.n	8002712 <HAL_PCD_EP_DB_Transmit+0x54e>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f8:	4413      	add	r3, r2
 80026fa:	677b      	str	r3, [r7, #116]	; 0x74
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	011a      	lsls	r2, r3, #4
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	4413      	add	r3, r2
 8002706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800270a:	673b      	str	r3, [r7, #112]	; 0x70
 800270c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f006 fac4 	bl	8008ca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 811a 	bne.w	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002744:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800275a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800275e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276a:	b29b      	uxth	r3, r3
 800276c:	8013      	strh	r3, [r2, #0]
 800276e:	e0f6      	b.n	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002794:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 80ca 	bne.w	800295e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027d2:	441a      	add	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027e0:	441a      	add	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d30b      	bcc.n	800280a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002802:	1ad2      	subs	r2, r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	621a      	str	r2, [r3, #32]
 8002808:	e017      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002812:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002822:	e00a      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	657b      	str	r3, [r7, #84]	; 0x54
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d165      	bne.n	8002914 <HAL_PCD_EP_DB_Transmit+0x750>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	4413      	add	r3, r2
 800285e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	011a      	lsls	r2, r3, #4
 8002866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002868:	4413      	add	r3, r2
 800286a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800286e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	b29a      	uxth	r2, r3
 800287c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002884:	2b3e      	cmp	r3, #62	; 0x3e
 8002886:	d91d      	bls.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x6de>
 800289c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289e:	3b01      	subs	r3, #1
 80028a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e041      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x784>
 80028c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028da:	b29a      	uxth	r2, r3
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	e032      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x784>
 80028e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_PCD_EP_DB_Transmit+0x738>
 80028f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f8:	3301      	adds	r3, #1
 80028fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80028fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29a      	uxth	r2, r3
 8002902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002904:	b29b      	uxth	r3, r3
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	b29b      	uxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b29a      	uxth	r2, r3
 800290e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	e019      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x784>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d115      	bne.n	8002948 <HAL_PCD_EP_DB_Transmit+0x784>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	4413      	add	r3, r2
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	011a      	lsls	r2, r3, #4
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	4413      	add	r3, r2
 8002938:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800293c:	653b      	str	r3, [r7, #80]	; 0x50
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	b29a      	uxth	r2, r3
 8002944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002946:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6959      	ldr	r1, [r3, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	895a      	ldrh	r2, [r3, #10]
 8002954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002958:	b29b      	uxth	r3, r3
 800295a:	f003 fce0 	bl	800631e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	82bb      	strh	r3, [r7, #20]
 800297a:	8abb      	ldrh	r3, [r7, #20]
 800297c:	f083 0310 	eor.w	r3, r3, #16
 8002980:	82bb      	strh	r3, [r7, #20]
 8002982:	8abb      	ldrh	r3, [r7, #20]
 8002984:	f083 0320 	eor.w	r3, r3, #32
 8002988:	82bb      	strh	r3, [r7, #20]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	8abb      	ldrh	r3, [r7, #20]
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3790      	adds	r7, #144	; 0x90
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	817b      	strh	r3, [r7, #10]
 80029c6:	4613      	mov	r3, r2
 80029c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e009      	b.n	8002a02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ee:	897a      	ldrh	r2, [r7, #10]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	80da      	strh	r2, [r3, #6]
 8002a16:	e00b      	b.n	8002a30 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e272      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8087 	beq.w	8002b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5c:	4b92      	ldr	r3, [pc, #584]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d00c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a68:	4b8f      	ldr	r3, [pc, #572]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d112      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x12c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d168      	bne.n	8002b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e24c      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x76>
 8002aa4:	4b80      	ldr	r3, [pc, #512]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7f      	ldr	r2, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e02e      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x98>
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a77      	ldr	r2, [pc, #476]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0xbc>
 8002ade:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a71      	ldr	r2, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002af8:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd ff6e 	bl	80009f8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fd ff6a 	bl	80009f8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e200      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xe4>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd ff5a 	bl	80009f8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fd ff56 	bl	80009f8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1ec      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x10c>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b76:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x18c>
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x176>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1c0      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4939      	ldr	r1, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCC_OscConfig+0x270>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fd ff0f 	bl	80009f8 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fd ff0b 	bl	80009f8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1a1      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4927      	ldr	r1, [pc, #156]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x270>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fd feee 	bl	80009f8 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fd feea 	bl	80009f8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e180      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d03a      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d019      	beq.n	8002c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_RCC_OscConfig+0x274>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fd fece 	bl	80009f8 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fd feca 	bl	80009f8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e160      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f000 fa9c 	bl	80031bc <RCC_Delay>
 8002c84:	e01c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fd feb4 	bl	80009f8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fd feb0 	bl	80009f8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e146      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	42420000 	.word	0x42420000
 8002cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b92      	ldr	r3, [pc, #584]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e9      	bne.n	8002c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a6 	beq.w	8002e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4a87      	ldr	r2, [pc, #540]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	61d3      	str	r3, [r2, #28]
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7fd fe71 	bl	80009f8 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7fd fe6d 	bl	80009f8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e103      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x312>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	e02d      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x334>
 8002d56:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f023 0304 	bic.w	r3, r3, #4
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	e01c      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x356>
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a5a      	ldr	r2, [pc, #360]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fd fe21 	bl	80009f8 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fd fe1d 	bl	80009f8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0b1      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ee      	beq.n	8002dba <HAL_RCC_OscConfig+0x37e>
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fd fe0b 	bl	80009f8 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fd fe07 	bl	80009f8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e09b      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8087 	beq.w	8002f32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d061      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d146      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fd fddb 	bl	80009f8 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fd fdd7 	bl	80009f8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e06d      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d108      	bne.n	8002e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a19      	ldr	r1, [r3, #32]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	430b      	orrs	r3, r1
 8002e92:	491b      	ldr	r1, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fd fdab 	bl	80009f8 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fda7 	bl	80009f8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e03d      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46a>
 8002ec4:	e035      	b.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fd94 	bl	80009f8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fd fd90 	bl	80009f8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e026      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x498>
 8002ef2:	e01e      	b.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e019      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x500>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d0      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4965      	ldr	r1, [pc, #404]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d040      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e073      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4936      	ldr	r1, [pc, #216]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fd fce2 	bl	80009f8 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fd fcde 	bl	80009f8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e053      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d210      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f821 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1cc>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fc40 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	0800ac20 	.word	0x0800ac20
 800310c:	20000040 	.word	0x20000040
 8003110:	20000044 	.word	0x20000044

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x30>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x36>
 8003142:	e027      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003146:	613b      	str	r3, [r7, #16]
      break;
 8003148:	e027      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0c5b      	lsrs	r3, r3, #17
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800316e:	5cd3      	ldrb	r3, [r2, r3]
 8003170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	fb03 f202 	mul.w	r2, r3, r2
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e004      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	613b      	str	r3, [r7, #16]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	693b      	ldr	r3, [r7, #16]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	0800ac30 	.word	0x0800ac30
 80031b4:	0800ac40 	.word	0x0800ac40
 80031b8:	003d0900 	.word	0x003d0900

080031bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <RCC_Delay+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <RCC_Delay+0x38>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a5b      	lsrs	r3, r3, #9
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d8:	bf00      	nop
  }
  while (Delay --);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	60fa      	str	r2, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <RCC_Delay+0x1c>
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000040 	.word	0x20000040
 80031f4:	10624dd3 	.word	0x10624dd3

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d07d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	61d3      	str	r3, [r2, #28]
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003258:	f7fd fbce 	bl	80009f8 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fd fbca 	bl	80009f8 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e06d      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b3a      	ldr	r3, [pc, #232]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d027      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b2:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fb99 	bl	80009f8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fb95 	bl	80009f8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e036      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4917      	ldr	r1, [pc, #92]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	42420440 	.word	0x42420440

08003364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fa64 	bl	8000858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 f9f6 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_TIM_PWM_Start+0x24>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e022      	b.n	800346e <HAL_TIM_PWM_Start+0x6a>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b04      	cmp	r3, #4
 800342c:	d109      	bne.n	8003442 <HAL_TIM_PWM_Start+0x3e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	e015      	b.n	800346e <HAL_TIM_PWM_Start+0x6a>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d109      	bne.n	800345c <HAL_TIM_PWM_Start+0x58>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e008      	b.n	800346e <HAL_TIM_PWM_Start+0x6a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e05e      	b.n	8003534 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_TIM_PWM_Start+0x82>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	e013      	b.n	80034ae <HAL_TIM_PWM_Start+0xaa>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0x92>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003494:	e00b      	b.n	80034ae <HAL_TIM_PWM_Start+0xaa>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0xa2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a4:	e003      	b.n	80034ae <HAL_TIM_PWM_Start+0xaa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2201      	movs	r2, #1
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fb56 	bl	8003b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_TIM_PWM_Start+0x138>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d107      	bne.n	80034d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIM_PWM_Start+0x138>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_TIM_PWM_Start+0xfa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d009      	beq.n	80034fe <HAL_TIM_PWM_Start+0xfa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_TIM_PWM_Start+0x13c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_TIM_PWM_Start+0xfa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a12      	ldr	r2, [pc, #72]	; (8003544 <HAL_TIM_PWM_Start+0x140>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d111      	bne.n	8003522 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b06      	cmp	r3, #6
 800350e:	d010      	beq.n	8003532 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	e007      	b.n	8003532 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fb04 	bl	8003b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_TIM_PWM_Stop+0xc4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d117      	bne.n	800359a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	f241 1311 	movw	r3, #4369	; 0x1111
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_TIM_PWM_Stop+0x52>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	f240 4344 	movw	r3, #1092	; 0x444
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <HAL_TIM_PWM_Stop+0x52>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_TIM_PWM_Stop+0x82>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	f240 4344 	movw	r3, #1092	; 0x444
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_PWM_Stop+0x82>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Stop+0x92>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d8:	e013      	b.n	8003602 <HAL_TIM_PWM_Stop+0xba>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Stop+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	e00b      	b.n	8003602 <HAL_TIM_PWM_Stop+0xba>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Stop+0xb2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	e003      	b.n	8003602 <HAL_TIM_PWM_Stop+0xba>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40012c00 	.word	0x40012c00

08003610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0ae      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	f200 809f 	bhi.w	800377c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003679 	.word	0x08003679
 8003648:	0800377d 	.word	0x0800377d
 800364c:	0800377d 	.word	0x0800377d
 8003650:	0800377d 	.word	0x0800377d
 8003654:	080036b9 	.word	0x080036b9
 8003658:	0800377d 	.word	0x0800377d
 800365c:	0800377d 	.word	0x0800377d
 8003660:	0800377d 	.word	0x0800377d
 8003664:	080036fb 	.word	0x080036fb
 8003668:	0800377d 	.word	0x0800377d
 800366c:	0800377d 	.word	0x0800377d
 8003670:	0800377d 	.word	0x0800377d
 8003674:	0800373b 	.word	0x0800373b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8ea 	bl	8003858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6999      	ldr	r1, [r3, #24]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	619a      	str	r2, [r3, #24]
      break;
 80036b6:	e064      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f930 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
      break;
 80036f8:	e043      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f979 	bl	80039f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0208 	orr.w	r2, r2, #8
 8003714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0204 	bic.w	r2, r2, #4
 8003724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69d9      	ldr	r1, [r3, #28]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
      break;
 8003738:	e023      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f9c3 	bl	8003acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	61da      	str	r2, [r3, #28]
      break;
 800377a:	e002      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a29      	ldr	r2, [pc, #164]	; (800384c <TIM_Base_SetConfig+0xb8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_Base_SetConfig+0x30>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0x30>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a26      	ldr	r2, [pc, #152]	; (8003850 <TIM_Base_SetConfig+0xbc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x30>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a25      	ldr	r2, [pc, #148]	; (8003854 <TIM_Base_SetConfig+0xc0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <TIM_Base_SetConfig+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0x62>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0x62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a19      	ldr	r2, [pc, #100]	; (8003850 <TIM_Base_SetConfig+0xbc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0x62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <TIM_Base_SetConfig+0xc0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <TIM_Base_SetConfig+0xb8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d103      	bne.n	800383c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	615a      	str	r2, [r3, #20]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800

08003858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 0201 	bic.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40012c00 	.word	0x40012c00

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <TIM_OC2_SetConfig+0xd0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10d      	bne.n	80039a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <TIM_OC2_SetConfig+0xd0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00

080039f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <TIM_OC3_SetConfig+0xd0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <TIM_OC3_SetConfig+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d113      	bne.n	8003aa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40012c00 	.word	0x40012c00

08003acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <TIM_OC4_SetConfig+0x98>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d109      	bne.n	8003b40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40012c00 	.word	0x40012c00

08003b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e046      	b.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d009      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10c      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800

08003c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e03d      	b.n	8003d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d0e:	b084      	sub	sp, #16
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	f107 0014 	add.w	r0, r7, #20
 8003d1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	b004      	add	sp, #16
 8003d2c:	4770      	bx	lr

08003d2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d3e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d62:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003da6:	b084      	sub	sp, #16
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	f107 0014 	add.w	r0, r7, #20
 8003db4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	b004      	add	sp, #16
 8003de4:	4770      	bx	lr
	...

08003de8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b09d      	sub	sp, #116	; 0x74
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	78db      	ldrb	r3, [r3, #3]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d81f      	bhi.n	8003e5a <USB_ActivateEndpoint+0x72>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <USB_ActivateEndpoint+0x38>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e63 	.word	0x08003e63
 8003e2c:	08003e3f 	.word	0x08003e3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e3c:	e012      	b.n	8003e64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e4a:	e00b      	b.n	8003e64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e58:	e004      	b.n	8003e64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003e60:	e000      	b.n	8003e64 <USB_ActivateEndpoint+0x7c>
      break;
 8003e62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	7b1b      	ldrb	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 8178 	bne.w	80041c6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8084 	beq.w	8003fe8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	011a      	lsls	r2, r3, #4
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	88db      	ldrh	r3, [r3, #6]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	827b      	strh	r3, [r7, #18]
 8003f22:	8a7b      	ldrh	r3, [r7, #18]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <USB_ActivateEndpoint+0x17c>
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	823b      	strh	r3, [r7, #16]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	8a3b      	ldrh	r3, [r7, #16]
 8003f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	78db      	ldrb	r3, [r3, #3]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d020      	beq.n	8003fae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	81bb      	strh	r3, [r7, #12]
 8003f84:	89bb      	ldrh	r3, [r7, #12]
 8003f86:	f083 0320 	eor.w	r3, r3, #32
 8003f8a:	81bb      	strh	r3, [r7, #12]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	89bb      	ldrh	r3, [r7, #12]
 8003f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
 8003fac:	e2d5      	b.n	800455a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc4:	81fb      	strh	r3, [r7, #14]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
 8003fe6:	e2b8      	b.n	800455a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	4413      	add	r3, r2
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	011a      	lsls	r2, r3, #4
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	4413      	add	r3, r2
 8004006:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	88db      	ldrh	r3, [r3, #6]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	4413      	add	r3, r2
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	011a      	lsls	r2, r3, #4
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	4413      	add	r3, r2
 800403a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404a:	b29a      	uxth	r2, r3
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b3e      	cmp	r3, #62	; 0x3e
 8004056:	d91d      	bls.n	8004094 <USB_ActivateEndpoint+0x2ac>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <USB_ActivateEndpoint+0x28a>
 800406c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406e:	3b01      	subs	r3, #1
 8004070:	66bb      	str	r3, [r7, #104]	; 0x68
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800407a:	b29b      	uxth	r3, r3
 800407c:	029b      	lsls	r3, r3, #10
 800407e:	b29b      	uxth	r3, r3
 8004080:	4313      	orrs	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408c:	b29a      	uxth	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e026      	b.n	80040e2 <USB_ActivateEndpoint+0x2fa>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <USB_ActivateEndpoint+0x2ca>
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e017      	b.n	80040e2 <USB_ActivateEndpoint+0x2fa>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <USB_ActivateEndpoint+0x2e4>
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	3301      	adds	r3, #1
 80040ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80040f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01b      	beq.n	8004132 <USB_ActivateEndpoint+0x34a>
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004110:	843b      	strh	r3, [r7, #32]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	8c3b      	ldrh	r3, [r7, #32]
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d124      	bne.n	8004184 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	83bb      	strh	r3, [r7, #28]
 8004152:	8bbb      	ldrh	r3, [r7, #28]
 8004154:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004158:	83bb      	strh	r3, [r7, #28]
 800415a:	8bbb      	ldrh	r3, [r7, #28]
 800415c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004160:	83bb      	strh	r3, [r7, #28]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	8bbb      	ldrh	r3, [r7, #28]
 800416e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417e:	b29b      	uxth	r3, r3
 8004180:	8013      	strh	r3, [r2, #0]
 8004182:	e1ea      	b.n	800455a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	83fb      	strh	r3, [r7, #30]
 800419c:	8bfb      	ldrh	r3, [r7, #30]
 800419e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041a2:	83fb      	strh	r3, [r7, #30]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	8bfb      	ldrh	r3, [r7, #30]
 80041b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8013      	strh	r3, [r2, #0]
 80041c4:	e1c9      	b.n	800455a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	78db      	ldrb	r3, [r3, #3]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11e      	bne.n	800420c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
 800420a:	e01d      	b.n	8004248 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004258:	4413      	add	r3, r2
 800425a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	4413      	add	r3, r2
 8004266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426a:	65bb      	str	r3, [r7, #88]	; 0x58
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	891b      	ldrh	r3, [r3, #8]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	657b      	str	r3, [r7, #84]	; 0x54
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	4413      	add	r3, r2
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004298:	4413      	add	r3, r2
 800429a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	895b      	ldrh	r3, [r3, #10]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8093 	bne.w	80043e0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80042ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01b      	beq.n	800430e <USB_ActivateEndpoint+0x526>
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800431c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01b      	beq.n	800435e <USB_ActivateEndpoint+0x576>
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	873b      	strh	r3, [r7, #56]	; 0x38
 8004376:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004378:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800437c:	873b      	strh	r3, [r7, #56]	; 0x38
 800437e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004380:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004384:	873b      	strh	r3, [r7, #56]	; 0x38
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
 80043de:	e0bc      	b.n	800455a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80043f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01d      	beq.n	8004438 <USB_ActivateEndpoint+0x650>
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01d      	beq.n	8004490 <USB_ActivateEndpoint+0x6a8>
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800447c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	78db      	ldrb	r3, [r3, #3]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d024      	beq.n	80044e2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044b6:	f083 0320 	eor.w	r3, r3, #32
 80044ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
 80044e0:	e01d      	b.n	800451e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800455a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800455e:	4618      	mov	r0, r3
 8004560:	3774      	adds	r7, #116	; 0x74
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004568:	b480      	push	{r7}
 800456a:	b08d      	sub	sp, #52	; 0x34
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	7b1b      	ldrb	r3, [r3, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 808e 	bne.w	8004698 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d044      	beq.n	800460e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	81bb      	strh	r3, [r7, #12]
 8004592:	89bb      	ldrh	r3, [r7, #12]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <USB_DeactivateEndpoint+0x6c>
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	817b      	strh	r3, [r7, #10]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	813b      	strh	r3, [r7, #8]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	893b      	ldrh	r3, [r7, #8]
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
 800460c:	e192      	b.n	8004934 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	827b      	strh	r3, [r7, #18]
 800461c:	8a7b      	ldrh	r3, [r7, #18]
 800461e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01b      	beq.n	800465e <USB_DeactivateEndpoint+0xf6>
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	823b      	strh	r3, [r7, #16]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8a3b      	ldrh	r3, [r7, #16]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	81fb      	strh	r3, [r7, #14]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	89fb      	ldrh	r3, [r7, #14]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
 8004696:	e14d      	b.n	8004934 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 80a5 	bne.w	80047ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	843b      	strh	r3, [r7, #32]
 80046b0:	8c3b      	ldrh	r3, [r7, #32]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <USB_DeactivateEndpoint+0x18a>
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	83fb      	strh	r3, [r7, #30]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	8bfb      	ldrh	r3, [r7, #30]
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	83bb      	strh	r3, [r7, #28]
 8004700:	8bbb      	ldrh	r3, [r7, #28]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01b      	beq.n	8004742 <USB_DeactivateEndpoint+0x1da>
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	837b      	strh	r3, [r7, #26]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8b7b      	ldrh	r3, [r7, #26]
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	833b      	strh	r3, [r7, #24]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	8b3b      	ldrh	r3, [r7, #24]
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	82fb      	strh	r3, [r7, #22]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	441a      	add	r2, r3
 800479c:	8afb      	ldrh	r3, [r7, #22]
 800479e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c8:	82bb      	strh	r3, [r7, #20]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	441a      	add	r2, r3
 80047d4:	8abb      	ldrh	r3, [r7, #20]
 80047d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	8013      	strh	r3, [r2, #0]
 80047ea:	e0a3      	b.n	8004934 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <USB_DeactivateEndpoint+0x2d4>
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	b29b      	uxth	r3, r3
 800483a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	857b      	strh	r3, [r7, #42]	; 0x2a
 800484a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <USB_DeactivateEndpoint+0x324>
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	853b      	strh	r3, [r7, #40]	; 0x28
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004888:	b29b      	uxth	r3, r3
 800488a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	847b      	strh	r3, [r7, #34]	; 0x22
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3734      	adds	r7, #52	; 0x34
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0c2      	sub	sp, #264	; 0x108
 8004944:	af00      	add	r7, sp, #0
 8004946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800494a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800494e:	6018      	str	r0, [r3, #0]
 8004950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004958:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b01      	cmp	r3, #1
 8004968:	f040 86b7 	bne.w	80056da <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800496c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004998:	e007      	b.n	80049aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800499a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	7b1b      	ldrb	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d13a      	bne.n	8004a30 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6959      	ldr	r1, [r3, #20]
 80049c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	88da      	ldrh	r2, [r3, #6]
 80049d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80049dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	f001 fc9c 	bl	800631e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	011a      	lsls	r2, r3, #4
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	f000 be1f 	b.w	800566e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	78db      	ldrb	r3, [r3, #3]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f040 8462 	bne.w	8005306 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f240 83df 	bls.w	800521e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 81c7 	beq.w	8004e90 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d177      	bne.n	8004c0e <USB_EPStartXfer+0x2ce>
 8004b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	4413      	add	r3, r2
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	011a      	lsls	r2, r3, #4
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	4413      	add	r3, r2
 8004b54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b70:	d921      	bls.n	8004bb6 <USB_EPStartXfer+0x276>
 8004b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <USB_EPStartXfer+0x252>
 8004b88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	e050      	b.n	8004c58 <USB_EPStartXfer+0x318>
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <USB_EPStartXfer+0x294>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e041      	b.n	8004c58 <USB_EPStartXfer+0x318>
 8004bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <USB_EPStartXfer+0x2b4>
 8004bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4313      	orrs	r3, r2
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	e024      	b.n	8004c58 <USB_EPStartXfer+0x318>
 8004c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d11c      	bne.n	8004c58 <USB_EPStartXfer+0x318>
 8004c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	4413      	add	r3, r2
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 8004c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	011a      	lsls	r2, r3, #4
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	895b      	ldrh	r3, [r3, #10]
 8004c64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6959      	ldr	r1, [r3, #20]
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c86:	6800      	ldr	r0, [r0, #0]
 8004c88:	f001 fb49 	bl	800631e <USB_WritePMA>
            ep->xfer_buff += len;
 8004c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9c:	441a      	add	r2, r3
 8004c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d90f      	bls.n	8004ce6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	621a      	str	r2, [r3, #32]
 8004ce4:	e00e      	b.n	8004d04 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2200      	movs	r2, #0
 8004d02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d177      	bne.n	8004e04 <USB_EPStartXfer+0x4c4>
 8004d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	011a      	lsls	r2, r3, #4
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d64:	2b3e      	cmp	r3, #62	; 0x3e
 8004d66:	d921      	bls.n	8004dac <USB_EPStartXfer+0x46c>
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <USB_EPStartXfer+0x448>
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d82:	3b01      	subs	r3, #1
 8004d84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e056      	b.n	8004e5a <USB_EPStartXfer+0x51a>
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <USB_EPStartXfer+0x48a>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e047      	b.n	8004e5a <USB_EPStartXfer+0x51a>
 8004dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <USB_EPStartXfer+0x4aa>
 8004de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de4:	3301      	adds	r3, #1
 8004de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	029b      	lsls	r3, r3, #10
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e02a      	b.n	8004e5a <USB_EPStartXfer+0x51a>
 8004e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d122      	bne.n	8004e5a <USB_EPStartXfer+0x51a>
 8004e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	4413      	add	r3, r2
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	011a      	lsls	r2, r3, #4
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	891b      	ldrh	r3, [r3, #8]
 8004e66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6959      	ldr	r1, [r3, #20]
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e88:	6800      	ldr	r0, [r0, #0]
 8004e8a:	f001 fa48 	bl	800631e <USB_WritePMA>
 8004e8e:	e3ee      	b.n	800566e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d177      	bne.n	8004f90 <USB_EPStartXfer+0x650>
 8004ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec0:	4413      	add	r3, r2
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef2:	d921      	bls.n	8004f38 <USB_EPStartXfer+0x5f8>
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_EPStartXfer+0x5d4>
 8004f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4313      	orrs	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e056      	b.n	8004fe6 <USB_EPStartXfer+0x6a6>
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <USB_EPStartXfer+0x616>
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e047      	b.n	8004fe6 <USB_EPStartXfer+0x6a6>
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <USB_EPStartXfer+0x636>
 8004f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f70:	3301      	adds	r3, #1
 8004f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	e02a      	b.n	8004fe6 <USB_EPStartXfer+0x6a6>
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d122      	bne.n	8004fe6 <USB_EPStartXfer+0x6a6>
 8004fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc0:	4413      	add	r3, r2
 8004fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	891b      	ldrh	r3, [r3, #8]
 8004ff2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6959      	ldr	r1, [r3, #20]
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005006:	b29b      	uxth	r3, r3
 8005008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800500c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005010:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005014:	6800      	ldr	r0, [r0, #0]
 8005016:	f001 f982 	bl	800631e <USB_WritePMA>
            ep->xfer_buff += len;
 800501a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502a:	441a      	add	r2, r3
 800502c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d90f      	bls.n	8005074 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	621a      	str	r2, [r3, #32]
 8005072:	e00e      	b.n	8005092 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
 800509e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d177      	bne.n	800519e <USB_EPStartXfer+0x85e>
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	4413      	add	r3, r2
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	011a      	lsls	r2, r3, #4
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005100:	d921      	bls.n	8005146 <USB_EPStartXfer+0x806>
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <USB_EPStartXfer+0x7e2>
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	3b01      	subs	r3, #1
 800511e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29a      	uxth	r2, r3
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	b29b      	uxth	r3, r3
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	b29b      	uxth	r3, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513e:	b29a      	uxth	r2, r3
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	e050      	b.n	80051e8 <USB_EPStartXfer+0x8a8>
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <USB_EPStartXfer+0x824>
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e041      	b.n	80051e8 <USB_EPStartXfer+0x8a8>
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <USB_EPStartXfer+0x844>
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	3301      	adds	r3, #1
 8005180:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e024      	b.n	80051e8 <USB_EPStartXfer+0x8a8>
 800519e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d11c      	bne.n	80051e8 <USB_EPStartXfer+0x8a8>
 80051ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c2:	4413      	add	r3, r2
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	011a      	lsls	r2, r3, #4
 80051d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6959      	ldr	r1, [r3, #20]
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005208:	b29b      	uxth	r3, r3
 800520a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800520e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005212:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005216:	6800      	ldr	r0, [r0, #0]
 8005218:	f001 f881 	bl	800631e <USB_WritePMA>
 800521c:	e227      	b.n	800566e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800521e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800522e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005254:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800528a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052aa:	4413      	add	r3, r2
 80052ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	891b      	ldrh	r3, [r3, #8]
 80052dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6959      	ldr	r1, [r3, #20]
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052fe:	6800      	ldr	r0, [r0, #0]
 8005300:	f001 f80d 	bl	800631e <USB_WritePMA>
 8005304:	e1b3      	b.n	800566e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80c6 	beq.w	80054d8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	673b      	str	r3, [r7, #112]	; 0x70
 8005358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d177      	bne.n	8005458 <USB_EPStartXfer+0xb18>
 8005368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	66bb      	str	r3, [r7, #104]	; 0x68
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005388:	4413      	add	r3, r2
 800538a:	66bb      	str	r3, [r7, #104]	; 0x68
 800538c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800539c:	4413      	add	r3, r2
 800539e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a2:	667b      	str	r3, [r7, #100]	; 0x64
 80053a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ba:	d921      	bls.n	8005400 <USB_EPStartXfer+0xac0>
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <USB_EPStartXfer+0xa9c>
 80053d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053d6:	3b01      	subs	r3, #1
 80053d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e050      	b.n	80054a2 <USB_EPStartXfer+0xb62>
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <USB_EPStartXfer+0xade>
 8005408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005416:	b29a      	uxth	r2, r3
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e041      	b.n	80054a2 <USB_EPStartXfer+0xb62>
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <USB_EPStartXfer+0xafe>
 8005434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005438:	3301      	adds	r3, #1
 800543a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800543e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005448:	b29b      	uxth	r3, r3
 800544a:	029b      	lsls	r3, r3, #10
 800544c:	b29b      	uxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	b29a      	uxth	r2, r3
 8005452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	e024      	b.n	80054a2 <USB_EPStartXfer+0xb62>
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d11c      	bne.n	80054a2 <USB_EPStartXfer+0xb62>
 8005468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800547c:	4413      	add	r3, r2
 800547e:	673b      	str	r3, [r7, #112]	; 0x70
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005490:	4413      	add	r3, r2
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549c:	b29a      	uxth	r2, r3
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054d0:	6800      	ldr	r0, [r0, #0]
 80054d2:	f000 ff24 	bl	800631e <USB_WritePMA>
 80054d6:	e0ca      	b.n	800566e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d177      	bne.n	80055d8 <USB_EPStartXfer+0xc98>
 80054e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005508:	4413      	add	r3, r2
 800550a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800550c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	011a      	lsls	r2, r3, #4
 800551a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800551c:	4413      	add	r3, r2
 800551e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005522:	67bb      	str	r3, [r7, #120]	; 0x78
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552e:	b29a      	uxth	r2, r3
 8005530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	2b3e      	cmp	r3, #62	; 0x3e
 800553a:	d921      	bls.n	8005580 <USB_EPStartXfer+0xc40>
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <USB_EPStartXfer+0xc1c>
 8005552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005556:	3b01      	subs	r3, #1
 8005558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e05c      	b.n	800563a <USB_EPStartXfer+0xcfa>
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <USB_EPStartXfer+0xc5e>
 8005588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e04d      	b.n	800563a <USB_EPStartXfer+0xcfa>
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <USB_EPStartXfer+0xc7e>
 80055b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055b8:	3301      	adds	r3, #1
 80055ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e030      	b.n	800563a <USB_EPStartXfer+0xcfa>
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d128      	bne.n	800563a <USB_EPStartXfer+0xcfa>
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800560c:	4413      	add	r3, r2
 800560e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	011a      	lsls	r2, r3, #4
 8005620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005624:	4413      	add	r3, r2
 8005626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005638:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	891b      	ldrh	r3, [r3, #8]
 8005646:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6959      	ldr	r1, [r3, #20]
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	b29b      	uxth	r3, r3
 800565c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005660:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005664:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	f000 fe58 	bl	800631e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	817b      	strh	r3, [r7, #10]
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	f083 0310 	eor.w	r3, r3, #16
 800569c:	817b      	strh	r3, [r7, #10]
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	f083 0320 	eor.w	r3, r3, #32
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	441a      	add	r2, r3
 80056c0:	897b      	ldrh	r3, [r7, #10]
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]
 80056d6:	f000 bcde 	b.w	8006096 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	7b1b      	ldrb	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 80bb 	bne.w	8005862 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d917      	bls.n	8005738 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005728:	1ad2      	subs	r2, r2, r3
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	619a      	str	r2, [r3, #24]
 8005736:	e00e      	b.n	8005756 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800577a:	4413      	add	r3, r2
 800577c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005792:	4413      	add	r3, r2
 8005794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800579c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b4:	2b3e      	cmp	r3, #62	; 0x3e
 80057b6:	d924      	bls.n	8005802 <USB_EPStartXfer+0xec2>
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <USB_EPStartXfer+0xe98>
 80057ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057d2:	3b01      	subs	r3, #1
 80057d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	029b      	lsls	r3, r3, #10
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	f000 bc10 	b.w	8006022 <USB_EPStartXfer+0x16e2>
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10c      	bne.n	8005824 <USB_EPStartXfer+0xee4>
 800580a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581a:	b29a      	uxth	r2, r3
 800581c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	e3fe      	b.n	8006022 <USB_EPStartXfer+0x16e2>
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <USB_EPStartXfer+0xf04>
 800583a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800583e:	3301      	adds	r3, #1
 8005840:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005850:	b29b      	uxth	r3, r3
 8005852:	029b      	lsls	r3, r3, #10
 8005854:	b29b      	uxth	r3, r3
 8005856:	4313      	orrs	r3, r2
 8005858:	b29a      	uxth	r2, r3
 800585a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e3df      	b.n	8006022 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b02      	cmp	r3, #2
 8005870:	f040 8218 	bne.w	8005ca4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 809d 	bne.w	80059c0 <USB_EPStartXfer+0x1080>
 8005886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058aa:	4413      	add	r3, r2
 80058ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	011a      	lsls	r2, r3, #4
 80058be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d92b      	bls.n	8005948 <USB_EPStartXfer+0x1008>
 80058f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <USB_EPStartXfer+0xfe0>
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	3b01      	subs	r3, #1
 800591c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e070      	b.n	8005a2a <USB_EPStartXfer+0x10ea>
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10c      	bne.n	8005972 <USB_EPStartXfer+0x1032>
 8005958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e05b      	b.n	8005a2a <USB_EPStartXfer+0x10ea>
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <USB_EPStartXfer+0x1062>
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e034      	b.n	8005a2a <USB_EPStartXfer+0x10ea>
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d12c      	bne.n	8005a2a <USB_EPStartXfer+0x10ea>
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059f4:	4413      	add	r3, r2
 80059f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	011a      	lsls	r2, r3, #4
 8005a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 809d 	bne.w	8005b84 <USB_EPStartXfer+0x1244>
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a6e:	4413      	add	r3, r2
 8005a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	011a      	lsls	r2, r3, #4
 8005a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab2:	d92b      	bls.n	8005b0c <USB_EPStartXfer+0x11cc>
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <USB_EPStartXfer+0x11a4>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	e069      	b.n	8005be0 <USB_EPStartXfer+0x12a0>
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10c      	bne.n	8005b36 <USB_EPStartXfer+0x11f6>
 8005b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e054      	b.n	8005be0 <USB_EPStartXfer+0x12a0>
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <USB_EPStartXfer+0x1226>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	3301      	adds	r3, #1
 8005b62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	e02d      	b.n	8005be0 <USB_EPStartXfer+0x12a0>
 8005b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d125      	bne.n	8005be0 <USB_EPStartXfer+0x12a0>
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005baa:	4413      	add	r3, r2
 8005bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bde:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8218 	beq.w	8006022 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <USB_EPStartXfer+0x12ea>
 8005c1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 81f5 	bne.w	8006022 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 81ee 	bne.w	8006022 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8013      	strh	r3, [r2, #0]
 8005ca2:	e1be      	b.n	8006022 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 81b4 	bne.w	800601e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d917      	bls.n	8005d02 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	619a      	str	r2, [r3, #24]
 8005d00:	e00e      	b.n	8005d20 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 8085 	bne.w	8005e3c <USB_EPStartXfer+0x14fc>
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d56:	4413      	add	r3, r2
 8005d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	011a      	lsls	r2, r3, #4
 8005d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d90:	2b3e      	cmp	r3, #62	; 0x3e
 8005d92:	d923      	bls.n	8005ddc <USB_EPStartXfer+0x149c>
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <USB_EPStartXfer+0x1474>
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e060      	b.n	8005e9e <USB_EPStartXfer+0x155e>
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10c      	bne.n	8005dfe <USB_EPStartXfer+0x14be>
 8005de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e04f      	b.n	8005e9e <USB_EPStartXfer+0x155e>
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <USB_EPStartXfer+0x14de>
 8005e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e030      	b.n	8005e9e <USB_EPStartXfer+0x155e>
 8005e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d128      	bne.n	8005e9e <USB_EPStartXfer+0x155e>
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e70:	4413      	add	r3, r2
 8005e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	011a      	lsls	r2, r3, #4
 8005e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8085 	bne.w	8005fc8 <USB_EPStartXfer+0x1688>
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	011a      	lsls	r2, r3, #4
 8005ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005efa:	4413      	add	r3, r2
 8005efc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f1e:	d923      	bls.n	8005f68 <USB_EPStartXfer+0x1628>
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <USB_EPStartXfer+0x1600>
 8005f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	029b      	lsls	r3, r3, #10
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e05c      	b.n	8006022 <USB_EPStartXfer+0x16e2>
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10c      	bne.n	8005f8a <USB_EPStartXfer+0x164a>
 8005f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e04b      	b.n	8006022 <USB_EPStartXfer+0x16e2>
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <USB_EPStartXfer+0x166a>
 8005fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	e02c      	b.n	8006022 <USB_EPStartXfer+0x16e2>
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d124      	bne.n	8006022 <USB_EPStartXfer+0x16e2>
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fee:	4413      	add	r3, r2
 8005ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006006:	4413      	add	r3, r2
 8006008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800600c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	e001      	b.n	8006022 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e03a      	b.n	8006098 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800604c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006054:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006058:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800605c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006060:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ca:	81bb      	strh	r3, [r7, #12]
 80060cc:	89bb      	ldrh	r3, [r7, #12]
 80060ce:	f083 0310 	eor.w	r3, r3, #16
 80060d2:	81bb      	strh	r3, [r7, #12]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	89bb      	ldrh	r3, [r7, #12]
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
 80060f4:	e01f      	b.n	8006136 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	81fb      	strh	r3, [r7, #14]
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006114:	81fb      	strh	r3, [r7, #14]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	89fb      	ldrh	r3, [r7, #14]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	7b1b      	ldrb	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 809d 	bne.w	8006290 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d04c      	beq.n	80061f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	823b      	strh	r3, [r7, #16]
 800616c:	8a3b      	ldrh	r3, [r7, #16]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01b      	beq.n	80061ae <USB_EPClearStall+0x6c>
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	81fb      	strh	r3, [r7, #14]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	78db      	ldrb	r3, [r3, #3]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d06c      	beq.n	8006290 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061cc:	81bb      	strh	r3, [r7, #12]
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	f083 0320 	eor.w	r3, r3, #32
 80061d4:	81bb      	strh	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	89bb      	ldrh	r3, [r7, #12]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
 80061f6:	e04b      	b.n	8006290 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	82fb      	strh	r3, [r7, #22]
 8006206:	8afb      	ldrh	r3, [r7, #22]
 8006208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <USB_EPClearStall+0x106>
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	82bb      	strh	r3, [r7, #20]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	8abb      	ldrh	r3, [r7, #20]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	827b      	strh	r3, [r7, #18]
 8006260:	8a7b      	ldrh	r3, [r7, #18]
 8006262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006266:	827b      	strh	r3, [r7, #18]
 8006268:	8a7b      	ldrh	r3, [r7, #18]
 800626a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800626e:	827b      	strh	r3, [r7, #18]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8a7b      	ldrh	r3, [r7, #18]
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2280      	movs	r2, #128	; 0x80
 80062b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr

080062d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800631e:	b480      	push	{r7}
 8006320:	b08b      	sub	sp, #44	; 0x2c
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	4611      	mov	r1, r2
 800632a:	461a      	mov	r2, r3
 800632c:	460b      	mov	r3, r1
 800632e:	80fb      	strh	r3, [r7, #6]
 8006330:	4613      	mov	r3, r2
 8006332:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006334:	88bb      	ldrh	r3, [r7, #4]
 8006336:	3301      	adds	r3, #1
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	005a      	lsls	r2, r3, #1
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006350:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
 8006356:	e01e      	b.n	8006396 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3301      	adds	r3, #1
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	b21a      	sxth	r2, r3
 8006368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800636c:	4313      	orrs	r3, r2
 800636e:	b21b      	sxth	r3, r3
 8006370:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	8a7a      	ldrh	r2, [r7, #18]
 8006376:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	3302      	adds	r3, #2
 800637c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	3302      	adds	r3, #2
 8006382:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	3b01      	subs	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1dd      	bne.n	8006358 <USB_WritePMA+0x3a>
  }
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	372c      	adds	r7, #44	; 0x2c
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b08b      	sub	sp, #44	; 0x2c
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4611      	mov	r1, r2
 80063b4:	461a      	mov	r2, r3
 80063b6:	460b      	mov	r3, r1
 80063b8:	80fb      	strh	r3, [r7, #6]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	005a      	lsls	r2, r3, #1
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
 80063e0:	e01b      	b.n	800641a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	3302      	adds	r3, #2
 80063ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	b2da      	uxtb	r2, r3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	3302      	adds	r3, #2
 8006412:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	3b01      	subs	r3, #1
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e0      	bne.n	80063e2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	701a      	strb	r2, [r3, #0]
  }
}
 800643c:	bf00      	nop
 800643e:	372c      	adds	r7, #44	; 0x2c
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <RunAllTests>:
#include "unity_fixture.h"

//------------------------------------------------------------------------------
void RunAllTests(void)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	af00      	add	r7, sp, #0
    RUN_TEST_GROUP(driver);
 800644a:	f000 f802 	bl	8006452 <TEST_driver_GROUP_RUNNER>
}
 800644e:	bf00      	nop
 8006450:	bd80      	pop	{r7, pc}

08006452 <TEST_driver_GROUP_RUNNER>:

//------------------------------------------------------------------------------

TEST_GROUP_RUNNER(driver){
 8006452:	b580      	push	{r7, lr}
 8006454:	af00      	add	r7, sp, #0
	RUN_TEST_CASE(driver, Positive);
 8006456:	f000 f811 	bl	800647c <TEST_driver_Positive_run>
	RUN_TEST_CASE(driver, Negative);
 800645a:	f000 f873 	bl	8006544 <TEST_driver_Negative_run>
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}

08006462 <TEST_driver_SETUP>:
//------------------------------------------------------------------------------
TEST_GROUP(driver);

//------------------------------------------------------------------------------
TEST_SETUP(driver)
{
 8006462:	b480      	push	{r7}
 8006464:	af00      	add	r7, sp, #0
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <TEST_driver_TEAR_DOWN>:

//------------------------------------------------------------------------------
TEST_TEAR_DOWN(driver)
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
	...

0800647c <TEST_driver_Positive_run>:

//------------------------------------------------------------------------------
TEST(driver, Positive)
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af04      	add	r7, sp, #16
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <TEST_driver_Positive_run+0x28>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2212      	movs	r2, #18
 8006488:	9203      	str	r2, [sp, #12]
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <TEST_driver_Positive_run+0x2c>)
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <TEST_driver_Positive_run+0x30>)
 8006490:	9201      	str	r2, [sp, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <TEST_driver_Positive_run+0x34>)
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <TEST_driver_Positive_run+0x38>)
 8006498:	4907      	ldr	r1, [pc, #28]	; (80064b8 <TEST_driver_Positive_run+0x3c>)
 800649a:	4808      	ldr	r0, [pc, #32]	; (80064bc <TEST_driver_Positive_run+0x40>)
 800649c:	f000 f958 	bl	8006750 <UnityTestRunner>
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	2000004c 	.word	0x2000004c
 80064a8:	0800a924 	.word	0x0800a924
 80064ac:	0800a93c 	.word	0x0800a93c
 80064b0:	0800a90c 	.word	0x0800a90c
 80064b4:	0800646f 	.word	0x0800646f
 80064b8:	080064c1 	.word	0x080064c1
 80064bc:	08006463 	.word	0x08006463

080064c0 <TEST_driver_Positive_>:
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af02      	add	r7, sp, #8
    TEST_ASSERT_EQUAL_INT(0, set_strob());
 80064c6:	f7fa f82d 	bl	8000524 <set_strob>
 80064ca:	4601      	mov	r1, r0
 80064cc:	2314      	movs	r3, #20
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2314      	movs	r3, #20
 80064d2:	2200      	movs	r2, #0
 80064d4:	2000      	movs	r0, #0
 80064d6:	f000 fd0d 	bl	8006ef4 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(5, set_light());
 80064da:	f7f9 fff5 	bl	80004c8 <set_light>
 80064de:	4601      	mov	r1, r0
 80064e0:	2314      	movs	r3, #20
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2315      	movs	r3, #21
 80064e6:	2200      	movs	r2, #0
 80064e8:	2005      	movs	r0, #5
 80064ea:	f000 fd03 	bl	8006ef4 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(6, set_power());
 80064ee:	f7f9 ffcf 	bl	8000490 <set_power>
 80064f2:	4601      	mov	r1, r0
 80064f4:	2314      	movs	r3, #20
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2316      	movs	r3, #22
 80064fa:	2200      	movs	r2, #0
 80064fc:	2006      	movs	r0, #6
 80064fe:	f000 fcf9 	bl	8006ef4 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(0, set_parameters());
 8006502:	f7f9 ffa5 	bl	8000450 <set_parameters>
 8006506:	4601      	mov	r1, r0
 8006508:	2314      	movs	r3, #20
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2317      	movs	r3, #23
 800650e:	2200      	movs	r2, #0
 8006510:	2000      	movs	r0, #0
 8006512:	f000 fcef 	bl	8006ef4 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(0, fill_parameters());
 8006516:	f7f9 ff0b 	bl	8000330 <fill_parameters>
 800651a:	4601      	mov	r1, r0
 800651c:	2314      	movs	r3, #20
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2318      	movs	r3, #24
 8006522:	2200      	movs	r2, #0
 8006524:	2000      	movs	r0, #0
 8006526:	f000 fce5 	bl	8006ef4 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_INT(0, set_shutdown());
 800652a:	f7fa f839 	bl	80005a0 <set_shutdown>
 800652e:	4601      	mov	r1, r0
 8006530:	2314      	movs	r3, #20
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2319      	movs	r3, #25
 8006536:	2200      	movs	r2, #0
 8006538:	2000      	movs	r0, #0
 800653a:	f000 fcdb 	bl	8006ef4 <UnityAssertEqualNumber>
}
 800653e:	bf00      	nop
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <TEST_driver_Negative_run>:

//------------------------------------------------------------------------------
TEST(driver, Negative)
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af04      	add	r7, sp, #16
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <TEST_driver_Negative_run+0x28>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	221d      	movs	r2, #29
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <TEST_driver_Negative_run+0x2c>)
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <TEST_driver_Negative_run+0x30>)
 8006558:	9201      	str	r2, [sp, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <TEST_driver_Negative_run+0x34>)
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <TEST_driver_Negative_run+0x38>)
 8006560:	4907      	ldr	r1, [pc, #28]	; (8006580 <TEST_driver_Negative_run+0x3c>)
 8006562:	4808      	ldr	r0, [pc, #32]	; (8006584 <TEST_driver_Negative_run+0x40>)
 8006564:	f000 f8f4 	bl	8006750 <UnityTestRunner>
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	2000004c 	.word	0x2000004c
 8006570:	0800a924 	.word	0x0800a924
 8006574:	0800a960 	.word	0x0800a960
 8006578:	0800a948 	.word	0x0800a948
 800657c:	0800646f 	.word	0x0800646f
 8006580:	08006589 	.word	0x08006589
 8006584:	08006463 	.word	0x08006463

08006588 <TEST_driver_Negative_>:
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af02      	add	r7, sp, #8
	TEST_ASSERT_NOT_EQUAL_INT(1, set_shutdown());
 800658e:	f7fa f807 	bl	80005a0 <set_shutdown>
 8006592:	4601      	mov	r1, r0
 8006594:	2314      	movs	r3, #20
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	231f      	movs	r3, #31
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	2200      	movs	r2, #0
 80065a0:	2001      	movs	r0, #1
 80065a2:	f000 fce7 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
    TEST_ASSERT_NOT_EQUAL_INT(3, set_strob());
 80065a6:	f7f9 ffbd 	bl	8000524 <set_strob>
 80065aa:	4601      	mov	r1, r0
 80065ac:	2314      	movs	r3, #20
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	2320      	movs	r3, #32
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2003      	movs	r0, #3
 80065ba:	f000 fcdb 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
	TEST_ASSERT_NOT_EQUAL_INT(4, set_light());
 80065be:	f7f9 ff83 	bl	80004c8 <set_light>
 80065c2:	4601      	mov	r1, r0
 80065c4:	2314      	movs	r3, #20
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	2321      	movs	r3, #33	; 0x21
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	2300      	movs	r3, #0
 80065ce:	2200      	movs	r2, #0
 80065d0:	2004      	movs	r0, #4
 80065d2:	f000 fccf 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
	TEST_ASSERT_NOT_EQUAL_INT(5, set_power());
 80065d6:	f7f9 ff5b 	bl	8000490 <set_power>
 80065da:	4601      	mov	r1, r0
 80065dc:	2314      	movs	r3, #20
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2322      	movs	r3, #34	; 0x22
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2200      	movs	r2, #0
 80065e8:	2005      	movs	r0, #5
 80065ea:	f000 fcc3 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
	TEST_ASSERT_NOT_EQUAL_INT(3, set_parameters());
 80065ee:	f7f9 ff2f 	bl	8000450 <set_parameters>
 80065f2:	4601      	mov	r1, r0
 80065f4:	2314      	movs	r3, #20
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	2323      	movs	r3, #35	; 0x23
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	2200      	movs	r2, #0
 8006600:	2003      	movs	r0, #3
 8006602:	f000 fcb7 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
	TEST_ASSERT_NOT_EQUAL_INT(2, fill_parameters());
 8006606:	f7f9 fe93 	bl	8000330 <fill_parameters>
 800660a:	4601      	mov	r1, r0
 800660c:	2314      	movs	r3, #20
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	2324      	movs	r3, #36	; 0x24
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	2002      	movs	r0, #2
 800661a:	f000 fcab 	bl	8006f74 <UnityAssertGreaterOrLessOrEqualNumber>
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <announceTestRun>:

void setUp(void)    { /*does nothing*/ }
void tearDown(void) { /*does nothing*/ }

static void announceTestRun(unsigned int runNumber)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    UnityPrint("Unity test run ");
 800662c:	480b      	ldr	r0, [pc, #44]	; (800665c <announceTestRun+0x38>)
 800662e:	f000 fafb 	bl	8006c28 <UnityPrint>
    UnityPrintNumberUnsigned(runNumber+1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3301      	adds	r3, #1
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fb86 	bl	8006d48 <UnityPrintNumberUnsigned>
    UnityPrint(" of ");
 800663c:	4808      	ldr	r0, [pc, #32]	; (8006660 <announceTestRun+0x3c>)
 800663e:	f000 faf3 	bl	8006c28 <UnityPrint>
    UnityPrintNumberUnsigned(UnityFixture.RepeatCount);
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <announceTestRun+0x40>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fb7e 	bl	8006d48 <UnityPrintNumberUnsigned>
    UNITY_PRINT_EOL();
 800664c:	200a      	movs	r0, #10
 800664e:	f002 fecf 	bl	80093f0 <putchar>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	0800a96c 	.word	0x0800a96c
 8006660:	0800a97c 	.word	0x0800a97c
 8006664:	200002ac 	.word	0x200002ac

08006668 <UnityMain>:

int UnityMain(int argc, const char* argv[], void (*runAllTests)(void))
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
    int result = UnityGetCommandLineOptions(argc, argv);
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f8f4 	bl	8006864 <UnityGetCommandLineOptions>
 800667c:	6138      	str	r0, [r7, #16]
    unsigned int r;
    if (result != 0)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <UnityMain+0x20>
        return result;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	e01f      	b.n	80066c8 <UnityMain+0x60>

    for (r = 0; r < UnityFixture.RepeatCount; r++)
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e015      	b.n	80066ba <UnityMain+0x52>
    {
        UnityBegin(argv[0]);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fd16 	bl	80070c4 <UnityBegin>
        announceTestRun(r);
 8006698:	6978      	ldr	r0, [r7, #20]
 800669a:	f7ff ffc3 	bl	8006624 <announceTestRun>
        runAllTests();
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4798      	blx	r3
        if (!UnityFixture.Verbose) UNITY_PRINT_EOL();
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <UnityMain+0x68>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <UnityMain+0x48>
 80066aa:	200a      	movs	r0, #10
 80066ac:	f002 fea0 	bl	80093f0 <putchar>
        UnityEnd();
 80066b0:	f000 fd32 	bl	8007118 <UnityEnd>
    for (r = 0; r < UnityFixture.RepeatCount; r++)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3301      	adds	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <UnityMain+0x68>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d3e4      	bcc.n	800668e <UnityMain+0x26>
    }

    return (int)Unity.TestFailures;
 80066c4:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <UnityMain+0x6c>)
 80066c6:	699b      	ldr	r3, [r3, #24]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200002ac 	.word	0x200002ac
 80066d4:	200002ec 	.word	0x200002ec

080066d8 <selected>:

static int selected(const char* filter, const char* name)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
    if (filter == 0)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <selected+0x14>
        return 1;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e009      	b.n	8006700 <selected+0x28>
    return strstr(name, filter) ? 1 : 0;
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	6838      	ldr	r0, [r7, #0]
 80066f0:	f002 ff2e 	bl	8009550 <strstr>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <testSelected>:

static int testSelected(const char* test)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
    return selected(UnityFixture.NameFilter, test);
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <testSelected+0x20>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff ffde 	bl	80066d8 <selected>
 800671c:	4603      	mov	r3, r0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	200002ac 	.word	0x200002ac

0800672c <groupSelected>:

static int groupSelected(const char* group)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    return selected(UnityFixture.GroupFilter, group);
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <groupSelected+0x20>)
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ffcc 	bl	80066d8 <selected>
 8006740:	4603      	mov	r3, r0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200002ac 	.word	0x200002ac

08006750 <UnityTestRunner>:
                     const char* printableName,
                     const char* group,
                     const char* name,
                     const char* file,
                     unsigned int line)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
    if (testSelected(name) && groupSelected(group))
 800675e:	69f8      	ldr	r0, [r7, #28]
 8006760:	f7ff ffd2 	bl	8006708 <testSelected>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d043      	beq.n	80067f2 <UnityTestRunner+0xa2>
 800676a:	69b8      	ldr	r0, [r7, #24]
 800676c:	f7ff ffde 	bl	800672c <groupSelected>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03d      	beq.n	80067f2 <UnityTestRunner+0xa2>
    {
        Unity.TestFile = file;
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <UnityTestRunner+0xac>)
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	6013      	str	r3, [r2, #0]
        Unity.CurrentTestName = printableName;
 800677c:	4a1f      	ldr	r2, [pc, #124]	; (80067fc <UnityTestRunner+0xac>)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6053      	str	r3, [r2, #4]
        Unity.CurrentTestLineNumber = line;
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <UnityTestRunner+0xac>)
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	6113      	str	r3, [r2, #16]
        if (UnityFixture.Verbose)
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <UnityTestRunner+0xb0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <UnityTestRunner+0x4e>
        {
            UnityPrint(printableName);
 8006790:	6838      	ldr	r0, [r7, #0]
 8006792:	f000 fa49 	bl	8006c28 <UnityPrint>
        #ifndef UNITY_REPEAT_TEST_NAME
            Unity.CurrentTestName = NULL;
 8006796:	4b19      	ldr	r3, [pc, #100]	; (80067fc <UnityTestRunner+0xac>)
 8006798:	2200      	movs	r2, #0
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	e006      	b.n	80067ac <UnityTestRunner+0x5c>
        #endif
        }
        else if (UnityFixture.Silent)
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <UnityTestRunner+0xb0>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <UnityTestRunner+0x5c>
        {
            /* Do Nothing */
        }
        else
        {
            UNITY_OUTPUT_CHAR('.');
 80067a6:	202e      	movs	r0, #46	; 0x2e
 80067a8:	f002 fe22 	bl	80093f0 <putchar>
        }

        Unity.NumberOfTests++;
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <UnityTestRunner+0xac>)
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <UnityTestRunner+0xac>)
 80067b4:	6153      	str	r3, [r2, #20]
        UnityPointer_Init();
 80067b6:	f000 f827 	bl	8006808 <UnityPointer_Init>

        UNITY_EXEC_TIME_START();

        if (TEST_PROTECT())
 80067ba:	4812      	ldr	r0, [pc, #72]	; (8006804 <UnityTestRunner+0xb4>)
 80067bc:	f7f9 fcc6 	bl	800014c <setjmp>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <UnityTestRunner+0x7e>
        {
            setup();
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4798      	blx	r3
            testBody();
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4798      	blx	r3
        }
        if (TEST_PROTECT())
 80067ce:	480d      	ldr	r0, [pc, #52]	; (8006804 <UnityTestRunner+0xb4>)
 80067d0:	f7f9 fcbc 	bl	800014c <setjmp>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <UnityTestRunner+0x8e>
        {
            teardown();
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4798      	blx	r3
        }
        if (TEST_PROTECT())
 80067de:	4809      	ldr	r0, [pc, #36]	; (8006804 <UnityTestRunner+0xb4>)
 80067e0:	f7f9 fcb4 	bl	800014c <setjmp>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <UnityTestRunner+0x9e>
        {
            UnityPointer_UndoAllSets();
 80067ea:	f000 f819 	bl	8006820 <UnityPointer_UndoAllSets>
        }
        UnityConcludeFixtureTest();
 80067ee:	f000 f9a9 	bl	8006b44 <UnityConcludeFixtureTest>
    }
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200002ec 	.word	0x200002ec
 8006800:	200002ac 	.word	0x200002ac
 8006804:	20000314 	.word	0x20000314

08006808 <UnityPointer_Init>:

static struct PointerPair pointer_store[UNITY_MAX_POINTERS];
static int pointer_index = 0;

void UnityPointer_Init(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
    pointer_index = 0;
 800680c:	4b03      	ldr	r3, [pc, #12]	; (800681c <UnityPointer_Init+0x14>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	200002e8 	.word	0x200002e8

08006820 <UnityPointer_UndoAllSets>:
        pointer_index++;
    }
}

void UnityPointer_UndoAllSets(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
    while (pointer_index > 0)
 8006824:	e010      	b.n	8006848 <UnityPointer_UndoAllSets+0x28>
    {
        pointer_index--;
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <UnityPointer_UndoAllSets+0x3c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3b01      	subs	r3, #1
 800682c:	4a0b      	ldr	r2, [pc, #44]	; (800685c <UnityPointer_UndoAllSets+0x3c>)
 800682e:	6013      	str	r3, [r2, #0]
        *(pointer_store[pointer_index].pointer) =
            pointer_store[pointer_index].old_value;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <UnityPointer_UndoAllSets+0x3c>)
 8006832:	681b      	ldr	r3, [r3, #0]
        *(pointer_store[pointer_index].pointer) =
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <UnityPointer_UndoAllSets+0x3c>)
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	4909      	ldr	r1, [pc, #36]	; (8006860 <UnityPointer_UndoAllSets+0x40>)
 800683a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
            pointer_store[pointer_index].old_value;
 800683e:	4908      	ldr	r1, [pc, #32]	; (8006860 <UnityPointer_UndoAllSets+0x40>)
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	440b      	add	r3, r1
 8006844:	685b      	ldr	r3, [r3, #4]
        *(pointer_store[pointer_index].pointer) =
 8006846:	6013      	str	r3, [r2, #0]
    while (pointer_index > 0)
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <UnityPointer_UndoAllSets+0x3c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dcea      	bgt.n	8006826 <UnityPointer_UndoAllSets+0x6>
    }
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200002e8 	.word	0x200002e8
 8006860:	200002c0 	.word	0x200002c0

08006864 <UnityGetCommandLineOptions>:

int UnityGetCommandLineOptions(int argc, const char* argv[])
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
    int i;
    UnityFixture.Verbose = 0;
 800686e:	4ba3      	ldr	r3, [pc, #652]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
    UnityFixture.Silent = 0;
 8006874:	4ba1      	ldr	r3, [pc, #644]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
    UnityFixture.GroupFilter = 0;
 800687a:	4ba0      	ldr	r3, [pc, #640]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 800687c:	2200      	movs	r2, #0
 800687e:	611a      	str	r2, [r3, #16]
    UnityFixture.NameFilter = 0;
 8006880:	4b9e      	ldr	r3, [pc, #632]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006882:	2200      	movs	r2, #0
 8006884:	60da      	str	r2, [r3, #12]
    UnityFixture.RepeatCount = 1;
 8006886:	4b9d      	ldr	r3, [pc, #628]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006888:	2201      	movs	r2, #1
 800688a:	609a      	str	r2, [r3, #8]

    if (argc == 1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <UnityGetCommandLineOptions+0x32>
        return 0;
 8006892:	2300      	movs	r3, #0
 8006894:	e12e      	b.n	8006af4 <UnityGetCommandLineOptions+0x290>

    for (i = 1; i < argc; )
 8006896:	2301      	movs	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e125      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
    {
        if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	4413      	add	r3, r2
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4996      	ldr	r1, [pc, #600]	; (8006b00 <UnityGetCommandLineOptions+0x29c>)
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7f9 fc5d 	bl	8000168 <strcmp>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <UnityGetCommandLineOptions+0x68>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	4413      	add	r3, r2
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4991      	ldr	r1, [pc, #580]	; (8006b04 <UnityGetCommandLineOptions+0x2a0>)
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7f9 fc51 	bl	8000168 <strcmp>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d146      	bne.n	800695a <UnityGetCommandLineOptions+0xf6>
        {
            /* Usage */
            UnityPrint("Runs a series of unit tests.");
 80068cc:	488e      	ldr	r0, [pc, #568]	; (8006b08 <UnityGetCommandLineOptions+0x2a4>)
 80068ce:	f000 f9ab 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 80068d2:	200a      	movs	r0, #10
 80068d4:	f002 fd8c 	bl	80093f0 <putchar>
            UNITY_PRINT_EOL();
 80068d8:	200a      	movs	r0, #10
 80068da:	f002 fd89 	bl	80093f0 <putchar>
            UnityPrint("When no flag is specified, all tests are run.");
 80068de:	488b      	ldr	r0, [pc, #556]	; (8006b0c <UnityGetCommandLineOptions+0x2a8>)
 80068e0:	f000 f9a2 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 80068e4:	200a      	movs	r0, #10
 80068e6:	f002 fd83 	bl	80093f0 <putchar>
            UNITY_PRINT_EOL();
 80068ea:	200a      	movs	r0, #10
 80068ec:	f002 fd80 	bl	80093f0 <putchar>
            UnityPrint("Optional flags:");
 80068f0:	4887      	ldr	r0, [pc, #540]	; (8006b10 <UnityGetCommandLineOptions+0x2ac>)
 80068f2:	f000 f999 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 80068f6:	200a      	movs	r0, #10
 80068f8:	f002 fd7a 	bl	80093f0 <putchar>
            UnityPrint("  -v          Verbose output: show all tests executed even if they pass");
 80068fc:	4885      	ldr	r0, [pc, #532]	; (8006b14 <UnityGetCommandLineOptions+0x2b0>)
 80068fe:	f000 f993 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 8006902:	200a      	movs	r0, #10
 8006904:	f002 fd74 	bl	80093f0 <putchar>
            UnityPrint("  -s          Silent mode: minimal output showing only test failures");
 8006908:	4883      	ldr	r0, [pc, #524]	; (8006b18 <UnityGetCommandLineOptions+0x2b4>)
 800690a:	f000 f98d 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 800690e:	200a      	movs	r0, #10
 8006910:	f002 fd6e 	bl	80093f0 <putchar>
            UnityPrint("  -g NAME     Only run tests in groups that contain the string NAME");
 8006914:	4881      	ldr	r0, [pc, #516]	; (8006b1c <UnityGetCommandLineOptions+0x2b8>)
 8006916:	f000 f987 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 800691a:	200a      	movs	r0, #10
 800691c:	f002 fd68 	bl	80093f0 <putchar>
            UnityPrint("  -n NAME     Only run tests whose name contains the string NAME");
 8006920:	487f      	ldr	r0, [pc, #508]	; (8006b20 <UnityGetCommandLineOptions+0x2bc>)
 8006922:	f000 f981 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 8006926:	200a      	movs	r0, #10
 8006928:	f002 fd62 	bl	80093f0 <putchar>
            UnityPrint("  -r NUMBER   Repeatedly run all tests NUMBER times");
 800692c:	487d      	ldr	r0, [pc, #500]	; (8006b24 <UnityGetCommandLineOptions+0x2c0>)
 800692e:	f000 f97b 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 8006932:	200a      	movs	r0, #10
 8006934:	f002 fd5c 	bl	80093f0 <putchar>
            UnityPrint("  -h, --help  Display this help message");
 8006938:	487b      	ldr	r0, [pc, #492]	; (8006b28 <UnityGetCommandLineOptions+0x2c4>)
 800693a:	f000 f975 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 800693e:	200a      	movs	r0, #10
 8006940:	f002 fd56 	bl	80093f0 <putchar>
            UNITY_PRINT_EOL();
 8006944:	200a      	movs	r0, #10
 8006946:	f002 fd53 	bl	80093f0 <putchar>
            /* User-defined help message, e.g. to point to project-specific documentation */
            UnityPrint(UNITY_CUSTOM_HELP_MSG);
            UNITY_PRINT_EOL();
#else
            /* Default help suffix if a custom one is not defined */
            UnityPrint("More information about Unity: https://www.throwtheswitch.org/unity");
 800694a:	4878      	ldr	r0, [pc, #480]	; (8006b2c <UnityGetCommandLineOptions+0x2c8>)
 800694c:	f000 f96c 	bl	8006c28 <UnityPrint>
            UNITY_PRINT_EOL();
 8006950:	200a      	movs	r0, #10
 8006952:	f002 fd4d 	bl	80093f0 <putchar>
#endif
            return 1;  /* Exit without running the tests */
 8006956:	2301      	movs	r3, #1
 8006958:	e0cc      	b.n	8006af4 <UnityGetCommandLineOptions+0x290>
        }
        else if (strcmp(argv[i], "-v") == 0)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4413      	add	r3, r2
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4972      	ldr	r1, [pc, #456]	; (8006b30 <UnityGetCommandLineOptions+0x2cc>)
 8006966:	4618      	mov	r0, r3
 8006968:	f7f9 fbfe 	bl	8000168 <strcmp>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <UnityGetCommandLineOptions+0x11c>
        {
            UnityFixture.Verbose = 1;
 8006972:	4b62      	ldr	r3, [pc, #392]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
            i++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	e0b3      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
        }
        else if (strcmp(argv[i], "-s") == 0)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	496a      	ldr	r1, [pc, #424]	; (8006b34 <UnityGetCommandLineOptions+0x2d0>)
 800698c:	4618      	mov	r0, r3
 800698e:	f7f9 fbeb 	bl	8000168 <strcmp>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d106      	bne.n	80069a6 <UnityGetCommandLineOptions+0x142>
        {
            UnityFixture.Silent = 1;
 8006998:	4b58      	ldr	r3, [pc, #352]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 800699a:	2201      	movs	r2, #1
 800699c:	605a      	str	r2, [r3, #4]
            i++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e0a0      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
        }
        else if (strcmp(argv[i], "-g") == 0)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4413      	add	r3, r2
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4961      	ldr	r1, [pc, #388]	; (8006b38 <UnityGetCommandLineOptions+0x2d4>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7f9 fbd8 	bl	8000168 <strcmp>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <UnityGetCommandLineOptions+0x182>
        {
            i++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
            if (i >= argc)
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	db01      	blt.n	80069d0 <UnityGetCommandLineOptions+0x16c>
                return 1;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e091      	b.n	8006af4 <UnityGetCommandLineOptions+0x290>
            UnityFixture.GroupFilter = argv[i];
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a48      	ldr	r2, [pc, #288]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 80069dc:	6113      	str	r3, [r2, #16]
            i++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e080      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
        }
        else if (strcmp(argv[i], "-n") == 0)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4413      	add	r3, r2
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4952      	ldr	r1, [pc, #328]	; (8006b3c <UnityGetCommandLineOptions+0x2d8>)
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7f9 fbb8 	bl	8000168 <strcmp>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d113      	bne.n	8006a26 <UnityGetCommandLineOptions+0x1c2>
        {
            i++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
            if (i >= argc)
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	db01      	blt.n	8006a10 <UnityGetCommandLineOptions+0x1ac>
                return 1;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e071      	b.n	8006af4 <UnityGetCommandLineOptions+0x290>
            UnityFixture.NameFilter = argv[i];
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	4413      	add	r3, r2
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a38      	ldr	r2, [pc, #224]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006a1c:	60d3      	str	r3, [r2, #12]
            i++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e060      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
        }
        else if (strcmp(argv[i], "-r") == 0)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4943      	ldr	r1, [pc, #268]	; (8006b40 <UnityGetCommandLineOptions+0x2dc>)
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7f9 fb98 	bl	8000168 <strcmp>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d151      	bne.n	8006ae2 <UnityGetCommandLineOptions+0x27e>
        {
            UnityFixture.RepeatCount = 2;
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006a40:	2202      	movs	r2, #2
 8006a42:	609a      	str	r2, [r3, #8]
            i++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
            if (i < argc)
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	da4a      	bge.n	8006ae8 <UnityGetCommandLineOptions+0x284>
            {
                if (*(argv[i]) >= '0' && *(argv[i]) <= '9')
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4413      	add	r3, r2
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b2f      	cmp	r3, #47	; 0x2f
 8006a60:	d942      	bls.n	8006ae8 <UnityGetCommandLineOptions+0x284>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b39      	cmp	r3, #57	; 0x39
 8006a70:	d83a      	bhi.n	8006ae8 <UnityGetCommandLineOptions+0x284>
                {
                    unsigned int digit = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
                    UnityFixture.RepeatCount = 0;
 8006a76:	4b21      	ldr	r3, [pc, #132]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	609a      	str	r2, [r3, #8]
                    while (argv[i][digit] >= '0' && argv[i][digit] <= '9')
 8006a7c:	e019      	b.n	8006ab2 <UnityGetCommandLineOptions+0x24e>
                    {
                        UnityFixture.RepeatCount *= 10;
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006a8e:	609a      	str	r2, [r3, #8]
                        UnityFixture.RepeatCount += (unsigned int)argv[i][digit++] - '0';
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	4413      	add	r3, r2
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	1c59      	adds	r1, r3, #1
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <UnityGetCommandLineOptions+0x298>)
 8006ab0:	6093      	str	r3, [r2, #8]
                    while (argv[i][digit] >= '0' && argv[i][digit] <= '9')
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4413      	add	r3, r2
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ac4:	d909      	bls.n	8006ada <UnityGetCommandLineOptions+0x276>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4413      	add	r3, r2
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b39      	cmp	r3, #57	; 0x39
 8006ad8:	d9d1      	bls.n	8006a7e <UnityGetCommandLineOptions+0x21a>
                    }
                    i++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e002      	b.n	8006ae8 <UnityGetCommandLineOptions+0x284>
            }
        }
        else
        {
            /* ignore unknown parameter */
            i++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
    for (i = 1; i < argc; )
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	f6ff aed5 	blt.w	800689c <UnityGetCommandLineOptions+0x38>
        }
    }
    return 0;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	200002ac 	.word	0x200002ac
 8006b00:	0800a99c 	.word	0x0800a99c
 8006b04:	0800a9a0 	.word	0x0800a9a0
 8006b08:	0800a9a8 	.word	0x0800a9a8
 8006b0c:	0800a9c8 	.word	0x0800a9c8
 8006b10:	0800a9f8 	.word	0x0800a9f8
 8006b14:	0800aa08 	.word	0x0800aa08
 8006b18:	0800aa50 	.word	0x0800aa50
 8006b1c:	0800aa98 	.word	0x0800aa98
 8006b20:	0800aadc 	.word	0x0800aadc
 8006b24:	0800ab20 	.word	0x0800ab20
 8006b28:	0800ab54 	.word	0x0800ab54
 8006b2c:	0800ab7c 	.word	0x0800ab7c
 8006b30:	0800abc0 	.word	0x0800abc0
 8006b34:	0800abc4 	.word	0x0800abc4
 8006b38:	0800abc8 	.word	0x0800abc8
 8006b3c:	0800abcc 	.word	0x0800abcc
 8006b40:	0800abd0 	.word	0x0800abd0

08006b44 <UnityConcludeFixtureTest>:

void UnityConcludeFixtureTest(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8006b48:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <UnityConcludeFixtureTest+0x1e>
    {
        Unity.TestIgnores++;
 8006b50:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b58:	61d3      	str	r3, [r2, #28]
        UNITY_PRINT_EOL();
 8006b5a:	200a      	movs	r0, #10
 8006b5c:	f002 fc48 	bl	80093f0 <putchar>
 8006b60:	e019      	b.n	8006b96 <UnityConcludeFixtureTest+0x52>
    }
    else if (!Unity.CurrentTestFailed)
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10d      	bne.n	8006b86 <UnityConcludeFixtureTest+0x42>
    {
        if (UnityFixture.Verbose)
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <UnityConcludeFixtureTest+0x68>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <UnityConcludeFixtureTest+0x52>
        {
            UnityPrint(" ");
 8006b72:	480f      	ldr	r0, [pc, #60]	; (8006bb0 <UnityConcludeFixtureTest+0x6c>)
 8006b74:	f000 f858 	bl	8006c28 <UnityPrint>
            UnityPrint(UnityStrPass);
 8006b78:	480e      	ldr	r0, [pc, #56]	; (8006bb4 <UnityConcludeFixtureTest+0x70>)
 8006b7a:	f000 f855 	bl	8006c28 <UnityPrint>
            UNITY_EXEC_TIME_STOP();
            UNITY_PRINT_EXEC_TIME();
            UNITY_PRINT_EOL();
 8006b7e:	200a      	movs	r0, #10
 8006b80:	f002 fc36 	bl	80093f0 <putchar>
 8006b84:	e007      	b.n	8006b96 <UnityConcludeFixtureTest+0x52>
        }
    }
    else /* Unity.CurrentTestFailed */
    {
        Unity.TestFailures++;
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b8e:	6193      	str	r3, [r2, #24]
        UNITY_PRINT_EOL();
 8006b90:	200a      	movs	r0, #10
 8006b92:	f002 fc2d 	bl	80093f0 <putchar>
    }

    Unity.CurrentTestFailed = 0;
 8006b96:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <UnityConcludeFixtureTest+0x64>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200002ec 	.word	0x200002ec
 8006bac:	200002ac 	.word	0x200002ac
 8006bb0:	0800abd4 	.word	0x0800abd4
 8006bb4:	0800ac48 	.word	0x0800ac48

08006bb8 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b7e      	cmp	r3, #126	; 0x7e
 8006bc6:	d809      	bhi.n	8006bdc <UnityPrintChar+0x24>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b1f      	cmp	r3, #31
 8006bce:	d905      	bls.n	8006bdc <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fc0b 	bl	80093f0 <putchar>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8006bda:	e021      	b.n	8006c20 <UnityPrintChar+0x68>
    else if (*pch == 13)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b0d      	cmp	r3, #13
 8006be2:	d106      	bne.n	8006bf2 <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 8006be4:	205c      	movs	r0, #92	; 0x5c
 8006be6:	f002 fc03 	bl	80093f0 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8006bea:	2072      	movs	r0, #114	; 0x72
 8006bec:	f002 fc00 	bl	80093f0 <putchar>
}
 8006bf0:	e016      	b.n	8006c20 <UnityPrintChar+0x68>
    else if (*pch == 10)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b0a      	cmp	r3, #10
 8006bf8:	d106      	bne.n	8006c08 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 8006bfa:	205c      	movs	r0, #92	; 0x5c
 8006bfc:	f002 fbf8 	bl	80093f0 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8006c00:	206e      	movs	r0, #110	; 0x6e
 8006c02:	f002 fbf5 	bl	80093f0 <putchar>
}
 8006c06:	e00b      	b.n	8006c20 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 8006c08:	205c      	movs	r0, #92	; 0x5c
 8006c0a:	f002 fbf1 	bl	80093f0 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8006c0e:	2078      	movs	r0, #120	; 0x78
 8006c10:	f002 fbee 	bl	80093f0 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f8ca 	bl	8006db4 <UnityPrintNumberHex>
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UnityPrint+0x28>
    {
        while (*pch)
 8006c3a:	e005      	b.n	8006c48 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff ffbb 	bl	8006bb8 <UnityPrintChar>
            pch++;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f5      	bne.n	8006c3c <UnityPrint+0x14>
        }
    }
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d036      	beq.n	8006cdc <UnityPrintNumberByStyle+0x84>
    {
        if (style == UNITY_DISPLAY_STYLE_CHAR)
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	2b91      	cmp	r3, #145	; 0x91
 8006c72:	d12f      	bne.n	8006cd4 <UnityPrintNumberByStyle+0x7c>
        {
            /* printable characters plus CR & LF are printed */
            UNITY_OUTPUT_CHAR('\'');
 8006c74:	2027      	movs	r0, #39	; 0x27
 8006c76:	f002 fbbb 	bl	80093f0 <putchar>
            if ((number <= 126) && (number >= 32))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b7e      	cmp	r3, #126	; 0x7e
 8006c7e:	dc06      	bgt.n	8006c8e <UnityPrintNumberByStyle+0x36>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b1f      	cmp	r3, #31
 8006c84:	dd03      	ble.n	8006c8e <UnityPrintNumberByStyle+0x36>
            {
                UNITY_OUTPUT_CHAR((int)number);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 fbb2 	bl	80093f0 <putchar>
 8006c8c:	e01e      	b.n	8006ccc <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped carriage returns */
            else if (number == 13)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b0d      	cmp	r3, #13
 8006c92:	d106      	bne.n	8006ca2 <UnityPrintNumberByStyle+0x4a>
            {
                UNITY_OUTPUT_CHAR('\\');
 8006c94:	205c      	movs	r0, #92	; 0x5c
 8006c96:	f002 fbab 	bl	80093f0 <putchar>
                UNITY_OUTPUT_CHAR('r');
 8006c9a:	2072      	movs	r0, #114	; 0x72
 8006c9c:	f002 fba8 	bl	80093f0 <putchar>
 8006ca0:	e014      	b.n	8006ccc <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped line feeds */
            else if (number == 10)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b0a      	cmp	r3, #10
 8006ca6:	d106      	bne.n	8006cb6 <UnityPrintNumberByStyle+0x5e>
            {
                UNITY_OUTPUT_CHAR('\\');
 8006ca8:	205c      	movs	r0, #92	; 0x5c
 8006caa:	f002 fba1 	bl	80093f0 <putchar>
                UNITY_OUTPUT_CHAR('n');
 8006cae:	206e      	movs	r0, #110	; 0x6e
 8006cb0:	f002 fb9e 	bl	80093f0 <putchar>
 8006cb4:	e00a      	b.n	8006ccc <UnityPrintNumberByStyle+0x74>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
 8006cb6:	205c      	movs	r0, #92	; 0x5c
 8006cb8:	f002 fb9a 	bl	80093f0 <putchar>
                UNITY_OUTPUT_CHAR('x');
 8006cbc:	2078      	movs	r0, #120	; 0x78
 8006cbe:	f002 fb97 	bl	80093f0 <putchar>
                UnityPrintNumberHex((UNITY_UINT)number, 2);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f874 	bl	8006db4 <UnityPrintNumberHex>
            }
            UNITY_OUTPUT_CHAR('\'');
 8006ccc:	2027      	movs	r0, #39	; 0x27
 8006cce:	f002 fb8f 	bl	80093f0 <putchar>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 8006cd2:	e01e      	b.n	8006d12 <UnityPrintNumberByStyle+0xba>
            UnityPrintNumber(number);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f820 	bl	8006d1a <UnityPrintNumber>
}
 8006cda:	e01a      	b.n	8006d12 <UnityPrintNumberByStyle+0xba>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <UnityPrintNumberByStyle+0x98>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f82d 	bl	8006d48 <UnityPrintNumberUnsigned>
}
 8006cee:	e010      	b.n	8006d12 <UnityPrintNumberByStyle+0xba>
        UNITY_OUTPUT_CHAR('0');
 8006cf0:	2030      	movs	r0, #48	; 0x30
 8006cf2:	f002 fb7d 	bl	80093f0 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8006cf6:	2078      	movs	r0, #120	; 0x78
 8006cf8:	f002 fb7a 	bl	80093f0 <putchar>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f000 f851 	bl	8006db4 <UnityPrintNumberHex>
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	da05      	bge.n	8006d38 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8006d2c:	202d      	movs	r0, #45	; 0x2d
 8006d2e:	f002 fb5f 	bl	80093f0 <putchar>
        number = (~number) + 1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	425b      	negs	r3, r3
 8006d36:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f805 	bl	8006d48 <UnityPrintNumberUnsigned>
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8006d50:	2301      	movs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 8006d54:	e005      	b.n	8006d62 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d8f3      	bhi.n	8006d56 <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <UnityPrintNumberUnsigned+0x68>)
 8006d78:	fba3 2301 	umull	r2, r3, r3, r1
 8006d7c:	08da      	lsrs	r2, r3, #3
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	1aca      	subs	r2, r1, r3
 8006d88:	b2d3      	uxtb	r3, r2
 8006d8a:	3330      	adds	r3, #48	; 0x30
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f002 fb2e 	bl	80093f0 <putchar>
        divisor /= 10;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a06      	ldr	r2, [pc, #24]	; (8006db0 <UnityPrintNumberUnsigned+0x68>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e3      	bne.n	8006d6e <UnityPrintNumberUnsigned+0x26>
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	cccccccd 	.word	0xcccccccd

08006db4 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d91f      	bls.n	8006e0a <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8006dca:	2308      	movs	r3, #8
 8006dcc:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8006dce:	e01c      	b.n	8006e0a <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b09      	cmp	r3, #9
 8006dea:	dc07      	bgt.n	8006dfc <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	3330      	adds	r3, #48	; 0x30
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4618      	mov	r0, r3
 8006df6:	f002 fafb 	bl	80093f0 <putchar>
 8006dfa:	e006      	b.n	8006e0a <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3337      	adds	r3, #55	; 0x37
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4618      	mov	r0, r3
 8006e06:	f002 faf3 	bl	80093f0 <putchar>
    while (nibbles > 0)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1df      	bne.n	8006dd0 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fefe 	bl	8006c28 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8006e2c:	203a      	movs	r0, #58	; 0x3a
 8006e2e:	f002 fadf 	bl	80093f0 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ff70 	bl	8006d1a <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 8006e3a:	203a      	movs	r0, #58	; 0x3a
 8006e3c:	f002 fad8 	bl	80093f0 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <UnityTestResultsBegin+0x3c>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff feef 	bl	8006c28 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8006e4a:	203a      	movs	r0, #58	; 0x3a
 8006e4c:	f002 fad0 	bl	80093f0 <putchar>
#endif
#endif
#endif
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200002ec 	.word	0x200002ec

08006e5c <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <UnityTestResultsFailBegin+0x28>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff ffd6 	bl	8006e1c <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <UnityTestResultsFailBegin+0x2c>)
 8006e72:	f7ff fed9 	bl	8006c28 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8006e76:	203a      	movs	r0, #58	; 0x3a
 8006e78:	f002 faba 	bl	80093f0 <putchar>
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200002ec 	.word	0x200002ec
 8006e88:	0800ac50 	.word	0x0800ac50

08006e8c <UnityAddMsgIfSpecified>:
    UNITY_FLUSH_CALL();
}

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
#ifdef UNITY_PRINT_TEST_CONTEXT
    UnityPrint(UnityStrSpacer);
    UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
    if (Unity.CurrentDetail1)
 8006e94:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <UnityAddMsgIfSpecified+0x58>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <UnityAddMsgIfSpecified+0x3e>
    {
        UnityPrint(UnityStrSpacer);
 8006e9c:	4812      	ldr	r0, [pc, #72]	; (8006ee8 <UnityAddMsgIfSpecified+0x5c>)
 8006e9e:	f7ff fec3 	bl	8006c28 <UnityPrint>
        UnityPrint(UnityStrDetail1Name);
 8006ea2:	4812      	ldr	r0, [pc, #72]	; (8006eec <UnityAddMsgIfSpecified+0x60>)
 8006ea4:	f7ff fec0 	bl	8006c28 <UnityPrint>
        UnityPrint(Unity.CurrentDetail1);
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <UnityAddMsgIfSpecified+0x58>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff febb 	bl	8006c28 <UnityPrint>
        if (Unity.CurrentDetail2)
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <UnityAddMsgIfSpecified+0x58>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <UnityAddMsgIfSpecified+0x3e>
        {
            UnityPrint(UnityStrDetail2Name);
 8006eba:	480d      	ldr	r0, [pc, #52]	; (8006ef0 <UnityAddMsgIfSpecified+0x64>)
 8006ebc:	f7ff feb4 	bl	8006c28 <UnityPrint>
            UnityPrint(Unity.CurrentDetail2);
 8006ec0:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <UnityAddMsgIfSpecified+0x58>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff feaf 	bl	8006c28 <UnityPrint>
        }
    }
#endif
    if (msg)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 8006ed0:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <UnityAddMsgIfSpecified+0x5c>)
 8006ed2:	f7ff fea9 	bl	8006c28 <UnityPrint>
        UnityPrint(msg);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fea6 	bl	8006c28 <UnityPrint>
    }
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200002ec 	.word	0x200002ec
 8006ee8:	0800ac58 	.word	0x0800ac58
 8006eec:	0800acfc 	.word	0x0800acfc
 8006ef0:	0800ad08 	.word	0x0800ad08

08006ef4 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <UnityAssertEqualNumber+0x70>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <UnityAssertEqualNumber+0x1e>
 8006f0a:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <UnityAssertEqualNumber+0x70>)
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <UnityAssertEqualNumber+0x26>
 8006f12:	2101      	movs	r1, #1
 8006f14:	4814      	ldr	r0, [pc, #80]	; (8006f68 <UnityAssertEqualNumber+0x74>)
 8006f16:	f7f9 f91f 	bl	8000158 <longjmp>

    if (expected != actual)
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d01c      	beq.n	8006f5c <UnityAssertEqualNumber+0x68>
    {
        UnityTestResultsFailBegin(lineNumber);
 8006f22:	6838      	ldr	r0, [r7, #0]
 8006f24:	f7ff ff9a 	bl	8006e5c <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 8006f28:	4810      	ldr	r0, [pc, #64]	; (8006f6c <UnityAssertEqualNumber+0x78>)
 8006f2a:	f7ff fe7d 	bl	8006c28 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 8006f2e:	7e3b      	ldrb	r3, [r7, #24]
 8006f30:	4619      	mov	r1, r3
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff fe90 	bl	8006c58 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 8006f38:	480d      	ldr	r0, [pc, #52]	; (8006f70 <UnityAssertEqualNumber+0x7c>)
 8006f3a:	f7ff fe75 	bl	8006c28 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 8006f3e:	7e3b      	ldrb	r3, [r7, #24]
 8006f40:	4619      	mov	r1, r3
 8006f42:	68b8      	ldr	r0, [r7, #8]
 8006f44:	f7ff fe88 	bl	8006c58 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff9f 	bl	8006e8c <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <UnityAssertEqualNumber+0x70>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	621a      	str	r2, [r3, #32]
 8006f54:	2101      	movs	r1, #1
 8006f56:	4804      	ldr	r0, [pc, #16]	; (8006f68 <UnityAssertEqualNumber+0x74>)
 8006f58:	f7f9 f8fe 	bl	8000158 <longjmp>
    }
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	200002ec 	.word	0x200002ec
 8006f68:	20000314 	.word	0x20000314
 8006f6c:	0800ac5c 	.word	0x0800ac5c
 8006f70:	0800ac68 	.word	0x0800ac68

08006f74 <UnityAssertGreaterOrLessOrEqualNumber>:
                                           const UNITY_INT actual,
                                           const UNITY_COMPARISON_T compare,
                                           const char *msg,
                                           const UNITY_LINE_TYPE lineNumber,
                                           const UNITY_DISPLAY_STYLE_T style)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	71fb      	strb	r3, [r7, #7]
    int failed = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
    RETURN_IF_FAIL_OR_IGNORE;
 8006f88:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <UnityAssertGreaterOrLessOrEqualNumber+0x24>
 8006f90:	4b45      	ldr	r3, [pc, #276]	; (80070a8 <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <UnityAssertGreaterOrLessOrEqualNumber+0x2c>
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4844      	ldr	r0, [pc, #272]	; (80070ac <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 8006f9c:	f7f9 f8dc 	bl	8000158 <longjmp>

    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d104      	bne.n	8006fb2 <UnityAssertGreaterOrLessOrEqualNumber+0x3e>
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d175      	bne.n	800709e <UnityAssertGreaterOrLessOrEqualNumber+0x12a>
    if ((threshold == actual))                               { failed = 1; }
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d101      	bne.n	8006fbe <UnityAssertGreaterOrLessOrEqualNumber+0x4a>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 8006fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d016      	beq.n	8006ff8 <UnityAssertGreaterOrLessOrEqualNumber+0x84>
    {
        if ((actual > threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	dd06      	ble.n	8006fe0 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
        if ((actual < threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	da1d      	bge.n	8007024 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e015      	b.n	8007024 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
    }
    else /* UINT or HEX */
    {
        if (((UNITY_UINT)actual > (UNITY_UINT)threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d906      	bls.n	800700e <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
        if (((UNITY_UINT)actual < (UNITY_UINT)threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	429a      	cmp	r2, r3
 8007014:	d206      	bcs.n	8007024 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
    }

    if (failed)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d03a      	beq.n	80070a0 <UnityAssertGreaterOrLessOrEqualNumber+0x12c>
    {
        UnityTestResultsFailBegin(lineNumber);
 800702a:	6a38      	ldr	r0, [r7, #32]
 800702c:	f7ff ff16 	bl	8006e5c <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 8007030:	481f      	ldr	r0, [pc, #124]	; (80070b0 <UnityAssertGreaterOrLessOrEqualNumber+0x13c>)
 8007032:	f7ff fdf9 	bl	8006c28 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 8007036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800703a:	4619      	mov	r1, r3
 800703c:	68b8      	ldr	r0, [r7, #8]
 800703e:	f7ff fe0b 	bl	8006c58 <UnityPrintNumberByStyle>
        if (compare & UNITY_GREATER_THAN) { UnityPrint(UnityStrGt);       }
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <UnityAssertGreaterOrLessOrEqualNumber+0xde>
 800704c:	4819      	ldr	r0, [pc, #100]	; (80070b4 <UnityAssertGreaterOrLessOrEqualNumber+0x140>)
 800704e:	f7ff fdeb 	bl	8006c28 <UnityPrint>
        if (compare & UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt);       }
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <UnityAssertGreaterOrLessOrEqualNumber+0xee>
 800705c:	4816      	ldr	r0, [pc, #88]	; (80070b8 <UnityAssertGreaterOrLessOrEqualNumber+0x144>)
 800705e:	f7ff fde3 	bl	8006c28 <UnityPrint>
        if (compare & UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <UnityAssertGreaterOrLessOrEqualNumber+0xfe>
 800706c:	4813      	ldr	r0, [pc, #76]	; (80070bc <UnityAssertGreaterOrLessOrEqualNumber+0x148>)
 800706e:	f7ff fddb 	bl	8006c28 <UnityPrint>
        if (compare == UNITY_NOT_EQUAL)   { UnityPrint(UnityStrNotEqual); }
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <UnityAssertGreaterOrLessOrEqualNumber+0x10a>
 8007078:	4811      	ldr	r0, [pc, #68]	; (80070c0 <UnityAssertGreaterOrLessOrEqualNumber+0x14c>)
 800707a:	f7ff fdd5 	bl	8006c28 <UnityPrint>
        UnityPrintNumberByStyle(threshold, style);
 800707e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007082:	4619      	mov	r1, r3
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff fde7 	bl	8006c58 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 800708a:	6838      	ldr	r0, [r7, #0]
 800708c:	f7ff fefe 	bl	8006e8c <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 8007092:	2201      	movs	r2, #1
 8007094:	621a      	str	r2, [r3, #32]
 8007096:	2101      	movs	r1, #1
 8007098:	4804      	ldr	r0, [pc, #16]	; (80070ac <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 800709a:	f7f9 f85d 	bl	8000158 <longjmp>
    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 800709e:	bf00      	nop
    }
}
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200002ec 	.word	0x200002ec
 80070ac:	20000314 	.word	0x20000314
 80070b0:	0800ac5c 	.word	0x0800ac5c
 80070b4:	0800ac70 	.word	0x0800ac70
 80070b8:	0800ac88 	.word	0x0800ac88
 80070bc:	0800ac9c 	.word	0x0800ac9c
 80070c0:	0800acac 	.word	0x0800acac

080070c4 <UnityBegin>:
    Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 80070cc:	4a11      	ldr	r2, [pc, #68]	; (8007114 <UnityBegin+0x50>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <UnityBegin+0x50>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <UnityBegin+0x50>)
 80070da:	2200      	movs	r2, #0
 80070dc:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <UnityBegin+0x50>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <UnityBegin+0x50>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <UnityBegin+0x50>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 80070f0:	4b08      	ldr	r3, [pc, #32]	; (8007114 <UnityBegin+0x50>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <UnityBegin+0x50>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <UnityBegin+0x50>)
 80070fe:	2200      	movs	r2, #0
 8007100:	609a      	str	r2, [r3, #8]
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <UnityBegin+0x50>)
 8007104:	2200      	movs	r2, #0
 8007106:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	200002ec 	.word	0x200002ec

08007118 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 800711c:	200a      	movs	r0, #10
 800711e:	f002 f967 	bl	80093f0 <putchar>
    UnityPrint(UnityStrBreaker);
 8007122:	4819      	ldr	r0, [pc, #100]	; (8007188 <UnityEnd+0x70>)
 8007124:	f7ff fd80 	bl	8006c28 <UnityPrint>
    UNITY_PRINT_EOL();
 8007128:	200a      	movs	r0, #10
 800712a:	f002 f961 	bl	80093f0 <putchar>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <UnityEnd+0x74>)
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fdf1 	bl	8006d1a <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 8007138:	4815      	ldr	r0, [pc, #84]	; (8007190 <UnityEnd+0x78>)
 800713a:	f7ff fd75 	bl	8006c28 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <UnityEnd+0x74>)
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fde9 	bl	8006d1a <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 8007148:	4812      	ldr	r0, [pc, #72]	; (8007194 <UnityEnd+0x7c>)
 800714a:	f7ff fd6d 	bl	8006c28 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <UnityEnd+0x74>)
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fde1 	bl	8006d1a <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 8007158:	480f      	ldr	r0, [pc, #60]	; (8007198 <UnityEnd+0x80>)
 800715a:	f7ff fd65 	bl	8006c28 <UnityPrint>
    UNITY_PRINT_EOL();
 800715e:	200a      	movs	r0, #10
 8007160:	f002 f946 	bl	80093f0 <putchar>
    if (Unity.TestFailures == 0U)
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <UnityEnd+0x74>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <UnityEnd+0x84>)
 800716e:	f7ff fd5b 	bl	8006c28 <UnityPrint>
 8007172:	e002      	b.n	800717a <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 8007174:	480a      	ldr	r0, [pc, #40]	; (80071a0 <UnityEnd+0x88>)
 8007176:	f7ff fd57 	bl	8006c28 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 800717a:	200a      	movs	r0, #10
 800717c:	f002 f938 	bl	80093f0 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <UnityEnd+0x74>)
 8007182:	699b      	ldr	r3, [r3, #24]
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	0800acc4 	.word	0x0800acc4
 800718c:	200002ec 	.word	0x200002ec
 8007190:	0800acdc 	.word	0x0800acdc
 8007194:	0800ace4 	.word	0x0800ace4
 8007198:	0800acf0 	.word	0x0800acf0
 800719c:	0800ac44 	.word	0x0800ac44
 80071a0:	0800ac50 	.word	0x0800ac50

080071a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7c1b      	ldrb	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d115      	bne.n	80071e8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c0:	2202      	movs	r2, #2
 80071c2:	2181      	movs	r1, #129	; 0x81
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fe52 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d4:	2202      	movs	r2, #2
 80071d6:	2101      	movs	r1, #1
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fe48 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80071e6:	e012      	b.n	800720e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071e8:	2340      	movs	r3, #64	; 0x40
 80071ea:	2202      	movs	r2, #2
 80071ec:	2181      	movs	r1, #129	; 0x81
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fe3d 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	2202      	movs	r2, #2
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fe34 	bl	8008e6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800720e:	2308      	movs	r3, #8
 8007210:	2203      	movs	r2, #3
 8007212:	2182      	movs	r1, #130	; 0x82
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fe2a 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007220:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007224:	f001 ff4a 	bl	80090bc <USBD_static_malloc>
 8007228:	4602      	mov	r2, r0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
 800723e:	e026      	b.n	800728e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7c1b      	ldrb	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007274:	2101      	movs	r1, #1
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 feea 	bl	8009050 <USBD_LL_PrepareReceive>
 800727c:	e007      	b.n	800728e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007284:	2340      	movs	r3, #64	; 0x40
 8007286:	2101      	movs	r1, #1
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fee1 	bl	8009050 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072a8:	2181      	movs	r1, #129	; 0x81
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fe05 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072b6:	2101      	movs	r1, #1
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fdfe 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80072c6:	2182      	movs	r1, #130	; 0x82
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fdf6 	bl	8008eba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00e      	beq.n	80072fc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fef0 	bl	80090d4 <USBD_static_free>
    pdev->pClassData = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800732c:	2b00      	cmp	r3, #0
 800732e:	d039      	beq.n	80073a4 <USBD_CDC_Setup+0x9e>
 8007330:	2b20      	cmp	r3, #32
 8007332:	d17f      	bne.n	8007434 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d029      	beq.n	8007390 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b25b      	sxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	da11      	bge.n	800736a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007352:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	88d2      	ldrh	r2, [r2, #6]
 8007358:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800735a:	6939      	ldr	r1, [r7, #16]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	88db      	ldrh	r3, [r3, #6]
 8007360:	461a      	mov	r2, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 f9d9 	bl	800871a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007368:	e06b      	b.n	8007442 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785a      	ldrb	r2, [r3, #1]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007380:	6939      	ldr	r1, [r7, #16]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88db      	ldrh	r3, [r3, #6]
 8007386:	461a      	mov	r2, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f9f4 	bl	8008776 <USBD_CtlPrepareRx>
      break;
 800738e:	e058      	b.n	8007442 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	7850      	ldrb	r0, [r2, #1]
 800739c:	2200      	movs	r2, #0
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	4798      	blx	r3
      break;
 80073a2:	e04e      	b.n	8007442 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	2b0b      	cmp	r3, #11
 80073aa:	d02e      	beq.n	800740a <USBD_CDC_Setup+0x104>
 80073ac:	2b0b      	cmp	r3, #11
 80073ae:	dc38      	bgt.n	8007422 <USBD_CDC_Setup+0x11c>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <USBD_CDC_Setup+0xb4>
 80073b4:	2b0a      	cmp	r3, #10
 80073b6:	d014      	beq.n	80073e2 <USBD_CDC_Setup+0xdc>
 80073b8:	e033      	b.n	8007422 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d107      	bne.n	80073d4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	2202      	movs	r2, #2
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f9a4 	bl	800871a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d2:	e02e      	b.n	8007432 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f935 	bl	8008646 <USBD_CtlError>
            ret = USBD_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	75fb      	strb	r3, [r7, #23]
          break;
 80073e0:	e027      	b.n	8007432 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d107      	bne.n	80073fc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80073ec:	f107 030f 	add.w	r3, r7, #15
 80073f0:	2201      	movs	r2, #1
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f990 	bl	800871a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073fa:	e01a      	b.n	8007432 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 f921 	bl	8008646 <USBD_CtlError>
            ret = USBD_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	75fb      	strb	r3, [r7, #23]
          break;
 8007408:	e013      	b.n	8007432 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	2b03      	cmp	r3, #3
 8007412:	d00d      	beq.n	8007430 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f915 	bl	8008646 <USBD_CtlError>
            ret = USBD_FAIL;
 800741c:	2302      	movs	r3, #2
 800741e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007420:	e006      	b.n	8007430 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f90e 	bl	8008646 <USBD_CtlError>
          ret = USBD_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	75fb      	strb	r3, [r7, #23]
          break;
 800742e:	e000      	b.n	8007432 <USBD_CDC_Setup+0x12c>
          break;
 8007430:	bf00      	nop
      }
      break;
 8007432:	e006      	b.n	8007442 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 f905 	bl	8008646 <USBD_CtlError>
      ret = USBD_FAIL;
 800743c:	2302      	movs	r3, #2
 800743e:	75fb      	strb	r3, [r7, #23]
      break;
 8007440:	bf00      	nop
  }

  return ret;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007466:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03a      	beq.n	80074e8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	331c      	adds	r3, #28
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d029      	beq.n	80074dc <USBD_CDC_DataIn+0x90>
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	331c      	adds	r3, #28
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	78f9      	ldrb	r1, [r7, #3]
 800749c:	68b8      	ldr	r0, [r7, #8]
 800749e:	460b      	mov	r3, r1
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4403      	add	r3, r0
 80074a8:	3338      	adds	r3, #56	; 0x38
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d110      	bne.n	80074dc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	331c      	adds	r3, #28
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074ce:	78f9      	ldrb	r1, [r7, #3]
 80074d0:	2300      	movs	r3, #0
 80074d2:	2200      	movs	r2, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fd98 	bl	800900a <USBD_LL_Transmit>
 80074da:	e003      	b.n	80074e4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e000      	b.n	80074ea <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fdc3 	bl	8009096 <USBD_LL_GetRxDataSize>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00d      	beq.n	800753e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007536:	4611      	mov	r1, r2
 8007538:	4798      	blx	r3

    return USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800753e:	2302      	movs	r3, #2
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007556:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755e:	2b00      	cmp	r3, #0
 8007560:	d015      	beq.n	800758e <USBD_CDC_EP0_RxReady+0x46>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007568:	2bff      	cmp	r3, #255	; 0xff
 800756a:	d010      	beq.n	800758e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800757a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007582:	b292      	uxth	r2, r2
 8007584:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	22ff      	movs	r2, #255	; 0xff
 800758a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2243      	movs	r2, #67	; 0x43
 80075a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	200000d8 	.word	0x200000d8

080075b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2243      	movs	r2, #67	; 0x43
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000094 	.word	0x20000094

080075d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2243      	movs	r2, #67	; 0x43
 80075e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	2000011c 	.word	0x2000011c

080075f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	220a      	movs	r2, #10
 8007604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007606:	4b03      	ldr	r3, [pc, #12]	; (8007614 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000050 	.word	0x20000050

08007618 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007622:	2302      	movs	r3, #2
 8007624:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d017      	beq.n	80076e6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7c1b      	ldrb	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c8:	2101      	movs	r1, #1
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fcc0 	bl	8009050 <USBD_LL_PrepareReceive>
 80076d0:	e007      	b.n	80076e2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d8:	2340      	movs	r3, #64	; 0x40
 80076da:	2101      	movs	r1, #1
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fcb7 	bl	8009050 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e000      	b.n	80076e8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007704:	2302      	movs	r3, #2
 8007706:	e01a      	b.n	800773e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	79fa      	ldrb	r2, [r7, #7]
 8007734:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f001 fb24 	bl	8008d84 <USBD_LL_Init>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d006      	beq.n	8007768 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e001      	b.n	800776c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007768:	2302      	movs	r3, #2
 800776a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fb59 	bl	8008e38 <USBD_LL_Start>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fed7 	bl	80085ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b02      	cmp	r3, #2
 8007842:	d016      	beq.n	8007872 <USBD_LL_SetupStage+0x6a>
 8007844:	2b02      	cmp	r3, #2
 8007846:	d81c      	bhi.n	8007882 <USBD_LL_SetupStage+0x7a>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <USBD_LL_SetupStage+0x4a>
 800784c:	2b01      	cmp	r3, #1
 800784e:	d008      	beq.n	8007862 <USBD_LL_SetupStage+0x5a>
 8007850:	e017      	b.n	8007882 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9ca 	bl	8007bf4 <USBD_StdDevReq>
      break;
 8007860:	e01a      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa2c 	bl	8007cc8 <USBD_StdItfReq>
      break;
 8007870:	e012      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa6c 	bl	8007d58 <USBD_StdEPReq>
      break;
 8007880:	e00a      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800788c:	b2db      	uxtb	r3, r3
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fb31 	bl	8008ef8 <USBD_LL_StallEP>
      break;
 8007896:	bf00      	nop
  }

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	460b      	mov	r3, r1
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d14b      	bne.n	800794e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d134      	bne.n	8007932 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d919      	bls.n	8007908 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d203      	bcs.n	80078f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	e002      	b.n	80078fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 ff56 	bl	80087b2 <USBD_CtlContinueRx>
 8007906:	e038      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800791a:	2b03      	cmp	r3, #3
 800791c:	d105      	bne.n	800792a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 ff53 	bl	80087d6 <USBD_CtlSendStatus>
 8007930:	e023      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007938:	2b05      	cmp	r3, #5
 800793a:	d11e      	bne.n	800797a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 fad6 	bl	8008ef8 <USBD_LL_StallEP>
 800794c:	e015      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007960:	2b03      	cmp	r3, #3
 8007962:	d108      	bne.n	8007976 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	7afa      	ldrb	r2, [r7, #11]
 800796e:	4611      	mov	r1, r2
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	e001      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	e000      	b.n	800797c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	460b      	mov	r3, r1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d17f      	bne.n	8007a98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3314      	adds	r3, #20
 800799c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d15c      	bne.n	8007a62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d915      	bls.n	80079e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fec0 	bl	8008752 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079d2:	2300      	movs	r3, #0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 fb39 	bl	8009050 <USBD_LL_PrepareReceive>
 80079de:	e04e      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	6912      	ldr	r2, [r2, #16]
 80079e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ec:	fb01 f202 	mul.w	r2, r1, r2
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d11c      	bne.n	8007a30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d316      	bcc.n	8007a30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d20f      	bcs.n	8007a30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a10:	2200      	movs	r2, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fe9c 	bl	8008752 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a22:	2300      	movs	r3, #0
 8007a24:	2200      	movs	r2, #0
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 fb11 	bl	8009050 <USBD_LL_PrepareReceive>
 8007a2e:	e026      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d105      	bne.n	8007a52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f001 fa4f 	bl	8008ef8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fece 	bl	80087fc <USBD_CtlReceiveStatus>
 8007a60:	e00d      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d004      	beq.n	8007a76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f001 fa3d 	bl	8008ef8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d11d      	bne.n	8007ac4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fe81 	bl	8007790 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a96:	e015      	b.n	8007ac4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d108      	bne.n	8007ac0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	7afa      	ldrb	r2, [r7, #11]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3
 8007abe:	e001      	b.n	8007ac4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e000      	b.n	8007ac6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ad6:	2340      	movs	r3, #64	; 0x40
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2100      	movs	r1, #0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f9c6 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2240      	movs	r2, #64	; 0x40
 8007aee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	2200      	movs	r2, #0
 8007af6:	2180      	movs	r1, #128	; 0x80
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f9b8 	bl	8008e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2240      	movs	r2, #64	; 0x40
 8007b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6852      	ldr	r2, [r2, #4]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
  }

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d105      	bne.n	8007bb4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr

08007bc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d10b      	bne.n	8007bea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d005      	beq.n	8007c1a <USBD_StdDevReq+0x26>
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d84f      	bhi.n	8007cb2 <USBD_StdDevReq+0xbe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <USBD_StdDevReq+0x36>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d14b      	bne.n	8007cb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
      break;
 8007c28:	e048      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d839      	bhi.n	8007ca6 <USBD_StdDevReq+0xb2>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_StdDevReq+0x44>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007c9d 	.word	0x08007c9d
 8007c40:	08007ca7 	.word	0x08007ca7
 8007c44:	08007c93 	.word	0x08007c93
 8007c48:	08007ca7 	.word	0x08007ca7
 8007c4c:	08007c6b 	.word	0x08007c6b
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007ca7 	.word	0x08007ca7
 8007c58:	08007c7f 	.word	0x08007c7f
 8007c5c:	08007c75 	.word	0x08007c75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9dc 	bl	8008020 <USBD_GetDescriptor>
          break;
 8007c68:	e022      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb3f 	bl	80082f0 <USBD_SetAddress>
          break;
 8007c72:	e01d      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb7e 	bl	8008378 <USBD_SetConfig>
          break;
 8007c7c:	e018      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fc07 	bl	8008494 <USBD_GetConfig>
          break;
 8007c86:	e013      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc37 	bl	80084fe <USBD_GetStatus>
          break;
 8007c90:	e00e      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc65 	bl	8008564 <USBD_SetFeature>
          break;
 8007c9a:	e009      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc74 	bl	800858c <USBD_ClrFeature>
          break;
 8007ca4:	e004      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fccc 	bl	8008646 <USBD_CtlError>
          break;
 8007cae:	bf00      	nop
      }
      break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fcc6 	bl	8008646 <USBD_CtlError>
      break;
 8007cba:	bf00      	nop
  }

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop

08007cc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d005      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d82e      	bhi.n	8007d44 <USBD_StdItfReq+0x7c>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d12a      	bne.n	8007d44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d81d      	bhi.n	8007d36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d813      	bhi.n	8007d2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d110      	bne.n	8007d40 <USBD_StdItfReq+0x78>
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fd56 	bl	80087d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d2a:	e009      	b.n	8007d40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc89 	bl	8008646 <USBD_CtlError>
          break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc84 	bl	8008646 <USBD_CtlError>
          break;
 8007d3e:	e000      	b.n	8007d42 <USBD_StdItfReq+0x7a>
          break;
 8007d40:	bf00      	nop
      }
      break;
 8007d42:	e004      	b.n	8007d4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fc7d 	bl	8008646 <USBD_CtlError>
      break;
 8007d4c:	bf00      	nop
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	889b      	ldrh	r3, [r3, #4]
 8007d6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d007      	beq.n	8007d88 <USBD_StdEPReq+0x30>
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	f200 8146 	bhi.w	800800a <USBD_StdEPReq+0x2b2>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <USBD_StdEPReq+0x40>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	f040 8141 	bne.w	800800a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
      break;
 8007d96:	e13d      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d10a      	bne.n	8007dba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	e12d      	b.n	8008016 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d007      	beq.n	8007dd2 <USBD_StdEPReq+0x7a>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	f300 811b 	bgt.w	8007ffe <USBD_StdEPReq+0x2a6>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d072      	beq.n	8007eb2 <USBD_StdEPReq+0x15a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d03a      	beq.n	8007e46 <USBD_StdEPReq+0xee>
 8007dd0:	e115      	b.n	8007ffe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d002      	beq.n	8007de2 <USBD_StdEPReq+0x8a>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d015      	beq.n	8007e0c <USBD_StdEPReq+0xb4>
 8007de0:	e02b      	b.n	8007e3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d009      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f880 	bl	8008ef8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f87c 	bl	8008ef8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e00:	e020      	b.n	8007e44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc1e 	bl	8008646 <USBD_CtlError>
              break;
 8007e0a:	e01b      	b.n	8007e44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10e      	bne.n	8007e32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <USBD_StdEPReq+0xda>
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d008      	beq.n	8007e32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f863 	bl	8008ef8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fccf 	bl	80087d6 <USBD_CtlSendStatus>

              break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc02 	bl	8008646 <USBD_CtlError>
              break;
 8007e42:	bf00      	nop
          }
          break;
 8007e44:	e0e0      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d002      	beq.n	8007e56 <USBD_StdEPReq+0xfe>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d015      	beq.n	8007e80 <USBD_StdEPReq+0x128>
 8007e54:	e026      	b.n	8007ea4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b80      	cmp	r3, #128	; 0x80
 8007e60:	d009      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f846 	bl	8008ef8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f842 	bl	8008ef8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e74:	e01c      	b.n	8007eb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fbe4 	bl	8008646 <USBD_CtlError>
              break;
 8007e7e:	e017      	b.n	8007eb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	885b      	ldrh	r3, [r3, #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d112      	bne.n	8007eae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f84d 	bl	8008f36 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc9a 	bl	80087d6 <USBD_CtlSendStatus>
              }
              break;
 8007ea2:	e004      	b.n	8007eae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fbcd 	bl	8008646 <USBD_CtlError>
              break;
 8007eac:	e000      	b.n	8007eb0 <USBD_StdEPReq+0x158>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0aa      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0x16a>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d032      	beq.n	8007f26 <USBD_StdEPReq+0x1ce>
 8007ec0:	e097      	b.n	8007ff2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b80      	cmp	r3, #128	; 0x80
 8007ecc:	d004      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fbb8 	bl	8008646 <USBD_CtlError>
                break;
 8007ed6:	e091      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0b      	bge.n	8007ef8 <USBD_StdEPReq+0x1a0>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3310      	adds	r3, #16
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	e00b      	b.n	8007f10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	3304      	adds	r3, #4
 8007f10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fbfb 	bl	800871a <USBD_CtlSendData>
              break;
 8007f24:	e06a      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da11      	bge.n	8007f52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	f003 020f 	and.w	r2, r3, #15
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	3318      	adds	r3, #24
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d117      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb7b 	bl	8008646 <USBD_CtlError>
                  break;
 8007f50:	e054      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	f003 020f 	and.w	r2, r3, #15
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb68 	bl	8008646 <USBD_CtlError>
                  break;
 8007f76:	e041      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_StdEPReq+0x240>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3310      	adds	r3, #16
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	3304      	adds	r3, #4
 8007f96:	e00b      	b.n	8007fb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <USBD_StdEPReq+0x266>
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d103      	bne.n	8007fc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e00e      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 ffd2 	bl	8008f74 <USBD_LL_IsStallEP>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb95 	bl	800871a <USBD_CtlSendData>
              break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fb26 	bl	8008646 <USBD_CtlError>
              break;
 8007ffa:	bf00      	nop
          }
          break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fb20 	bl	8008646 <USBD_CtlError>
          break;
 8008006:	bf00      	nop
      }
      break;
 8008008:	e004      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb1a 	bl	8008646 <USBD_CtlError>
      break;
 8008012:	bf00      	nop
  }

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	2b06      	cmp	r3, #6
 8008042:	f200 8128 	bhi.w	8008296 <USBD_GetDescriptor+0x276>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USBD_GetDescriptor+0x2c>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008069 	.word	0x08008069
 8008050:	08008081 	.word	0x08008081
 8008054:	080080c1 	.word	0x080080c1
 8008058:	08008297 	.word	0x08008297
 800805c:	08008297 	.word	0x08008297
 8008060:	08008237 	.word	0x08008237
 8008064:	08008263 	.word	0x08008263
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
      break;
 800807e:	e112      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7c1b      	ldrb	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10d      	bne.n	80080a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f107 0208 	add.w	r2, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080a2:	e100      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	f107 0208 	add.w	r2, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	2202      	movs	r2, #2
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e0f2      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	885b      	ldrh	r3, [r3, #2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	f200 80ac 	bhi.w	8008224 <USBD_GetDescriptor+0x204>
 80080cc:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_GetDescriptor+0xb4>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	08008121 	.word	0x08008121
 80080dc:	08008155 	.word	0x08008155
 80080e0:	08008189 	.word	0x08008189
 80080e4:	080081bd 	.word	0x080081bd
 80080e8:	080081f1 	.word	0x080081f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 0108 	add.w	r1, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810e:	e091      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa97 	bl	8008646 <USBD_CtlError>
            err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
          break;
 800811e:	e089      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	7c12      	ldrb	r2, [r2, #16]
 8008138:	f107 0108 	add.w	r1, r7, #8
 800813c:	4610      	mov	r0, r2
 800813e:	4798      	blx	r3
 8008140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008142:	e077      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa7d 	bl	8008646 <USBD_CtlError>
            err++;
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	3301      	adds	r3, #1
 8008150:	72fb      	strb	r3, [r7, #11]
          break;
 8008152:	e06f      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008176:	e05d      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa63 	bl	8008646 <USBD_CtlError>
            err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
          break;
 8008186:	e055      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081aa:	e043      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa49 	bl	8008646 <USBD_CtlError>
            err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ba:	e03b      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081de:	e029      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa2f 	bl	8008646 <USBD_CtlError>
            err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
          break;
 80081ee:	e021      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008212:	e00f      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa15 	bl	8008646 <USBD_CtlError>
            err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
          break;
 8008222:	e007      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa0d 	bl	8008646 <USBD_CtlError>
          err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008232:	e038      	b.n	80082a6 <USBD_GetDescriptor+0x286>
 8008234:	e037      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7c1b      	ldrb	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008246:	f107 0208 	add.w	r2, r7, #8
 800824a:	4610      	mov	r0, r2
 800824c:	4798      	blx	r3
 800824e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008250:	e029      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9f6 	bl	8008646 <USBD_CtlError>
        err++;
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	3301      	adds	r3, #1
 800825e:	72fb      	strb	r3, [r7, #11]
      break;
 8008260:	e021      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f107 0208 	add.w	r2, r7, #8
 8008276:	4610      	mov	r0, r2
 8008278:	4798      	blx	r3
 800827a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	2207      	movs	r2, #7
 8008282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008284:	e00f      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9dc 	bl	8008646 <USBD_CtlError>
        err++;
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	3301      	adds	r3, #1
 8008292:	72fb      	strb	r3, [r7, #11]
      break;
 8008294:	e007      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9d4 	bl	8008646 <USBD_CtlError>
      err++;
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	3301      	adds	r3, #1
 80082a2:	72fb      	strb	r3, [r7, #11]
      break;
 80082a4:	bf00      	nop
  }

  if (err != 0U)
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11c      	bne.n	80082e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082ac:	893b      	ldrh	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d011      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	88db      	ldrh	r3, [r3, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	88da      	ldrh	r2, [r3, #6]
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bf28      	it	cs
 80082c4:	4613      	movcs	r3, r2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ca:	893b      	ldrh	r3, [r7, #8]
 80082cc:	461a      	mov	r2, r3
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa22 	bl	800871a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa79 	bl	80087d6 <USBD_CtlSendStatus>
 80082e4:	e000      	b.n	80082e8 <USBD_GetDescriptor+0x2c8>
    return;
 80082e6:	bf00      	nop
    }
  }
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d130      	bne.n	8008364 <USBD_SetAddress+0x74>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d12c      	bne.n	8008364 <USBD_SetAddress+0x74>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	2b7f      	cmp	r3, #127	; 0x7f
 8008310:	d828      	bhi.n	8008364 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	2b03      	cmp	r3, #3
 8008326:	d104      	bne.n	8008332 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f98b 	bl	8008646 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	e01d      	b.n	800836e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7bfa      	ldrb	r2, [r7, #15]
 8008336:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fe44 	bl	8008fcc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa46 	bl	80087d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008358:	e009      	b.n	800836e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008362:	e004      	b.n	800836e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f96d 	bl	8008646 <USBD_CtlError>
  }
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b41      	ldr	r3, [pc, #260]	; (8008490 <USBD_SetConfig+0x118>)
 800838a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800838c:	4b40      	ldr	r3, [pc, #256]	; (8008490 <USBD_SetConfig+0x118>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d904      	bls.n	800839e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f955 	bl	8008646 <USBD_CtlError>
 800839c:	e075      	b.n	800848a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d002      	beq.n	80083ae <USBD_SetConfig+0x36>
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d023      	beq.n	80083f4 <USBD_SetConfig+0x7c>
 80083ac:	e062      	b.n	8008474 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083ae:	4b38      	ldr	r3, [pc, #224]	; (8008490 <USBD_SetConfig+0x118>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80083b6:	4b36      	ldr	r3, [pc, #216]	; (8008490 <USBD_SetConfig+0x118>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2203      	movs	r2, #3
 80083c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083c8:	4b31      	ldr	r3, [pc, #196]	; (8008490 <USBD_SetConfig+0x118>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff f9e8 	bl	80077a4 <USBD_SetClassConfig>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d104      	bne.n	80083e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f932 	bl	8008646 <USBD_CtlError>
            return;
 80083e2:	e052      	b.n	800848a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9f6 	bl	80087d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ea:	e04e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9f2 	bl	80087d6 <USBD_CtlSendStatus>
        break;
 80083f2:	e04a      	b.n	800848a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083f4:	4b26      	ldr	r3, [pc, #152]	; (8008490 <USBD_SetConfig+0x118>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d112      	bne.n	8008422 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008404:	4b22      	ldr	r3, [pc, #136]	; (8008490 <USBD_SetConfig+0x118>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800840e:	4b20      	ldr	r3, [pc, #128]	; (8008490 <USBD_SetConfig+0x118>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff f9e4 	bl	80077e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9db 	bl	80087d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008420:	e033      	b.n	800848a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008422:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <USBD_SetConfig+0x118>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d01d      	beq.n	800846c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff f9d2 	bl	80077e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800843e:	4b14      	ldr	r3, [pc, #80]	; (8008490 <USBD_SetConfig+0x118>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <USBD_SetConfig+0x118>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff f9a8 	bl	80077a4 <USBD_SetClassConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	2b02      	cmp	r3, #2
 8008458:	d104      	bne.n	8008464 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f8f2 	bl	8008646 <USBD_CtlError>
            return;
 8008462:	e012      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f9b6 	bl	80087d6 <USBD_CtlSendStatus>
        break;
 800846a:	e00e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9b2 	bl	80087d6 <USBD_CtlSendStatus>
        break;
 8008472:	e00a      	b.n	800848a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8e5 	bl	8008646 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <USBD_SetConfig+0x118>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff f9ad 	bl	80077e2 <USBD_ClrClassConfig>
        break;
 8008488:	bf00      	nop
    }
  }
}
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000370 	.word	0x20000370

08008494 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d004      	beq.n	80084b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8cc 	bl	8008646 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ae:	e022      	b.n	80084f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	dc02      	bgt.n	80084c0 <USBD_GetConfig+0x2c>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc03      	bgt.n	80084c6 <USBD_GetConfig+0x32>
 80084be:	e015      	b.n	80084ec <USBD_GetConfig+0x58>
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d00b      	beq.n	80084dc <USBD_GetConfig+0x48>
 80084c4:	e012      	b.n	80084ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3308      	adds	r3, #8
 80084d0:	2201      	movs	r2, #1
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f920 	bl	800871a <USBD_CtlSendData>
        break;
 80084da:	e00c      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	2201      	movs	r2, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f918 	bl	800871a <USBD_CtlSendData>
        break;
 80084ea:	e004      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f8a9 	bl	8008646 <USBD_CtlError>
        break;
 80084f4:	bf00      	nop
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850e:	3b01      	subs	r3, #1
 8008510:	2b02      	cmp	r3, #2
 8008512:	d81e      	bhi.n	8008552 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	88db      	ldrh	r3, [r3, #6]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d004      	beq.n	8008526 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f891 	bl	8008646 <USBD_CtlError>
        break;
 8008524:	e01a      	b.n	800855c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	330c      	adds	r3, #12
 8008546:	2202      	movs	r2, #2
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8e5 	bl	800871a <USBD_CtlSendData>
      break;
 8008550:	e004      	b.n	800855c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f876 	bl	8008646 <USBD_CtlError>
      break;
 800855a:	bf00      	nop
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d106      	bne.n	8008584 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f929 	bl	80087d6 <USBD_CtlSendStatus>
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859c:	3b01      	subs	r3, #1
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d80b      	bhi.n	80085ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d10c      	bne.n	80085c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f90f 	bl	80087d6 <USBD_CtlSendStatus>
      }
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f842 	bl	8008646 <USBD_CtlError>
      break;
 80085c2:	e000      	b.n	80085c6 <USBD_ClrFeature+0x3a>
      break;
 80085c4:	bf00      	nop
  }
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	3304      	adds	r3, #4
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b29a      	uxth	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	3305      	adds	r3, #5
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	b29b      	uxth	r3, r3
 8008618:	4413      	add	r3, r2
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	3306      	adds	r3, #6
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b29a      	uxth	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	3307      	adds	r3, #7
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	b29b      	uxth	r3, r3
 8008634:	4413      	add	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	80da      	strh	r2, [r3, #6]

}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc50 	bl	8008ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008658:	2100      	movs	r1, #0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc4c 	bl	8008ef8 <USBD_LL_StallEP>
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d032      	beq.n	80086e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f834 	bl	80086ec <USBD_GetLen>
 8008684:	4603      	mov	r3, r0
 8008686:	3301      	adds	r3, #1
 8008688:	b29b      	uxth	r3, r3
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	75fa      	strb	r2, [r7, #23]
 8008698:	461a      	mov	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	75fa      	strb	r2, [r7, #23]
 80086aa:	461a      	mov	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4413      	add	r3, r2
 80086b0:	2203      	movs	r2, #3
 80086b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80086b4:	e012      	b.n	80086dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	60fa      	str	r2, [r7, #12]
 80086bc:	7dfa      	ldrb	r2, [r7, #23]
 80086be:	1c51      	adds	r1, r2, #1
 80086c0:	75f9      	strb	r1, [r7, #23]
 80086c2:	4611      	mov	r1, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	440a      	add	r2, r1
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	75fa      	strb	r2, [r7, #23]
 80086d2:	461a      	mov	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4413      	add	r3, r2
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e8      	bne.n	80086b6 <USBD_GetString+0x4e>
    }
  }
}
 80086e4:	bf00      	nop
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086f8:	e005      	b.n	8008706 <USBD_GetLen+0x1a>
  {
    len++;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	3301      	adds	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3301      	adds	r3, #1
 8008704:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f5      	bne.n	80086fa <USBD_GetLen+0xe>
  }

  return len;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	2100      	movs	r1, #0
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fc61 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	2100      	movs	r1, #0
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fc4f 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2203      	movs	r2, #3
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800878c:	88fa      	ldrh	r2, [r7, #6]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fc54 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 fc42 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2204      	movs	r2, #4
 80087e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087e6:	2300      	movs	r3, #0
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc0c 	bl	800900a <USBD_LL_Transmit>

  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2205      	movs	r2, #5
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fc1c 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008828:	2200      	movs	r2, #0
 800882a:	4912      	ldr	r1, [pc, #72]	; (8008874 <MX_USB_DEVICE_Init+0x50>)
 800882c:	4812      	ldr	r0, [pc, #72]	; (8008878 <MX_USB_DEVICE_Init+0x54>)
 800882e:	f7fe ff5f 	bl	80076f0 <USBD_Init>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008838:	f7f7 fed8 	bl	80005ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800883c:	490f      	ldr	r1, [pc, #60]	; (800887c <MX_USB_DEVICE_Init+0x58>)
 800883e:	480e      	ldr	r0, [pc, #56]	; (8008878 <MX_USB_DEVICE_Init+0x54>)
 8008840:	f7fe ff81 	bl	8007746 <USBD_RegisterClass>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800884a:	f7f7 fecf 	bl	80005ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800884e:	490c      	ldr	r1, [pc, #48]	; (8008880 <MX_USB_DEVICE_Init+0x5c>)
 8008850:	4809      	ldr	r0, [pc, #36]	; (8008878 <MX_USB_DEVICE_Init+0x54>)
 8008852:	f7fe fee1 	bl	8007618 <USBD_CDC_RegisterInterface>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800885c:	f7f7 fec6 	bl	80005ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008860:	4805      	ldr	r0, [pc, #20]	; (8008878 <MX_USB_DEVICE_Init+0x54>)
 8008862:	f7fe ff89 	bl	8007778 <USBD_Start>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800886c:	f7f7 febe 	bl	80005ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20000170 	.word	0x20000170
 8008878:	20000374 	.word	0x20000374
 800887c:	2000005c 	.word	0x2000005c
 8008880:	20000160 	.word	0x20000160

08008884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008888:	2200      	movs	r2, #0
 800888a:	4905      	ldr	r1, [pc, #20]	; (80088a0 <CDC_Init_FS+0x1c>)
 800888c:	4805      	ldr	r0, [pc, #20]	; (80088a4 <CDC_Init_FS+0x20>)
 800888e:	f7fe fed9 	bl	8007644 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008892:	4905      	ldr	r1, [pc, #20]	; (80088a8 <CDC_Init_FS+0x24>)
 8008894:	4803      	ldr	r0, [pc, #12]	; (80088a4 <CDC_Init_FS+0x20>)
 8008896:	f7fe feee 	bl	8007676 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800889a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800889c:	4618      	mov	r0, r3
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000a38 	.word	0x20000a38
 80088a4:	20000374 	.word	0x20000374
 80088a8:	20000638 	.word	0x20000638

080088ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bc80      	pop	{r7}
 80088b8:	4770      	bx	lr
	...

080088bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
 80088c8:	4613      	mov	r3, r2
 80088ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b23      	cmp	r3, #35	; 0x23
 80088d0:	d84a      	bhi.n	8008968 <CDC_Control_FS+0xac>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <CDC_Control_FS+0x1c>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	08008969 	.word	0x08008969
 80088dc:	08008969 	.word	0x08008969
 80088e0:	08008969 	.word	0x08008969
 80088e4:	08008969 	.word	0x08008969
 80088e8:	08008969 	.word	0x08008969
 80088ec:	08008969 	.word	0x08008969
 80088f0:	08008969 	.word	0x08008969
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008969 	.word	0x08008969
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008969 	.word	0x08008969
 8008904:	08008969 	.word	0x08008969
 8008908:	08008969 	.word	0x08008969
 800890c:	08008969 	.word	0x08008969
 8008910:	08008969 	.word	0x08008969
 8008914:	08008969 	.word	0x08008969
 8008918:	08008969 	.word	0x08008969
 800891c:	08008969 	.word	0x08008969
 8008920:	08008969 	.word	0x08008969
 8008924:	08008969 	.word	0x08008969
 8008928:	08008969 	.word	0x08008969
 800892c:	08008969 	.word	0x08008969
 8008930:	08008969 	.word	0x08008969
 8008934:	08008969 	.word	0x08008969
 8008938:	08008969 	.word	0x08008969
 800893c:	08008969 	.word	0x08008969
 8008940:	08008969 	.word	0x08008969
 8008944:	08008969 	.word	0x08008969
 8008948:	08008969 	.word	0x08008969
 800894c:	08008969 	.word	0x08008969
 8008950:	08008969 	.word	0x08008969
 8008954:	08008969 	.word	0x08008969
 8008958:	08008969 	.word	0x08008969
 800895c:	08008969 	.word	0x08008969
 8008960:	08008969 	.word	0x08008969
 8008964:	08008969 	.word	0x08008969
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008968:	bf00      	nop
  }

  return (USBD_OK);
 800896a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4810      	ldr	r0, [pc, #64]	; (80089c8 <CDC_Receive_FS+0x50>)
 8008986:	f7fe fe76 	bl	8007676 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800898a:	480f      	ldr	r0, [pc, #60]	; (80089c8 <CDC_Receive_FS+0x50>)
 800898c:	f7fe fe86 	bl	800769c <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8008990:	2240      	movs	r2, #64	; 0x40
 8008992:	2100      	movs	r1, #0
 8008994:	480d      	ldr	r0, [pc, #52]	; (80089cc <CDC_Receive_FS+0x54>)
 8008996:	f000 fd76 	bl	8009486 <memset>
  uint8_t len = (uint8_t)*Len;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4809      	ldr	r0, [pc, #36]	; (80089cc <CDC_Receive_FS+0x54>)
 80089a8:	f000 fe5b 	bl	8009662 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	461a      	mov	r2, r3
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fd67 	bl	8009486 <memset>

  fill_buffer_flag = 1;
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <CDC_Receive_FS+0x58>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80089be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000374 	.word	0x20000374
 80089cc:	20000000 	.word	0x20000000
 80089d0:	20000240 	.word	0x20000240

080089d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2212      	movs	r2, #18
 80089e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089e6:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	2000018c 	.word	0x2000018c

080089f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2204      	movs	r2, #4
 8008a08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a0a:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	200001a0 	.word	0x200001a0

08008a1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4907      	ldr	r1, [pc, #28]	; (8008a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a32:	4808      	ldr	r0, [pc, #32]	; (8008a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a34:	f7ff fe18 	bl	8008668 <USBD_GetString>
 8008a38:	e004      	b.n	8008a44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4904      	ldr	r1, [pc, #16]	; (8008a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a3e:	4805      	ldr	r0, [pc, #20]	; (8008a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a40:	f7ff fe12 	bl	8008668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000e38 	.word	0x20000e38
 8008a54:	0800abd8 	.word	0x0800abd8

08008a58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4904      	ldr	r1, [pc, #16]	; (8008a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a68:	4804      	ldr	r0, [pc, #16]	; (8008a7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a6a:	f7ff fdfd 	bl	8008668 <USBD_GetString>
  return USBD_StrDesc;
 8008a6e:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000e38 	.word	0x20000e38
 8008a7c:	0800abf0 	.word	0x0800abf0

08008a80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	221a      	movs	r2, #26
 8008a90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a92:	f000 f843 	bl	8008b1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	200001a4 	.word	0x200001a4

08008aa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d105      	bne.n	8008ac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	4907      	ldr	r1, [pc, #28]	; (8008ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aba:	4808      	ldr	r0, [pc, #32]	; (8008adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008abc:	f7ff fdd4 	bl	8008668 <USBD_GetString>
 8008ac0:	e004      	b.n	8008acc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4904      	ldr	r1, [pc, #16]	; (8008ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ac6:	4805      	ldr	r0, [pc, #20]	; (8008adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ac8:	f7ff fdce 	bl	8008668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008acc:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000e38 	.word	0x20000e38
 8008adc:	0800ac04 	.word	0x0800ac04

08008ae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	4907      	ldr	r1, [pc, #28]	; (8008b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008af6:	4808      	ldr	r0, [pc, #32]	; (8008b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008af8:	f7ff fdb6 	bl	8008668 <USBD_GetString>
 8008afc:	e004      	b.n	8008b08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	4904      	ldr	r1, [pc, #16]	; (8008b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b02:	4805      	ldr	r0, [pc, #20]	; (8008b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b04:	f7ff fdb0 	bl	8008668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000e38 	.word	0x20000e38
 8008b18:	0800ac10 	.word	0x0800ac10

08008b1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b22:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <Get_SerialNum+0x44>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b28:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <Get_SerialNum+0x48>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <Get_SerialNum+0x4c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4413      	add	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b42:	2208      	movs	r2, #8
 8008b44:	4909      	ldr	r1, [pc, #36]	; (8008b6c <Get_SerialNum+0x50>)
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f814 	bl	8008b74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	4908      	ldr	r1, [pc, #32]	; (8008b70 <Get_SerialNum+0x54>)
 8008b50:	68b8      	ldr	r0, [r7, #8]
 8008b52:	f000 f80f 	bl	8008b74 <IntToUnicode>
  }
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	1ffff7e8 	.word	0x1ffff7e8
 8008b64:	1ffff7ec 	.word	0x1ffff7ec
 8008b68:	1ffff7f0 	.word	0x1ffff7f0
 8008b6c:	200001a6 	.word	0x200001a6
 8008b70:	200001b6 	.word	0x200001b6

08008b74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
 8008b8a:	e027      	b.n	8008bdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	0f1b      	lsrs	r3, r3, #28
 8008b90:	2b09      	cmp	r3, #9
 8008b92:	d80b      	bhi.n	8008bac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	0f1b      	lsrs	r3, r3, #28
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3230      	adds	r2, #48	; 0x30
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
 8008baa:	e00a      	b.n	8008bc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	0f1b      	lsrs	r3, r3, #28
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	440b      	add	r3, r1
 8008bbc:	3237      	adds	r2, #55	; 0x37
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	3301      	adds	r3, #1
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
 8008bdc:	7dfa      	ldrb	r2, [r7, #23]
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3d3      	bcc.n	8008b8c <IntToUnicode+0x18>
  }
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a11      	ldr	r2, [pc, #68]	; (8008c44 <HAL_PCD_MspInit+0x54>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d11b      	bne.n	8008c3a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c02:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <HAL_PCD_MspInit+0x58>)
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <HAL_PCD_MspInit+0x58>)
 8008c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c0c:	61d3      	str	r3, [r2, #28]
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <HAL_PCD_MspInit+0x58>)
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2013      	movs	r0, #19
 8008c20:	f7f7 ffcb 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008c24:	2013      	movs	r0, #19
 8008c26:	f7f7 ffe4 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	2014      	movs	r0, #20
 8008c30:	f7f7 ffc3 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008c34:	2014      	movs	r0, #20
 8008c36:	f7f7 ffdc 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40005c00 	.word	0x40005c00
 8008c48:	40021000 	.word	0x40021000

08008c4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fe fdd0 	bl	8007808 <USBD_LL_SetupStage>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	440b      	add	r3, r1
 8008c90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f7fe fe02 	bl	80078a2 <USBD_LL_DataOutStage>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	440b      	add	r3, r1
 8008cc6:	333c      	adds	r3, #60	; 0x3c
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7fe fe59 	bl	8007984 <USBD_LL_DataInStage>
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe ff69 	bl	8007bc0 <USBD_LL_SOF>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d001      	beq.n	8008d0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d0a:	f7f7 fc6f 	bl	80005ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d14:	7bfa      	ldrb	r2, [r7, #15]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe ff19 	bl	8007b50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fed2 	bl	8007ace <USBD_LL_Reset>
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe ff13 	bl	8007b6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d50:	4b04      	ldr	r3, [pc, #16]	; (8008d64 <HAL_PCD_SuspendCallback+0x30>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	4a03      	ldr	r2, [pc, #12]	; (8008d64 <HAL_PCD_SuspendCallback+0x30>)
 8008d56:	f043 0306 	orr.w	r3, r3, #6
 8008d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe ff0d 	bl	8007b96 <USBD_LL_Resume>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d8c:	4a28      	ldr	r2, [pc, #160]	; (8008e30 <USBD_LL_Init+0xac>)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a26      	ldr	r2, [pc, #152]	; (8008e30 <USBD_LL_Init+0xac>)
 8008d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008d9c:	4b24      	ldr	r3, [pc, #144]	; (8008e30 <USBD_LL_Init+0xac>)
 8008d9e:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <USBD_LL_Init+0xb0>)
 8008da0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008da2:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <USBD_LL_Init+0xac>)
 8008da4:	2208      	movs	r2, #8
 8008da6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008da8:	4b21      	ldr	r3, [pc, #132]	; (8008e30 <USBD_LL_Init+0xac>)
 8008daa:	2202      	movs	r2, #2
 8008dac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008dae:	4b20      	ldr	r3, [pc, #128]	; (8008e30 <USBD_LL_Init+0xac>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008db4:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <USBD_LL_Init+0xac>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dba:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <USBD_LL_Init+0xac>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008dc0:	481b      	ldr	r0, [pc, #108]	; (8008e30 <USBD_LL_Init+0xac>)
 8008dc2:	f7f8 f8cd 	bl	8000f60 <HAL_PCD_Init>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008dcc:	f7f7 fc0e 	bl	80005ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dd6:	2318      	movs	r3, #24
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2100      	movs	r1, #0
 8008ddc:	f7f9 fdec 	bl	80029b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008de6:	2358      	movs	r3, #88	; 0x58
 8008de8:	2200      	movs	r2, #0
 8008dea:	2180      	movs	r1, #128	; 0x80
 8008dec:	f7f9 fde4 	bl	80029b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008df6:	23c0      	movs	r3, #192	; 0xc0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2181      	movs	r1, #129	; 0x81
 8008dfc:	f7f9 fddc 	bl	80029b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	f7f9 fdd3 	bl	80029b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2182      	movs	r1, #130	; 0x82
 8008e20:	f7f9 fdca 	bl	80029b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001038 	.word	0x20001038
 8008e34:	40005c00 	.word	0x40005c00

08008e38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f8 f985 	bl	800115e <HAL_PCD_Start>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f94e 	bl	80090fc <USBD_Get_USB_Status>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70bb      	strb	r3, [r7, #2]
 8008e84:	4613      	mov	r3, r2
 8008e86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e96:	78bb      	ldrb	r3, [r7, #2]
 8008e98:	883a      	ldrh	r2, [r7, #0]
 8008e9a:	78f9      	ldrb	r1, [r7, #3]
 8008e9c:	f7f8 fada 	bl	8001454 <HAL_PCD_EP_Open>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f928 	bl	80090fc <USBD_Get_USB_Status>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7f8 fb18 	bl	800150e <HAL_PCD_EP_Close>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f909 	bl	80090fc <USBD_Get_USB_Status>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f8 fbc0 	bl	800169c <HAL_PCD_EP_SetStall>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 f8ea 	bl	80090fc <USBD_Get_USB_Status>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f8 fc01 	bl	800175c <HAL_PCD_EP_ClrStall>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f8cb 	bl	80090fc <USBD_Get_USB_Status>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da0c      	bge.n	8008faa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	e00b      	b.n	8008fc2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb0:	68f9      	ldr	r1, [r7, #12]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	440b      	add	r3, r1
 8008fbc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008fc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr

08008fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f8 fa0d 	bl	800140a <HAL_PCD_SetAddress>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f880 	bl	80090fc <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009000:	7bbb      	ldrb	r3, [r7, #14]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	461a      	mov	r2, r3
 8009016:	460b      	mov	r3, r1
 8009018:	72fb      	strb	r3, [r7, #11]
 800901a:	4613      	mov	r3, r2
 800901c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800902c:	893b      	ldrh	r3, [r7, #8]
 800902e:	7af9      	ldrb	r1, [r7, #11]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	f7f8 fafc 	bl	800162e <HAL_PCD_EP_Transmit>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f85d 	bl	80090fc <USBD_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009046:	7dbb      	ldrb	r3, [r7, #22]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	460b      	mov	r3, r1
 800905e:	72fb      	strb	r3, [r7, #11]
 8009060:	4613      	mov	r3, r2
 8009062:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009072:	893b      	ldrh	r3, [r7, #8]
 8009074:	7af9      	ldrb	r1, [r7, #11]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	f7f8 fa91 	bl	800159e <HAL_PCD_EP_Receive>
 800907c:	4603      	mov	r3, r0
 800907e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f83a 	bl	80090fc <USBD_Get_USB_Status>
 8009088:	4603      	mov	r3, r0
 800908a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800908c:	7dbb      	ldrb	r3, [r7, #22]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f8 faa7 	bl	8001600 <HAL_PCD_EP_GetRxCount>
 80090b2:	4603      	mov	r3, r0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <USBD_static_malloc+0x14>)
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	20001328 	.word	0x20001328

080090d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr

080090e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bc80      	pop	{r7}
 80090fa:	4770      	bx	lr

080090fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d817      	bhi.n	8009140 <USBD_Get_USB_Status+0x44>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <USBD_Get_USB_Status+0x1c>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009129 	.word	0x08009129
 800911c:	0800912f 	.word	0x0800912f
 8009120:	08009135 	.word	0x08009135
 8009124:	0800913b 	.word	0x0800913b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
    break;
 800912c:	e00b      	b.n	8009146 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800912e:	2302      	movs	r3, #2
 8009130:	73fb      	strb	r3, [r7, #15]
    break;
 8009132:	e008      	b.n	8009146 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
    break;
 8009138:	e005      	b.n	8009146 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]
    break;
 800913e:	e002      	b.n	8009146 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009140:	2302      	movs	r3, #2
 8009142:	73fb      	strb	r3, [r7, #15]
    break;
 8009144:	bf00      	nop
  }
  return usb_status;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	bc80      	pop	{r7}
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <atoi>:
 8009154:	220a      	movs	r2, #10
 8009156:	2100      	movs	r1, #0
 8009158:	f000 b87e 	b.w	8009258 <strtol>

0800915c <_strtol_l.constprop.0>:
 800915c:	2b01      	cmp	r3, #1
 800915e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009162:	4686      	mov	lr, r0
 8009164:	4690      	mov	r8, r2
 8009166:	d001      	beq.n	800916c <_strtol_l.constprop.0+0x10>
 8009168:	2b24      	cmp	r3, #36	; 0x24
 800916a:	d906      	bls.n	800917a <_strtol_l.constprop.0+0x1e>
 800916c:	f000 fa4c 	bl	8009608 <__errno>
 8009170:	2316      	movs	r3, #22
 8009172:	6003      	str	r3, [r0, #0]
 8009174:	2000      	movs	r0, #0
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	460d      	mov	r5, r1
 800917c:	4835      	ldr	r0, [pc, #212]	; (8009254 <_strtol_l.constprop.0+0xf8>)
 800917e:	462a      	mov	r2, r5
 8009180:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009184:	5d06      	ldrb	r6, [r0, r4]
 8009186:	f016 0608 	ands.w	r6, r6, #8
 800918a:	d1f8      	bne.n	800917e <_strtol_l.constprop.0+0x22>
 800918c:	2c2d      	cmp	r4, #45	; 0x2d
 800918e:	d12e      	bne.n	80091ee <_strtol_l.constprop.0+0x92>
 8009190:	2601      	movs	r6, #1
 8009192:	782c      	ldrb	r4, [r5, #0]
 8009194:	1c95      	adds	r5, r2, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d057      	beq.n	800924a <_strtol_l.constprop.0+0xee>
 800919a:	2b10      	cmp	r3, #16
 800919c:	d109      	bne.n	80091b2 <_strtol_l.constprop.0+0x56>
 800919e:	2c30      	cmp	r4, #48	; 0x30
 80091a0:	d107      	bne.n	80091b2 <_strtol_l.constprop.0+0x56>
 80091a2:	782a      	ldrb	r2, [r5, #0]
 80091a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091a8:	2a58      	cmp	r2, #88	; 0x58
 80091aa:	d149      	bne.n	8009240 <_strtol_l.constprop.0+0xe4>
 80091ac:	2310      	movs	r3, #16
 80091ae:	786c      	ldrb	r4, [r5, #1]
 80091b0:	3502      	adds	r5, #2
 80091b2:	2200      	movs	r2, #0
 80091b4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80091b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091bc:	fbbc f9f3 	udiv	r9, ip, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	fb03 ca19 	mls	sl, r3, r9, ip
 80091c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091ca:	2f09      	cmp	r7, #9
 80091cc:	d814      	bhi.n	80091f8 <_strtol_l.constprop.0+0x9c>
 80091ce:	463c      	mov	r4, r7
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	dd20      	ble.n	8009216 <_strtol_l.constprop.0+0xba>
 80091d4:	1c57      	adds	r7, r2, #1
 80091d6:	d007      	beq.n	80091e8 <_strtol_l.constprop.0+0x8c>
 80091d8:	4581      	cmp	r9, r0
 80091da:	d319      	bcc.n	8009210 <_strtol_l.constprop.0+0xb4>
 80091dc:	d101      	bne.n	80091e2 <_strtol_l.constprop.0+0x86>
 80091de:	45a2      	cmp	sl, r4
 80091e0:	db16      	blt.n	8009210 <_strtol_l.constprop.0+0xb4>
 80091e2:	2201      	movs	r2, #1
 80091e4:	fb00 4003 	mla	r0, r0, r3, r4
 80091e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091ec:	e7eb      	b.n	80091c6 <_strtol_l.constprop.0+0x6a>
 80091ee:	2c2b      	cmp	r4, #43	; 0x2b
 80091f0:	bf04      	itt	eq
 80091f2:	782c      	ldrbeq	r4, [r5, #0]
 80091f4:	1c95      	addeq	r5, r2, #2
 80091f6:	e7ce      	b.n	8009196 <_strtol_l.constprop.0+0x3a>
 80091f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80091fc:	2f19      	cmp	r7, #25
 80091fe:	d801      	bhi.n	8009204 <_strtol_l.constprop.0+0xa8>
 8009200:	3c37      	subs	r4, #55	; 0x37
 8009202:	e7e5      	b.n	80091d0 <_strtol_l.constprop.0+0x74>
 8009204:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009208:	2f19      	cmp	r7, #25
 800920a:	d804      	bhi.n	8009216 <_strtol_l.constprop.0+0xba>
 800920c:	3c57      	subs	r4, #87	; 0x57
 800920e:	e7df      	b.n	80091d0 <_strtol_l.constprop.0+0x74>
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	e7e8      	b.n	80091e8 <_strtol_l.constprop.0+0x8c>
 8009216:	1c53      	adds	r3, r2, #1
 8009218:	d108      	bne.n	800922c <_strtol_l.constprop.0+0xd0>
 800921a:	2322      	movs	r3, #34	; 0x22
 800921c:	4660      	mov	r0, ip
 800921e:	f8ce 3000 	str.w	r3, [lr]
 8009222:	f1b8 0f00 	cmp.w	r8, #0
 8009226:	d0a6      	beq.n	8009176 <_strtol_l.constprop.0+0x1a>
 8009228:	1e69      	subs	r1, r5, #1
 800922a:	e006      	b.n	800923a <_strtol_l.constprop.0+0xde>
 800922c:	b106      	cbz	r6, 8009230 <_strtol_l.constprop.0+0xd4>
 800922e:	4240      	negs	r0, r0
 8009230:	f1b8 0f00 	cmp.w	r8, #0
 8009234:	d09f      	beq.n	8009176 <_strtol_l.constprop.0+0x1a>
 8009236:	2a00      	cmp	r2, #0
 8009238:	d1f6      	bne.n	8009228 <_strtol_l.constprop.0+0xcc>
 800923a:	f8c8 1000 	str.w	r1, [r8]
 800923e:	e79a      	b.n	8009176 <_strtol_l.constprop.0+0x1a>
 8009240:	2430      	movs	r4, #48	; 0x30
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1b5      	bne.n	80091b2 <_strtol_l.constprop.0+0x56>
 8009246:	2308      	movs	r3, #8
 8009248:	e7b3      	b.n	80091b2 <_strtol_l.constprop.0+0x56>
 800924a:	2c30      	cmp	r4, #48	; 0x30
 800924c:	d0a9      	beq.n	80091a2 <_strtol_l.constprop.0+0x46>
 800924e:	230a      	movs	r3, #10
 8009250:	e7af      	b.n	80091b2 <_strtol_l.constprop.0+0x56>
 8009252:	bf00      	nop
 8009254:	0800ad14 	.word	0x0800ad14

08009258 <strtol>:
 8009258:	4613      	mov	r3, r2
 800925a:	460a      	mov	r2, r1
 800925c:	4601      	mov	r1, r0
 800925e:	4802      	ldr	r0, [pc, #8]	; (8009268 <strtol+0x10>)
 8009260:	6800      	ldr	r0, [r0, #0]
 8009262:	f7ff bf7b 	b.w	800915c <_strtol_l.constprop.0>
 8009266:	bf00      	nop
 8009268:	20000218 	.word	0x20000218

0800926c <std>:
 800926c:	2300      	movs	r3, #0
 800926e:	b510      	push	{r4, lr}
 8009270:	4604      	mov	r4, r0
 8009272:	e9c0 3300 	strd	r3, r3, [r0]
 8009276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800927a:	6083      	str	r3, [r0, #8]
 800927c:	8181      	strh	r1, [r0, #12]
 800927e:	6643      	str	r3, [r0, #100]	; 0x64
 8009280:	81c2      	strh	r2, [r0, #14]
 8009282:	6183      	str	r3, [r0, #24]
 8009284:	4619      	mov	r1, r3
 8009286:	2208      	movs	r2, #8
 8009288:	305c      	adds	r0, #92	; 0x5c
 800928a:	f000 f8fc 	bl	8009486 <memset>
 800928e:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <std+0x58>)
 8009290:	6224      	str	r4, [r4, #32]
 8009292:	6263      	str	r3, [r4, #36]	; 0x24
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <std+0x5c>)
 8009296:	62a3      	str	r3, [r4, #40]	; 0x28
 8009298:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <std+0x60>)
 800929a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <std+0x64>)
 800929e:	6323      	str	r3, [r4, #48]	; 0x30
 80092a0:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <std+0x68>)
 80092a2:	429c      	cmp	r4, r3
 80092a4:	d006      	beq.n	80092b4 <std+0x48>
 80092a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092aa:	4294      	cmp	r4, r2
 80092ac:	d002      	beq.n	80092b4 <std+0x48>
 80092ae:	33d0      	adds	r3, #208	; 0xd0
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d105      	bne.n	80092c0 <std+0x54>
 80092b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092bc:	f000 b9ce 	b.w	800965c <__retarget_lock_init_recursive>
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	bf00      	nop
 80092c4:	08009401 	.word	0x08009401
 80092c8:	08009423 	.word	0x08009423
 80092cc:	0800945b 	.word	0x0800945b
 80092d0:	0800947f 	.word	0x0800947f
 80092d4:	20001548 	.word	0x20001548

080092d8 <stdio_exit_handler>:
 80092d8:	4a02      	ldr	r2, [pc, #8]	; (80092e4 <stdio_exit_handler+0xc>)
 80092da:	4903      	ldr	r1, [pc, #12]	; (80092e8 <stdio_exit_handler+0x10>)
 80092dc:	4803      	ldr	r0, [pc, #12]	; (80092ec <stdio_exit_handler+0x14>)
 80092de:	f000 b869 	b.w	80093b4 <_fwalk_sglue>
 80092e2:	bf00      	nop
 80092e4:	200001c0 	.word	0x200001c0
 80092e8:	080099b9 	.word	0x080099b9
 80092ec:	200001cc 	.word	0x200001cc

080092f0 <cleanup_stdio>:
 80092f0:	6841      	ldr	r1, [r0, #4]
 80092f2:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <cleanup_stdio+0x34>)
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4299      	cmp	r1, r3
 80092f8:	4604      	mov	r4, r0
 80092fa:	d001      	beq.n	8009300 <cleanup_stdio+0x10>
 80092fc:	f000 fb5c 	bl	80099b8 <_fflush_r>
 8009300:	68a1      	ldr	r1, [r4, #8]
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <cleanup_stdio+0x38>)
 8009304:	4299      	cmp	r1, r3
 8009306:	d002      	beq.n	800930e <cleanup_stdio+0x1e>
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fb55 	bl	80099b8 <_fflush_r>
 800930e:	68e1      	ldr	r1, [r4, #12]
 8009310:	4b06      	ldr	r3, [pc, #24]	; (800932c <cleanup_stdio+0x3c>)
 8009312:	4299      	cmp	r1, r3
 8009314:	d004      	beq.n	8009320 <cleanup_stdio+0x30>
 8009316:	4620      	mov	r0, r4
 8009318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800931c:	f000 bb4c 	b.w	80099b8 <_fflush_r>
 8009320:	bd10      	pop	{r4, pc}
 8009322:	bf00      	nop
 8009324:	20001548 	.word	0x20001548
 8009328:	200015b0 	.word	0x200015b0
 800932c:	20001618 	.word	0x20001618

08009330 <global_stdio_init.part.0>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <global_stdio_init.part.0+0x30>)
 8009334:	4c0b      	ldr	r4, [pc, #44]	; (8009364 <global_stdio_init.part.0+0x34>)
 8009336:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <global_stdio_init.part.0+0x38>)
 8009338:	4620      	mov	r0, r4
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	2104      	movs	r1, #4
 800933e:	2200      	movs	r2, #0
 8009340:	f7ff ff94 	bl	800926c <std>
 8009344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009348:	2201      	movs	r2, #1
 800934a:	2109      	movs	r1, #9
 800934c:	f7ff ff8e 	bl	800926c <std>
 8009350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009354:	2202      	movs	r2, #2
 8009356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800935a:	2112      	movs	r1, #18
 800935c:	f7ff bf86 	b.w	800926c <std>
 8009360:	20001680 	.word	0x20001680
 8009364:	20001548 	.word	0x20001548
 8009368:	080092d9 	.word	0x080092d9

0800936c <__sfp_lock_acquire>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sfp_lock_acquire+0x8>)
 800936e:	f000 b976 	b.w	800965e <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20001689 	.word	0x20001689

08009378 <__sfp_lock_release>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__sfp_lock_release+0x8>)
 800937a:	f000 b971 	b.w	8009660 <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20001689 	.word	0x20001689

08009384 <__sinit>:
 8009384:	b510      	push	{r4, lr}
 8009386:	4604      	mov	r4, r0
 8009388:	f7ff fff0 	bl	800936c <__sfp_lock_acquire>
 800938c:	6a23      	ldr	r3, [r4, #32]
 800938e:	b11b      	cbz	r3, 8009398 <__sinit+0x14>
 8009390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009394:	f7ff bff0 	b.w	8009378 <__sfp_lock_release>
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <__sinit+0x28>)
 800939a:	6223      	str	r3, [r4, #32]
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <__sinit+0x2c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1f5      	bne.n	8009390 <__sinit+0xc>
 80093a4:	f7ff ffc4 	bl	8009330 <global_stdio_init.part.0>
 80093a8:	e7f2      	b.n	8009390 <__sinit+0xc>
 80093aa:	bf00      	nop
 80093ac:	080092f1 	.word	0x080092f1
 80093b0:	20001680 	.word	0x20001680

080093b4 <_fwalk_sglue>:
 80093b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b8:	4607      	mov	r7, r0
 80093ba:	4688      	mov	r8, r1
 80093bc:	4614      	mov	r4, r2
 80093be:	2600      	movs	r6, #0
 80093c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093c4:	f1b9 0901 	subs.w	r9, r9, #1
 80093c8:	d505      	bpl.n	80093d6 <_fwalk_sglue+0x22>
 80093ca:	6824      	ldr	r4, [r4, #0]
 80093cc:	2c00      	cmp	r4, #0
 80093ce:	d1f7      	bne.n	80093c0 <_fwalk_sglue+0xc>
 80093d0:	4630      	mov	r0, r6
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d907      	bls.n	80093ec <_fwalk_sglue+0x38>
 80093dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093e0:	3301      	adds	r3, #1
 80093e2:	d003      	beq.n	80093ec <_fwalk_sglue+0x38>
 80093e4:	4629      	mov	r1, r5
 80093e6:	4638      	mov	r0, r7
 80093e8:	47c0      	blx	r8
 80093ea:	4306      	orrs	r6, r0
 80093ec:	3568      	adds	r5, #104	; 0x68
 80093ee:	e7e9      	b.n	80093c4 <_fwalk_sglue+0x10>

080093f0 <putchar>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <putchar+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	6882      	ldr	r2, [r0, #8]
 80093f8:	f000 bb18 	b.w	8009a2c <_putc_r>
 80093fc:	20000218 	.word	0x20000218

08009400 <__sread>:
 8009400:	b510      	push	{r4, lr}
 8009402:	460c      	mov	r4, r1
 8009404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009408:	f000 f8da 	bl	80095c0 <_read_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	bfab      	itete	ge
 8009410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009412:	89a3      	ldrhlt	r3, [r4, #12]
 8009414:	181b      	addge	r3, r3, r0
 8009416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800941a:	bfac      	ite	ge
 800941c:	6563      	strge	r3, [r4, #84]	; 0x54
 800941e:	81a3      	strhlt	r3, [r4, #12]
 8009420:	bd10      	pop	{r4, pc}

08009422 <__swrite>:
 8009422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009426:	461f      	mov	r7, r3
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	4605      	mov	r5, r0
 800942c:	05db      	lsls	r3, r3, #23
 800942e:	460c      	mov	r4, r1
 8009430:	4616      	mov	r6, r2
 8009432:	d505      	bpl.n	8009440 <__swrite+0x1e>
 8009434:	2302      	movs	r3, #2
 8009436:	2200      	movs	r2, #0
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	f000 f8ae 	bl	800959c <_lseek_r>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	4632      	mov	r2, r6
 8009444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	4628      	mov	r0, r5
 800944c:	463b      	mov	r3, r7
 800944e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	f000 b8c5 	b.w	80095e4 <_write_r>

0800945a <__sseek>:
 800945a:	b510      	push	{r4, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009462:	f000 f89b 	bl	800959c <_lseek_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	bf15      	itete	ne
 800946c:	6560      	strne	r0, [r4, #84]	; 0x54
 800946e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009476:	81a3      	strheq	r3, [r4, #12]
 8009478:	bf18      	it	ne
 800947a:	81a3      	strhne	r3, [r4, #12]
 800947c:	bd10      	pop	{r4, pc}

0800947e <__sclose>:
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 b87b 	b.w	800957c <_close_r>

08009486 <memset>:
 8009486:	4603      	mov	r3, r0
 8009488:	4402      	add	r2, r0
 800948a:	4293      	cmp	r3, r2
 800948c:	d100      	bne.n	8009490 <memset+0xa>
 800948e:	4770      	bx	lr
 8009490:	f803 1b01 	strb.w	r1, [r3], #1
 8009494:	e7f9      	b.n	800948a <memset+0x4>
	...

08009498 <strtok>:
 8009498:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <strtok+0x5c>)
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	681f      	ldr	r7, [r3, #0]
 80094a0:	4605      	mov	r5, r0
 80094a2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80094a4:	460e      	mov	r6, r1
 80094a6:	b9ec      	cbnz	r4, 80094e4 <strtok+0x4c>
 80094a8:	2050      	movs	r0, #80	; 0x50
 80094aa:	f000 f94f 	bl	800974c <malloc>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6478      	str	r0, [r7, #68]	; 0x44
 80094b2:	b920      	cbnz	r0, 80094be <strtok+0x26>
 80094b4:	215b      	movs	r1, #91	; 0x5b
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <strtok+0x60>)
 80094b8:	4810      	ldr	r0, [pc, #64]	; (80094fc <strtok+0x64>)
 80094ba:	f000 f8e1 	bl	8009680 <__assert_func>
 80094be:	e9c0 4400 	strd	r4, r4, [r0]
 80094c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80094c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80094ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80094ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80094d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80094d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80094da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80094de:	6184      	str	r4, [r0, #24]
 80094e0:	7704      	strb	r4, [r0, #28]
 80094e2:	6244      	str	r4, [r0, #36]	; 0x24
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ea:	2301      	movs	r3, #1
 80094ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	f000 b806 	b.w	8009500 <__strtok_r>
 80094f4:	20000218 	.word	0x20000218
 80094f8:	0800ae14 	.word	0x0800ae14
 80094fc:	0800ae2b 	.word	0x0800ae2b

08009500 <__strtok_r>:
 8009500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009502:	b908      	cbnz	r0, 8009508 <__strtok_r+0x8>
 8009504:	6810      	ldr	r0, [r2, #0]
 8009506:	b188      	cbz	r0, 800952c <__strtok_r+0x2c>
 8009508:	4604      	mov	r4, r0
 800950a:	460f      	mov	r7, r1
 800950c:	4620      	mov	r0, r4
 800950e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009512:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009516:	b91e      	cbnz	r6, 8009520 <__strtok_r+0x20>
 8009518:	b965      	cbnz	r5, 8009534 <__strtok_r+0x34>
 800951a:	4628      	mov	r0, r5
 800951c:	6015      	str	r5, [r2, #0]
 800951e:	e005      	b.n	800952c <__strtok_r+0x2c>
 8009520:	42b5      	cmp	r5, r6
 8009522:	d1f6      	bne.n	8009512 <__strtok_r+0x12>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f0      	bne.n	800950a <__strtok_r+0xa>
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	7003      	strb	r3, [r0, #0]
 800952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952e:	461c      	mov	r4, r3
 8009530:	e00c      	b.n	800954c <__strtok_r+0x4c>
 8009532:	b915      	cbnz	r5, 800953a <__strtok_r+0x3a>
 8009534:	460e      	mov	r6, r1
 8009536:	f814 3b01 	ldrb.w	r3, [r4], #1
 800953a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800953e:	42ab      	cmp	r3, r5
 8009540:	d1f7      	bne.n	8009532 <__strtok_r+0x32>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0f3      	beq.n	800952e <__strtok_r+0x2e>
 8009546:	2300      	movs	r3, #0
 8009548:	f804 3c01 	strb.w	r3, [r4, #-1]
 800954c:	6014      	str	r4, [r2, #0]
 800954e:	e7ed      	b.n	800952c <__strtok_r+0x2c>

08009550 <strstr>:
 8009550:	780a      	ldrb	r2, [r1, #0]
 8009552:	b570      	push	{r4, r5, r6, lr}
 8009554:	b96a      	cbnz	r2, 8009572 <strstr+0x22>
 8009556:	bd70      	pop	{r4, r5, r6, pc}
 8009558:	429a      	cmp	r2, r3
 800955a:	d109      	bne.n	8009570 <strstr+0x20>
 800955c:	460c      	mov	r4, r1
 800955e:	4605      	mov	r5, r0
 8009560:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0f6      	beq.n	8009556 <strstr+0x6>
 8009568:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800956c:	429e      	cmp	r6, r3
 800956e:	d0f7      	beq.n	8009560 <strstr+0x10>
 8009570:	3001      	adds	r0, #1
 8009572:	7803      	ldrb	r3, [r0, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1ef      	bne.n	8009558 <strstr+0x8>
 8009578:	4618      	mov	r0, r3
 800957a:	e7ec      	b.n	8009556 <strstr+0x6>

0800957c <_close_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	2300      	movs	r3, #0
 8009580:	4d05      	ldr	r5, [pc, #20]	; (8009598 <_close_r+0x1c>)
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f000 ffae 	bl	800a4e8 <_close>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_close_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_close_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20001684 	.word	0x20001684

0800959c <_lseek_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	2200      	movs	r2, #0
 80095a6:	4d05      	ldr	r5, [pc, #20]	; (80095bc <_lseek_r+0x20>)
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f000 ff5d 	bl	800a46a <_lseek>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_lseek_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_lseek_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	20001684 	.word	0x20001684

080095c0 <_read_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	2200      	movs	r2, #0
 80095ca:	4d05      	ldr	r5, [pc, #20]	; (80095e0 <_read_r+0x20>)
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f000 fef5 	bl	800a3be <_read>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_read_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_read_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20001684 	.word	0x20001684

080095e4 <_write_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	2200      	movs	r2, #0
 80095ee:	4d05      	ldr	r5, [pc, #20]	; (8009604 <_write_r+0x20>)
 80095f0:	602a      	str	r2, [r5, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f000 ff4b 	bl	800a48e <_write>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_write_r+0x1e>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_write_r+0x1e>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20001684 	.word	0x20001684

08009608 <__errno>:
 8009608:	4b01      	ldr	r3, [pc, #4]	; (8009610 <__errno+0x8>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	20000218 	.word	0x20000218

08009614 <__libc_init_array>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	2600      	movs	r6, #0
 8009618:	4d0c      	ldr	r5, [pc, #48]	; (800964c <__libc_init_array+0x38>)
 800961a:	4c0d      	ldr	r4, [pc, #52]	; (8009650 <__libc_init_array+0x3c>)
 800961c:	1b64      	subs	r4, r4, r5
 800961e:	10a4      	asrs	r4, r4, #2
 8009620:	42a6      	cmp	r6, r4
 8009622:	d109      	bne.n	8009638 <__libc_init_array+0x24>
 8009624:	f001 f962 	bl	800a8ec <_init>
 8009628:	2600      	movs	r6, #0
 800962a:	4d0a      	ldr	r5, [pc, #40]	; (8009654 <__libc_init_array+0x40>)
 800962c:	4c0a      	ldr	r4, [pc, #40]	; (8009658 <__libc_init_array+0x44>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	42a6      	cmp	r6, r4
 8009634:	d105      	bne.n	8009642 <__libc_init_array+0x2e>
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	f855 3b04 	ldr.w	r3, [r5], #4
 800963c:	4798      	blx	r3
 800963e:	3601      	adds	r6, #1
 8009640:	e7ee      	b.n	8009620 <__libc_init_array+0xc>
 8009642:	f855 3b04 	ldr.w	r3, [r5], #4
 8009646:	4798      	blx	r3
 8009648:	3601      	adds	r6, #1
 800964a:	e7f2      	b.n	8009632 <__libc_init_array+0x1e>
 800964c:	0800af10 	.word	0x0800af10
 8009650:	0800af10 	.word	0x0800af10
 8009654:	0800af10 	.word	0x0800af10
 8009658:	0800af14 	.word	0x0800af14

0800965c <__retarget_lock_init_recursive>:
 800965c:	4770      	bx	lr

0800965e <__retarget_lock_acquire_recursive>:
 800965e:	4770      	bx	lr

08009660 <__retarget_lock_release_recursive>:
 8009660:	4770      	bx	lr

08009662 <memcpy>:
 8009662:	440a      	add	r2, r1
 8009664:	4291      	cmp	r1, r2
 8009666:	f100 33ff 	add.w	r3, r0, #4294967295
 800966a:	d100      	bne.n	800966e <memcpy+0xc>
 800966c:	4770      	bx	lr
 800966e:	b510      	push	{r4, lr}
 8009670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009674:	4291      	cmp	r1, r2
 8009676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967a:	d1f9      	bne.n	8009670 <memcpy+0xe>
 800967c:	bd10      	pop	{r4, pc}
	...

08009680 <__assert_func>:
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <__assert_func+0x2c>)
 8009688:	4605      	mov	r5, r0
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68d8      	ldr	r0, [r3, #12]
 800968e:	b14c      	cbz	r4, 80096a4 <__assert_func+0x24>
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <__assert_func+0x30>)
 8009692:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009696:	9100      	str	r1, [sp, #0]
 8009698:	462b      	mov	r3, r5
 800969a:	4906      	ldr	r1, [pc, #24]	; (80096b4 <__assert_func+0x34>)
 800969c:	f000 f9b4 	bl	8009a08 <fiprintf>
 80096a0:	f000 fa9e 	bl	8009be0 <abort>
 80096a4:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <__assert_func+0x38>)
 80096a6:	461c      	mov	r4, r3
 80096a8:	e7f3      	b.n	8009692 <__assert_func+0x12>
 80096aa:	bf00      	nop
 80096ac:	20000218 	.word	0x20000218
 80096b0:	0800ae85 	.word	0x0800ae85
 80096b4:	0800ae92 	.word	0x0800ae92
 80096b8:	0800aec0 	.word	0x0800aec0

080096bc <_free_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4605      	mov	r5, r0
 80096c0:	2900      	cmp	r1, #0
 80096c2:	d040      	beq.n	8009746 <_free_r+0x8a>
 80096c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c8:	1f0c      	subs	r4, r1, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfb8      	it	lt
 80096ce:	18e4      	addlt	r4, r4, r3
 80096d0:	f000 f8e4 	bl	800989c <__malloc_lock>
 80096d4:	4a1c      	ldr	r2, [pc, #112]	; (8009748 <_free_r+0x8c>)
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	b933      	cbnz	r3, 80096e8 <_free_r+0x2c>
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	6014      	str	r4, [r2, #0]
 80096de:	4628      	mov	r0, r5
 80096e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e4:	f000 b8e0 	b.w	80098a8 <__malloc_unlock>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d908      	bls.n	80096fe <_free_r+0x42>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	1821      	adds	r1, r4, r0
 80096f0:	428b      	cmp	r3, r1
 80096f2:	bf01      	itttt	eq
 80096f4:	6819      	ldreq	r1, [r3, #0]
 80096f6:	685b      	ldreq	r3, [r3, #4]
 80096f8:	1809      	addeq	r1, r1, r0
 80096fa:	6021      	streq	r1, [r4, #0]
 80096fc:	e7ed      	b.n	80096da <_free_r+0x1e>
 80096fe:	461a      	mov	r2, r3
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b10b      	cbz	r3, 8009708 <_free_r+0x4c>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d9fa      	bls.n	80096fe <_free_r+0x42>
 8009708:	6811      	ldr	r1, [r2, #0]
 800970a:	1850      	adds	r0, r2, r1
 800970c:	42a0      	cmp	r0, r4
 800970e:	d10b      	bne.n	8009728 <_free_r+0x6c>
 8009710:	6820      	ldr	r0, [r4, #0]
 8009712:	4401      	add	r1, r0
 8009714:	1850      	adds	r0, r2, r1
 8009716:	4283      	cmp	r3, r0
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	d1e0      	bne.n	80096de <_free_r+0x22>
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	4408      	add	r0, r1
 8009722:	6010      	str	r0, [r2, #0]
 8009724:	6053      	str	r3, [r2, #4]
 8009726:	e7da      	b.n	80096de <_free_r+0x22>
 8009728:	d902      	bls.n	8009730 <_free_r+0x74>
 800972a:	230c      	movs	r3, #12
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	e7d6      	b.n	80096de <_free_r+0x22>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	1821      	adds	r1, r4, r0
 8009734:	428b      	cmp	r3, r1
 8009736:	bf01      	itttt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	1809      	addeq	r1, r1, r0
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	6054      	str	r4, [r2, #4]
 8009744:	e7cb      	b.n	80096de <_free_r+0x22>
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	2000168c 	.word	0x2000168c

0800974c <malloc>:
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <malloc+0xc>)
 800974e:	4601      	mov	r1, r0
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f000 b823 	b.w	800979c <_malloc_r>
 8009756:	bf00      	nop
 8009758:	20000218 	.word	0x20000218

0800975c <sbrk_aligned>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	4e0e      	ldr	r6, [pc, #56]	; (8009798 <sbrk_aligned+0x3c>)
 8009760:	460c      	mov	r4, r1
 8009762:	6831      	ldr	r1, [r6, #0]
 8009764:	4605      	mov	r5, r0
 8009766:	b911      	cbnz	r1, 800976e <sbrk_aligned+0x12>
 8009768:	f000 fa2a 	bl	8009bc0 <_sbrk_r>
 800976c:	6030      	str	r0, [r6, #0]
 800976e:	4621      	mov	r1, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f000 fa25 	bl	8009bc0 <_sbrk_r>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d00a      	beq.n	8009790 <sbrk_aligned+0x34>
 800977a:	1cc4      	adds	r4, r0, #3
 800977c:	f024 0403 	bic.w	r4, r4, #3
 8009780:	42a0      	cmp	r0, r4
 8009782:	d007      	beq.n	8009794 <sbrk_aligned+0x38>
 8009784:	1a21      	subs	r1, r4, r0
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fa1a 	bl	8009bc0 <_sbrk_r>
 800978c:	3001      	adds	r0, #1
 800978e:	d101      	bne.n	8009794 <sbrk_aligned+0x38>
 8009790:	f04f 34ff 	mov.w	r4, #4294967295
 8009794:	4620      	mov	r0, r4
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	20001690 	.word	0x20001690

0800979c <_malloc_r>:
 800979c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a0:	1ccd      	adds	r5, r1, #3
 80097a2:	f025 0503 	bic.w	r5, r5, #3
 80097a6:	3508      	adds	r5, #8
 80097a8:	2d0c      	cmp	r5, #12
 80097aa:	bf38      	it	cc
 80097ac:	250c      	movcc	r5, #12
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	4607      	mov	r7, r0
 80097b2:	db01      	blt.n	80097b8 <_malloc_r+0x1c>
 80097b4:	42a9      	cmp	r1, r5
 80097b6:	d905      	bls.n	80097c4 <_malloc_r+0x28>
 80097b8:	230c      	movs	r3, #12
 80097ba:	2600      	movs	r6, #0
 80097bc:	603b      	str	r3, [r7, #0]
 80097be:	4630      	mov	r0, r6
 80097c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009898 <_malloc_r+0xfc>
 80097c8:	f000 f868 	bl	800989c <__malloc_lock>
 80097cc:	f8d8 3000 	ldr.w	r3, [r8]
 80097d0:	461c      	mov	r4, r3
 80097d2:	bb5c      	cbnz	r4, 800982c <_malloc_r+0x90>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4638      	mov	r0, r7
 80097d8:	f7ff ffc0 	bl	800975c <sbrk_aligned>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	4604      	mov	r4, r0
 80097e0:	d155      	bne.n	800988e <_malloc_r+0xf2>
 80097e2:	f8d8 4000 	ldr.w	r4, [r8]
 80097e6:	4626      	mov	r6, r4
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	d145      	bne.n	8009878 <_malloc_r+0xdc>
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	d048      	beq.n	8009882 <_malloc_r+0xe6>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	4631      	mov	r1, r6
 80097f4:	4638      	mov	r0, r7
 80097f6:	eb04 0903 	add.w	r9, r4, r3
 80097fa:	f000 f9e1 	bl	8009bc0 <_sbrk_r>
 80097fe:	4581      	cmp	r9, r0
 8009800:	d13f      	bne.n	8009882 <_malloc_r+0xe6>
 8009802:	6821      	ldr	r1, [r4, #0]
 8009804:	4638      	mov	r0, r7
 8009806:	1a6d      	subs	r5, r5, r1
 8009808:	4629      	mov	r1, r5
 800980a:	f7ff ffa7 	bl	800975c <sbrk_aligned>
 800980e:	3001      	adds	r0, #1
 8009810:	d037      	beq.n	8009882 <_malloc_r+0xe6>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	442b      	add	r3, r5
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	f8d8 3000 	ldr.w	r3, [r8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d038      	beq.n	8009892 <_malloc_r+0xf6>
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	42a2      	cmp	r2, r4
 8009824:	d12b      	bne.n	800987e <_malloc_r+0xe2>
 8009826:	2200      	movs	r2, #0
 8009828:	605a      	str	r2, [r3, #4]
 800982a:	e00f      	b.n	800984c <_malloc_r+0xb0>
 800982c:	6822      	ldr	r2, [r4, #0]
 800982e:	1b52      	subs	r2, r2, r5
 8009830:	d41f      	bmi.n	8009872 <_malloc_r+0xd6>
 8009832:	2a0b      	cmp	r2, #11
 8009834:	d917      	bls.n	8009866 <_malloc_r+0xca>
 8009836:	1961      	adds	r1, r4, r5
 8009838:	42a3      	cmp	r3, r4
 800983a:	6025      	str	r5, [r4, #0]
 800983c:	bf18      	it	ne
 800983e:	6059      	strne	r1, [r3, #4]
 8009840:	6863      	ldr	r3, [r4, #4]
 8009842:	bf08      	it	eq
 8009844:	f8c8 1000 	streq.w	r1, [r8]
 8009848:	5162      	str	r2, [r4, r5]
 800984a:	604b      	str	r3, [r1, #4]
 800984c:	4638      	mov	r0, r7
 800984e:	f104 060b 	add.w	r6, r4, #11
 8009852:	f000 f829 	bl	80098a8 <__malloc_unlock>
 8009856:	f026 0607 	bic.w	r6, r6, #7
 800985a:	1d23      	adds	r3, r4, #4
 800985c:	1af2      	subs	r2, r6, r3
 800985e:	d0ae      	beq.n	80097be <_malloc_r+0x22>
 8009860:	1b9b      	subs	r3, r3, r6
 8009862:	50a3      	str	r3, [r4, r2]
 8009864:	e7ab      	b.n	80097be <_malloc_r+0x22>
 8009866:	42a3      	cmp	r3, r4
 8009868:	6862      	ldr	r2, [r4, #4]
 800986a:	d1dd      	bne.n	8009828 <_malloc_r+0x8c>
 800986c:	f8c8 2000 	str.w	r2, [r8]
 8009870:	e7ec      	b.n	800984c <_malloc_r+0xb0>
 8009872:	4623      	mov	r3, r4
 8009874:	6864      	ldr	r4, [r4, #4]
 8009876:	e7ac      	b.n	80097d2 <_malloc_r+0x36>
 8009878:	4634      	mov	r4, r6
 800987a:	6876      	ldr	r6, [r6, #4]
 800987c:	e7b4      	b.n	80097e8 <_malloc_r+0x4c>
 800987e:	4613      	mov	r3, r2
 8009880:	e7cc      	b.n	800981c <_malloc_r+0x80>
 8009882:	230c      	movs	r3, #12
 8009884:	4638      	mov	r0, r7
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	f000 f80e 	bl	80098a8 <__malloc_unlock>
 800988c:	e797      	b.n	80097be <_malloc_r+0x22>
 800988e:	6025      	str	r5, [r4, #0]
 8009890:	e7dc      	b.n	800984c <_malloc_r+0xb0>
 8009892:	605b      	str	r3, [r3, #4]
 8009894:	deff      	udf	#255	; 0xff
 8009896:	bf00      	nop
 8009898:	2000168c 	.word	0x2000168c

0800989c <__malloc_lock>:
 800989c:	4801      	ldr	r0, [pc, #4]	; (80098a4 <__malloc_lock+0x8>)
 800989e:	f7ff bede 	b.w	800965e <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	20001688 	.word	0x20001688

080098a8 <__malloc_unlock>:
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <__malloc_unlock+0x8>)
 80098aa:	f7ff bed9 	b.w	8009660 <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	20001688 	.word	0x20001688

080098b4 <__sflush_r>:
 80098b4:	898a      	ldrh	r2, [r1, #12]
 80098b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b8:	4605      	mov	r5, r0
 80098ba:	0710      	lsls	r0, r2, #28
 80098bc:	460c      	mov	r4, r1
 80098be:	d457      	bmi.n	8009970 <__sflush_r+0xbc>
 80098c0:	684b      	ldr	r3, [r1, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dc04      	bgt.n	80098d0 <__sflush_r+0x1c>
 80098c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc01      	bgt.n	80098d0 <__sflush_r+0x1c>
 80098cc:	2000      	movs	r0, #0
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d2:	2e00      	cmp	r6, #0
 80098d4:	d0fa      	beq.n	80098cc <__sflush_r+0x18>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098dc:	682f      	ldr	r7, [r5, #0]
 80098de:	6a21      	ldr	r1, [r4, #32]
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	d032      	beq.n	800994a <__sflush_r+0x96>
 80098e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	075a      	lsls	r2, r3, #29
 80098ea:	d505      	bpl.n	80098f8 <__sflush_r+0x44>
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	1ac0      	subs	r0, r0, r3
 80098f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f2:	b10b      	cbz	r3, 80098f8 <__sflush_r+0x44>
 80098f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f6:	1ac0      	subs	r0, r0, r3
 80098f8:	2300      	movs	r3, #0
 80098fa:	4602      	mov	r2, r0
 80098fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fe:	4628      	mov	r0, r5
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	47b0      	blx	r6
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	d106      	bne.n	8009918 <__sflush_r+0x64>
 800990a:	6829      	ldr	r1, [r5, #0]
 800990c:	291d      	cmp	r1, #29
 800990e:	d82b      	bhi.n	8009968 <__sflush_r+0xb4>
 8009910:	4a28      	ldr	r2, [pc, #160]	; (80099b4 <__sflush_r+0x100>)
 8009912:	410a      	asrs	r2, r1
 8009914:	07d6      	lsls	r6, r2, #31
 8009916:	d427      	bmi.n	8009968 <__sflush_r+0xb4>
 8009918:	2200      	movs	r2, #0
 800991a:	6062      	str	r2, [r4, #4]
 800991c:	6922      	ldr	r2, [r4, #16]
 800991e:	04d9      	lsls	r1, r3, #19
 8009920:	6022      	str	r2, [r4, #0]
 8009922:	d504      	bpl.n	800992e <__sflush_r+0x7a>
 8009924:	1c42      	adds	r2, r0, #1
 8009926:	d101      	bne.n	800992c <__sflush_r+0x78>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b903      	cbnz	r3, 800992e <__sflush_r+0x7a>
 800992c:	6560      	str	r0, [r4, #84]	; 0x54
 800992e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009930:	602f      	str	r7, [r5, #0]
 8009932:	2900      	cmp	r1, #0
 8009934:	d0ca      	beq.n	80098cc <__sflush_r+0x18>
 8009936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800993a:	4299      	cmp	r1, r3
 800993c:	d002      	beq.n	8009944 <__sflush_r+0x90>
 800993e:	4628      	mov	r0, r5
 8009940:	f7ff febc 	bl	80096bc <_free_r>
 8009944:	2000      	movs	r0, #0
 8009946:	6360      	str	r0, [r4, #52]	; 0x34
 8009948:	e7c1      	b.n	80098ce <__sflush_r+0x1a>
 800994a:	2301      	movs	r3, #1
 800994c:	4628      	mov	r0, r5
 800994e:	47b0      	blx	r6
 8009950:	1c41      	adds	r1, r0, #1
 8009952:	d1c8      	bne.n	80098e6 <__sflush_r+0x32>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0c5      	beq.n	80098e6 <__sflush_r+0x32>
 800995a:	2b1d      	cmp	r3, #29
 800995c:	d001      	beq.n	8009962 <__sflush_r+0xae>
 800995e:	2b16      	cmp	r3, #22
 8009960:	d101      	bne.n	8009966 <__sflush_r+0xb2>
 8009962:	602f      	str	r7, [r5, #0]
 8009964:	e7b2      	b.n	80098cc <__sflush_r+0x18>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	e7ae      	b.n	80098ce <__sflush_r+0x1a>
 8009970:	690f      	ldr	r7, [r1, #16]
 8009972:	2f00      	cmp	r7, #0
 8009974:	d0aa      	beq.n	80098cc <__sflush_r+0x18>
 8009976:	0793      	lsls	r3, r2, #30
 8009978:	bf18      	it	ne
 800997a:	2300      	movne	r3, #0
 800997c:	680e      	ldr	r6, [r1, #0]
 800997e:	bf08      	it	eq
 8009980:	694b      	ldreq	r3, [r1, #20]
 8009982:	1bf6      	subs	r6, r6, r7
 8009984:	600f      	str	r7, [r1, #0]
 8009986:	608b      	str	r3, [r1, #8]
 8009988:	2e00      	cmp	r6, #0
 800998a:	dd9f      	ble.n	80098cc <__sflush_r+0x18>
 800998c:	4633      	mov	r3, r6
 800998e:	463a      	mov	r2, r7
 8009990:	4628      	mov	r0, r5
 8009992:	6a21      	ldr	r1, [r4, #32]
 8009994:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009998:	47e0      	blx	ip
 800999a:	2800      	cmp	r0, #0
 800999c:	dc06      	bgt.n	80099ac <__sflush_r+0xf8>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e790      	b.n	80098ce <__sflush_r+0x1a>
 80099ac:	4407      	add	r7, r0
 80099ae:	1a36      	subs	r6, r6, r0
 80099b0:	e7ea      	b.n	8009988 <__sflush_r+0xd4>
 80099b2:	bf00      	nop
 80099b4:	dfbffffe 	.word	0xdfbffffe

080099b8 <_fflush_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	690b      	ldr	r3, [r1, #16]
 80099bc:	4605      	mov	r5, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	b913      	cbnz	r3, 80099c8 <_fflush_r+0x10>
 80099c2:	2500      	movs	r5, #0
 80099c4:	4628      	mov	r0, r5
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	b118      	cbz	r0, 80099d2 <_fflush_r+0x1a>
 80099ca:	6a03      	ldr	r3, [r0, #32]
 80099cc:	b90b      	cbnz	r3, 80099d2 <_fflush_r+0x1a>
 80099ce:	f7ff fcd9 	bl	8009384 <__sinit>
 80099d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0f3      	beq.n	80099c2 <_fflush_r+0xa>
 80099da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099dc:	07d0      	lsls	r0, r2, #31
 80099de:	d404      	bmi.n	80099ea <_fflush_r+0x32>
 80099e0:	0599      	lsls	r1, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_fflush_r+0x32>
 80099e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e6:	f7ff fe3a 	bl	800965e <__retarget_lock_acquire_recursive>
 80099ea:	4628      	mov	r0, r5
 80099ec:	4621      	mov	r1, r4
 80099ee:	f7ff ff61 	bl	80098b4 <__sflush_r>
 80099f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099f4:	4605      	mov	r5, r0
 80099f6:	07da      	lsls	r2, r3, #31
 80099f8:	d4e4      	bmi.n	80099c4 <_fflush_r+0xc>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	059b      	lsls	r3, r3, #22
 80099fe:	d4e1      	bmi.n	80099c4 <_fflush_r+0xc>
 8009a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a02:	f7ff fe2d 	bl	8009660 <__retarget_lock_release_recursive>
 8009a06:	e7dd      	b.n	80099c4 <_fflush_r+0xc>

08009a08 <fiprintf>:
 8009a08:	b40e      	push	{r1, r2, r3}
 8009a0a:	b503      	push	{r0, r1, lr}
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	ab03      	add	r3, sp, #12
 8009a10:	4805      	ldr	r0, [pc, #20]	; (8009a28 <fiprintf+0x20>)
 8009a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a16:	6800      	ldr	r0, [r0, #0]
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f000 f90f 	bl	8009c3c <_vfiprintf_r>
 8009a1e:	b002      	add	sp, #8
 8009a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a24:	b003      	add	sp, #12
 8009a26:	4770      	bx	lr
 8009a28:	20000218 	.word	0x20000218

08009a2c <_putc_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460d      	mov	r5, r1
 8009a30:	4614      	mov	r4, r2
 8009a32:	4606      	mov	r6, r0
 8009a34:	b118      	cbz	r0, 8009a3e <_putc_r+0x12>
 8009a36:	6a03      	ldr	r3, [r0, #32]
 8009a38:	b90b      	cbnz	r3, 8009a3e <_putc_r+0x12>
 8009a3a:	f7ff fca3 	bl	8009384 <__sinit>
 8009a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a40:	07d8      	lsls	r0, r3, #31
 8009a42:	d405      	bmi.n	8009a50 <_putc_r+0x24>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	0599      	lsls	r1, r3, #22
 8009a48:	d402      	bmi.n	8009a50 <_putc_r+0x24>
 8009a4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4c:	f7ff fe07 	bl	800965e <__retarget_lock_acquire_recursive>
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	60a3      	str	r3, [r4, #8]
 8009a58:	da05      	bge.n	8009a66 <_putc_r+0x3a>
 8009a5a:	69a2      	ldr	r2, [r4, #24]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	db12      	blt.n	8009a86 <_putc_r+0x5a>
 8009a60:	b2eb      	uxtb	r3, r5
 8009a62:	2b0a      	cmp	r3, #10
 8009a64:	d00f      	beq.n	8009a86 <_putc_r+0x5a>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	701d      	strb	r5, [r3, #0]
 8009a6e:	b2ed      	uxtb	r5, r5
 8009a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a72:	07da      	lsls	r2, r3, #31
 8009a74:	d405      	bmi.n	8009a82 <_putc_r+0x56>
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	059b      	lsls	r3, r3, #22
 8009a7a:	d402      	bmi.n	8009a82 <_putc_r+0x56>
 8009a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7e:	f7ff fdef 	bl	8009660 <__retarget_lock_release_recursive>
 8009a82:	4628      	mov	r0, r5
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	4629      	mov	r1, r5
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f000 f802 	bl	8009a94 <__swbuf_r>
 8009a90:	4605      	mov	r5, r0
 8009a92:	e7ed      	b.n	8009a70 <_putc_r+0x44>

08009a94 <__swbuf_r>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	460e      	mov	r6, r1
 8009a98:	4614      	mov	r4, r2
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b118      	cbz	r0, 8009aa6 <__swbuf_r+0x12>
 8009a9e:	6a03      	ldr	r3, [r0, #32]
 8009aa0:	b90b      	cbnz	r3, 8009aa6 <__swbuf_r+0x12>
 8009aa2:	f7ff fc6f 	bl	8009384 <__sinit>
 8009aa6:	69a3      	ldr	r3, [r4, #24]
 8009aa8:	60a3      	str	r3, [r4, #8]
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	071a      	lsls	r2, r3, #28
 8009aae:	d525      	bpl.n	8009afc <__swbuf_r+0x68>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	b31b      	cbz	r3, 8009afc <__swbuf_r+0x68>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	b2f6      	uxtb	r6, r6
 8009aba:	1a98      	subs	r0, r3, r2
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	4637      	mov	r7, r6
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	dc04      	bgt.n	8009ace <__swbuf_r+0x3a>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f7ff ff76 	bl	80099b8 <_fflush_r>
 8009acc:	b9e0      	cbnz	r0, 8009b08 <__swbuf_r+0x74>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	60a3      	str	r3, [r4, #8]
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	6022      	str	r2, [r4, #0]
 8009ada:	701e      	strb	r6, [r3, #0]
 8009adc:	6962      	ldr	r2, [r4, #20]
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d004      	beq.n	8009aee <__swbuf_r+0x5a>
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	07db      	lsls	r3, r3, #31
 8009ae8:	d506      	bpl.n	8009af8 <__swbuf_r+0x64>
 8009aea:	2e0a      	cmp	r6, #10
 8009aec:	d104      	bne.n	8009af8 <__swbuf_r+0x64>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4628      	mov	r0, r5
 8009af2:	f7ff ff61 	bl	80099b8 <_fflush_r>
 8009af6:	b938      	cbnz	r0, 8009b08 <__swbuf_r+0x74>
 8009af8:	4638      	mov	r0, r7
 8009afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009afc:	4621      	mov	r1, r4
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 f806 	bl	8009b10 <__swsetup_r>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d0d5      	beq.n	8009ab4 <__swbuf_r+0x20>
 8009b08:	f04f 37ff 	mov.w	r7, #4294967295
 8009b0c:	e7f4      	b.n	8009af8 <__swbuf_r+0x64>
	...

08009b10 <__swsetup_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <__swsetup_r+0xac>)
 8009b14:	4605      	mov	r5, r0
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	460c      	mov	r4, r1
 8009b1a:	b118      	cbz	r0, 8009b24 <__swsetup_r+0x14>
 8009b1c:	6a03      	ldr	r3, [r0, #32]
 8009b1e:	b90b      	cbnz	r3, 8009b24 <__swsetup_r+0x14>
 8009b20:	f7ff fc30 	bl	8009384 <__sinit>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b2a:	0718      	lsls	r0, r3, #28
 8009b2c:	d422      	bmi.n	8009b74 <__swsetup_r+0x64>
 8009b2e:	06d9      	lsls	r1, r3, #27
 8009b30:	d407      	bmi.n	8009b42 <__swsetup_r+0x32>
 8009b32:	2309      	movs	r3, #9
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	e034      	b.n	8009bac <__swsetup_r+0x9c>
 8009b42:	0758      	lsls	r0, r3, #29
 8009b44:	d512      	bpl.n	8009b6c <__swsetup_r+0x5c>
 8009b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b48:	b141      	cbz	r1, 8009b5c <__swsetup_r+0x4c>
 8009b4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b4e:	4299      	cmp	r1, r3
 8009b50:	d002      	beq.n	8009b58 <__swsetup_r+0x48>
 8009b52:	4628      	mov	r0, r5
 8009b54:	f7ff fdb2 	bl	80096bc <_free_r>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	2300      	movs	r3, #0
 8009b66:	6063      	str	r3, [r4, #4]
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f043 0308 	orr.w	r3, r3, #8
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	b94b      	cbnz	r3, 8009b8c <__swsetup_r+0x7c>
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b82:	d003      	beq.n	8009b8c <__swsetup_r+0x7c>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 fb2b 	bl	800a1e2 <__smakebuf_r>
 8009b8c:	89a0      	ldrh	r0, [r4, #12]
 8009b8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b92:	f010 0301 	ands.w	r3, r0, #1
 8009b96:	d00a      	beq.n	8009bae <__swsetup_r+0x9e>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60a3      	str	r3, [r4, #8]
 8009b9c:	6963      	ldr	r3, [r4, #20]
 8009b9e:	425b      	negs	r3, r3
 8009ba0:	61a3      	str	r3, [r4, #24]
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	b943      	cbnz	r3, 8009bb8 <__swsetup_r+0xa8>
 8009ba6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009baa:	d1c4      	bne.n	8009b36 <__swsetup_r+0x26>
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
 8009bae:	0781      	lsls	r1, r0, #30
 8009bb0:	bf58      	it	pl
 8009bb2:	6963      	ldrpl	r3, [r4, #20]
 8009bb4:	60a3      	str	r3, [r4, #8]
 8009bb6:	e7f4      	b.n	8009ba2 <__swsetup_r+0x92>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e7f7      	b.n	8009bac <__swsetup_r+0x9c>
 8009bbc:	20000218 	.word	0x20000218

08009bc0 <_sbrk_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4d05      	ldr	r5, [pc, #20]	; (8009bdc <_sbrk_r+0x1c>)
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	4608      	mov	r0, r1
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	f7f6 fd82 	bl	80006d4 <_sbrk>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_sbrk_r+0x1a>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_sbrk_r+0x1a>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20001684 	.word	0x20001684

08009be0 <abort>:
 8009be0:	2006      	movs	r0, #6
 8009be2:	b508      	push	{r3, lr}
 8009be4:	f000 fb62 	bl	800a2ac <raise>
 8009be8:	2001      	movs	r0, #1
 8009bea:	f000 fe55 	bl	800a898 <_exit>

08009bee <__sfputc_r>:
 8009bee:	6893      	ldr	r3, [r2, #8]
 8009bf0:	b410      	push	{r4}
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	6093      	str	r3, [r2, #8]
 8009bf8:	da07      	bge.n	8009c0a <__sfputc_r+0x1c>
 8009bfa:	6994      	ldr	r4, [r2, #24]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	db01      	blt.n	8009c04 <__sfputc_r+0x16>
 8009c00:	290a      	cmp	r1, #10
 8009c02:	d102      	bne.n	8009c0a <__sfputc_r+0x1c>
 8009c04:	bc10      	pop	{r4}
 8009c06:	f7ff bf45 	b.w	8009a94 <__swbuf_r>
 8009c0a:	6813      	ldr	r3, [r2, #0]
 8009c0c:	1c58      	adds	r0, r3, #1
 8009c0e:	6010      	str	r0, [r2, #0]
 8009c10:	7019      	strb	r1, [r3, #0]
 8009c12:	4608      	mov	r0, r1
 8009c14:	bc10      	pop	{r4}
 8009c16:	4770      	bx	lr

08009c18 <__sfputs_r>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	4614      	mov	r4, r2
 8009c20:	18d5      	adds	r5, r2, r3
 8009c22:	42ac      	cmp	r4, r5
 8009c24:	d101      	bne.n	8009c2a <__sfputs_r+0x12>
 8009c26:	2000      	movs	r0, #0
 8009c28:	e007      	b.n	8009c3a <__sfputs_r+0x22>
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c32:	f7ff ffdc 	bl	8009bee <__sfputc_r>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d1f3      	bne.n	8009c22 <__sfputs_r+0xa>
 8009c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c3c <_vfiprintf_r>:
 8009c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	460d      	mov	r5, r1
 8009c42:	4614      	mov	r4, r2
 8009c44:	4698      	mov	r8, r3
 8009c46:	4606      	mov	r6, r0
 8009c48:	b09d      	sub	sp, #116	; 0x74
 8009c4a:	b118      	cbz	r0, 8009c54 <_vfiprintf_r+0x18>
 8009c4c:	6a03      	ldr	r3, [r0, #32]
 8009c4e:	b90b      	cbnz	r3, 8009c54 <_vfiprintf_r+0x18>
 8009c50:	f7ff fb98 	bl	8009384 <__sinit>
 8009c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c56:	07d9      	lsls	r1, r3, #31
 8009c58:	d405      	bmi.n	8009c66 <_vfiprintf_r+0x2a>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d402      	bmi.n	8009c66 <_vfiprintf_r+0x2a>
 8009c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c62:	f7ff fcfc 	bl	800965e <__retarget_lock_acquire_recursive>
 8009c66:	89ab      	ldrh	r3, [r5, #12]
 8009c68:	071b      	lsls	r3, r3, #28
 8009c6a:	d501      	bpl.n	8009c70 <_vfiprintf_r+0x34>
 8009c6c:	692b      	ldr	r3, [r5, #16]
 8009c6e:	b99b      	cbnz	r3, 8009c98 <_vfiprintf_r+0x5c>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ff4c 	bl	8009b10 <__swsetup_r>
 8009c78:	b170      	cbz	r0, 8009c98 <_vfiprintf_r+0x5c>
 8009c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7c:	07dc      	lsls	r4, r3, #31
 8009c7e:	d504      	bpl.n	8009c8a <_vfiprintf_r+0x4e>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	b01d      	add	sp, #116	; 0x74
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	89ab      	ldrh	r3, [r5, #12]
 8009c8c:	0598      	lsls	r0, r3, #22
 8009c8e:	d4f7      	bmi.n	8009c80 <_vfiprintf_r+0x44>
 8009c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c92:	f7ff fce5 	bl	8009660 <__retarget_lock_release_recursive>
 8009c96:	e7f3      	b.n	8009c80 <_vfiprintf_r+0x44>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9c:	2320      	movs	r3, #32
 8009c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ca2:	2330      	movs	r3, #48	; 0x30
 8009ca4:	f04f 0901 	mov.w	r9, #1
 8009ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009e5c <_vfiprintf_r+0x220>
 8009cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	469a      	mov	sl, r3
 8009cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cbc:	b10a      	cbz	r2, 8009cc2 <_vfiprintf_r+0x86>
 8009cbe:	2a25      	cmp	r2, #37	; 0x25
 8009cc0:	d1f9      	bne.n	8009cb6 <_vfiprintf_r+0x7a>
 8009cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cc6:	d00b      	beq.n	8009ce0 <_vfiprintf_r+0xa4>
 8009cc8:	465b      	mov	r3, fp
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff ffa2 	bl	8009c18 <__sfputs_r>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f000 80a9 	beq.w	8009e2c <_vfiprintf_r+0x1f0>
 8009cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cdc:	445a      	add	r2, fp
 8009cde:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 80a1 	beq.w	8009e2c <_vfiprintf_r+0x1f0>
 8009cea:	2300      	movs	r3, #0
 8009cec:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf4:	f10a 0a01 	add.w	sl, sl, #1
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d00:	931a      	str	r3, [sp, #104]	; 0x68
 8009d02:	4654      	mov	r4, sl
 8009d04:	2205      	movs	r2, #5
 8009d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0a:	4854      	ldr	r0, [pc, #336]	; (8009e5c <_vfiprintf_r+0x220>)
 8009d0c:	f000 fb0c 	bl	800a328 <memchr>
 8009d10:	9a04      	ldr	r2, [sp, #16]
 8009d12:	b9d8      	cbnz	r0, 8009d4c <_vfiprintf_r+0x110>
 8009d14:	06d1      	lsls	r1, r2, #27
 8009d16:	bf44      	itt	mi
 8009d18:	2320      	movmi	r3, #32
 8009d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1e:	0713      	lsls	r3, r2, #28
 8009d20:	bf44      	itt	mi
 8009d22:	232b      	movmi	r3, #43	; 0x2b
 8009d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d28:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2e:	d015      	beq.n	8009d5c <_vfiprintf_r+0x120>
 8009d30:	4654      	mov	r4, sl
 8009d32:	2000      	movs	r0, #0
 8009d34:	f04f 0c0a 	mov.w	ip, #10
 8009d38:	9a07      	ldr	r2, [sp, #28]
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d40:	3b30      	subs	r3, #48	; 0x30
 8009d42:	2b09      	cmp	r3, #9
 8009d44:	d94d      	bls.n	8009de2 <_vfiprintf_r+0x1a6>
 8009d46:	b1b0      	cbz	r0, 8009d76 <_vfiprintf_r+0x13a>
 8009d48:	9207      	str	r2, [sp, #28]
 8009d4a:	e014      	b.n	8009d76 <_vfiprintf_r+0x13a>
 8009d4c:	eba0 0308 	sub.w	r3, r0, r8
 8009d50:	fa09 f303 	lsl.w	r3, r9, r3
 8009d54:	4313      	orrs	r3, r2
 8009d56:	46a2      	mov	sl, r4
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	e7d2      	b.n	8009d02 <_vfiprintf_r+0xc6>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	1d19      	adds	r1, r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	9103      	str	r1, [sp, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfbb      	ittet	lt
 8009d68:	425b      	neglt	r3, r3
 8009d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d6e:	9307      	strge	r3, [sp, #28]
 8009d70:	9307      	strlt	r3, [sp, #28]
 8009d72:	bfb8      	it	lt
 8009d74:	9204      	strlt	r2, [sp, #16]
 8009d76:	7823      	ldrb	r3, [r4, #0]
 8009d78:	2b2e      	cmp	r3, #46	; 0x2e
 8009d7a:	d10c      	bne.n	8009d96 <_vfiprintf_r+0x15a>
 8009d7c:	7863      	ldrb	r3, [r4, #1]
 8009d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d80:	d134      	bne.n	8009dec <_vfiprintf_r+0x1b0>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	3402      	adds	r4, #2
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9203      	str	r2, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfb8      	it	lt
 8009d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e60 <_vfiprintf_r+0x224>
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	7821      	ldrb	r1, [r4, #0]
 8009da0:	f000 fac2 	bl	800a328 <memchr>
 8009da4:	b138      	cbz	r0, 8009db6 <_vfiprintf_r+0x17a>
 8009da6:	2240      	movs	r2, #64	; 0x40
 8009da8:	9b04      	ldr	r3, [sp, #16]
 8009daa:	eba0 000a 	sub.w	r0, r0, sl
 8009dae:	4082      	lsls	r2, r0
 8009db0:	4313      	orrs	r3, r2
 8009db2:	3401      	adds	r4, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dba:	2206      	movs	r2, #6
 8009dbc:	4829      	ldr	r0, [pc, #164]	; (8009e64 <_vfiprintf_r+0x228>)
 8009dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dc2:	f000 fab1 	bl	800a328 <memchr>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d03f      	beq.n	8009e4a <_vfiprintf_r+0x20e>
 8009dca:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <_vfiprintf_r+0x22c>)
 8009dcc:	bb1b      	cbnz	r3, 8009e16 <_vfiprintf_r+0x1da>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	3307      	adds	r3, #7
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	443b      	add	r3, r7
 8009dde:	9309      	str	r3, [sp, #36]	; 0x24
 8009de0:	e768      	b.n	8009cb4 <_vfiprintf_r+0x78>
 8009de2:	460c      	mov	r4, r1
 8009de4:	2001      	movs	r0, #1
 8009de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dea:	e7a6      	b.n	8009d3a <_vfiprintf_r+0xfe>
 8009dec:	2300      	movs	r3, #0
 8009dee:	f04f 0c0a 	mov.w	ip, #10
 8009df2:	4619      	mov	r1, r3
 8009df4:	3401      	adds	r4, #1
 8009df6:	9305      	str	r3, [sp, #20]
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfe:	3a30      	subs	r2, #48	; 0x30
 8009e00:	2a09      	cmp	r2, #9
 8009e02:	d903      	bls.n	8009e0c <_vfiprintf_r+0x1d0>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0c6      	beq.n	8009d96 <_vfiprintf_r+0x15a>
 8009e08:	9105      	str	r1, [sp, #20]
 8009e0a:	e7c4      	b.n	8009d96 <_vfiprintf_r+0x15a>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	2301      	movs	r3, #1
 8009e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e14:	e7f0      	b.n	8009df8 <_vfiprintf_r+0x1bc>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <_vfiprintf_r+0x230>)
 8009e20:	a904      	add	r1, sp, #16
 8009e22:	f3af 8000 	nop.w
 8009e26:	4607      	mov	r7, r0
 8009e28:	1c78      	adds	r0, r7, #1
 8009e2a:	d1d6      	bne.n	8009dda <_vfiprintf_r+0x19e>
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x202>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x202>
 8009e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e3a:	f7ff fc11 	bl	8009660 <__retarget_lock_release_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	065b      	lsls	r3, r3, #25
 8009e42:	f53f af1d 	bmi.w	8009c80 <_vfiprintf_r+0x44>
 8009e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e48:	e71c      	b.n	8009c84 <_vfiprintf_r+0x48>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4630      	mov	r0, r6
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <_vfiprintf_r+0x230>)
 8009e54:	a904      	add	r1, sp, #16
 8009e56:	f000 f87d 	bl	8009f54 <_printf_i>
 8009e5a:	e7e4      	b.n	8009e26 <_vfiprintf_r+0x1ea>
 8009e5c:	0800aec1 	.word	0x0800aec1
 8009e60:	0800aec7 	.word	0x0800aec7
 8009e64:	0800aecb 	.word	0x0800aecb
 8009e68:	00000000 	.word	0x00000000
 8009e6c:	08009c19 	.word	0x08009c19

08009e70 <_printf_common>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	4616      	mov	r6, r2
 8009e76:	4699      	mov	r9, r3
 8009e78:	688a      	ldr	r2, [r1, #8]
 8009e7a:	690b      	ldr	r3, [r1, #16]
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	bfb8      	it	lt
 8009e82:	4613      	movlt	r3, r2
 8009e84:	6033      	str	r3, [r6, #0]
 8009e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e90:	b10a      	cbz	r2, 8009e96 <_printf_common+0x26>
 8009e92:	3301      	adds	r3, #1
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	0699      	lsls	r1, r3, #26
 8009e9a:	bf42      	ittt	mi
 8009e9c:	6833      	ldrmi	r3, [r6, #0]
 8009e9e:	3302      	addmi	r3, #2
 8009ea0:	6033      	strmi	r3, [r6, #0]
 8009ea2:	6825      	ldr	r5, [r4, #0]
 8009ea4:	f015 0506 	ands.w	r5, r5, #6
 8009ea8:	d106      	bne.n	8009eb8 <_printf_common+0x48>
 8009eaa:	f104 0a19 	add.w	sl, r4, #25
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	6832      	ldr	r2, [r6, #0]
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dc2b      	bgt.n	8009f10 <_printf_common+0xa0>
 8009eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ebc:	1e13      	subs	r3, r2, #0
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	bf18      	it	ne
 8009ec2:	2301      	movne	r3, #1
 8009ec4:	0692      	lsls	r2, r2, #26
 8009ec6:	d430      	bmi.n	8009f2a <_printf_common+0xba>
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ed0:	47c0      	blx	r8
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d023      	beq.n	8009f1e <_printf_common+0xae>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	6922      	ldr	r2, [r4, #16]
 8009eda:	f003 0306 	and.w	r3, r3, #6
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	bf14      	ite	ne
 8009ee2:	2500      	movne	r5, #0
 8009ee4:	6833      	ldreq	r3, [r6, #0]
 8009ee6:	f04f 0600 	mov.w	r6, #0
 8009eea:	bf08      	it	eq
 8009eec:	68e5      	ldreq	r5, [r4, #12]
 8009eee:	f104 041a 	add.w	r4, r4, #26
 8009ef2:	bf08      	it	eq
 8009ef4:	1aed      	subeq	r5, r5, r3
 8009ef6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009efa:	bf08      	it	eq
 8009efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f00:	4293      	cmp	r3, r2
 8009f02:	bfc4      	itt	gt
 8009f04:	1a9b      	subgt	r3, r3, r2
 8009f06:	18ed      	addgt	r5, r5, r3
 8009f08:	42b5      	cmp	r5, r6
 8009f0a:	d11a      	bne.n	8009f42 <_printf_common+0xd2>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e008      	b.n	8009f22 <_printf_common+0xb2>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4652      	mov	r2, sl
 8009f14:	4649      	mov	r1, r9
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c0      	blx	r8
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d103      	bne.n	8009f26 <_printf_common+0xb6>
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f26:	3501      	adds	r5, #1
 8009f28:	e7c1      	b.n	8009eae <_printf_common+0x3e>
 8009f2a:	2030      	movs	r0, #48	; 0x30
 8009f2c:	18e1      	adds	r1, r4, r3
 8009f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f38:	4422      	add	r2, r4
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f40:	e7c2      	b.n	8009ec8 <_printf_common+0x58>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4622      	mov	r2, r4
 8009f46:	4649      	mov	r1, r9
 8009f48:	4638      	mov	r0, r7
 8009f4a:	47c0      	blx	r8
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d0e6      	beq.n	8009f1e <_printf_common+0xae>
 8009f50:	3601      	adds	r6, #1
 8009f52:	e7d9      	b.n	8009f08 <_printf_common+0x98>

08009f54 <_printf_i>:
 8009f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	7e0f      	ldrb	r7, [r1, #24]
 8009f5a:	4691      	mov	r9, r2
 8009f5c:	2f78      	cmp	r7, #120	; 0x78
 8009f5e:	4680      	mov	r8, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	469a      	mov	sl, r3
 8009f64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f6a:	d807      	bhi.n	8009f7c <_printf_i+0x28>
 8009f6c:	2f62      	cmp	r7, #98	; 0x62
 8009f6e:	d80a      	bhi.n	8009f86 <_printf_i+0x32>
 8009f70:	2f00      	cmp	r7, #0
 8009f72:	f000 80d5 	beq.w	800a120 <_printf_i+0x1cc>
 8009f76:	2f58      	cmp	r7, #88	; 0x58
 8009f78:	f000 80c1 	beq.w	800a0fe <_printf_i+0x1aa>
 8009f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f84:	e03a      	b.n	8009ffc <_printf_i+0xa8>
 8009f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f8a:	2b15      	cmp	r3, #21
 8009f8c:	d8f6      	bhi.n	8009f7c <_printf_i+0x28>
 8009f8e:	a101      	add	r1, pc, #4	; (adr r1, 8009f94 <_printf_i+0x40>)
 8009f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f94:	08009fed 	.word	0x08009fed
 8009f98:	0800a001 	.word	0x0800a001
 8009f9c:	08009f7d 	.word	0x08009f7d
 8009fa0:	08009f7d 	.word	0x08009f7d
 8009fa4:	08009f7d 	.word	0x08009f7d
 8009fa8:	08009f7d 	.word	0x08009f7d
 8009fac:	0800a001 	.word	0x0800a001
 8009fb0:	08009f7d 	.word	0x08009f7d
 8009fb4:	08009f7d 	.word	0x08009f7d
 8009fb8:	08009f7d 	.word	0x08009f7d
 8009fbc:	08009f7d 	.word	0x08009f7d
 8009fc0:	0800a107 	.word	0x0800a107
 8009fc4:	0800a02d 	.word	0x0800a02d
 8009fc8:	0800a0c1 	.word	0x0800a0c1
 8009fcc:	08009f7d 	.word	0x08009f7d
 8009fd0:	08009f7d 	.word	0x08009f7d
 8009fd4:	0800a129 	.word	0x0800a129
 8009fd8:	08009f7d 	.word	0x08009f7d
 8009fdc:	0800a02d 	.word	0x0800a02d
 8009fe0:	08009f7d 	.word	0x08009f7d
 8009fe4:	08009f7d 	.word	0x08009f7d
 8009fe8:	0800a0c9 	.word	0x0800a0c9
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	1d1a      	adds	r2, r3, #4
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0a0      	b.n	800a142 <_printf_i+0x1ee>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	0607      	lsls	r7, r0, #24
 800a006:	f103 0104 	add.w	r1, r3, #4
 800a00a:	6029      	str	r1, [r5, #0]
 800a00c:	d501      	bpl.n	800a012 <_printf_i+0xbe>
 800a00e:	681e      	ldr	r6, [r3, #0]
 800a010:	e003      	b.n	800a01a <_printf_i+0xc6>
 800a012:	0646      	lsls	r6, r0, #25
 800a014:	d5fb      	bpl.n	800a00e <_printf_i+0xba>
 800a016:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	da03      	bge.n	800a026 <_printf_i+0xd2>
 800a01e:	232d      	movs	r3, #45	; 0x2d
 800a020:	4276      	negs	r6, r6
 800a022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a026:	230a      	movs	r3, #10
 800a028:	4859      	ldr	r0, [pc, #356]	; (800a190 <_printf_i+0x23c>)
 800a02a:	e012      	b.n	800a052 <_printf_i+0xfe>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	6029      	str	r1, [r5, #0]
 800a034:	0605      	lsls	r5, r0, #24
 800a036:	d501      	bpl.n	800a03c <_printf_i+0xe8>
 800a038:	681e      	ldr	r6, [r3, #0]
 800a03a:	e002      	b.n	800a042 <_printf_i+0xee>
 800a03c:	0641      	lsls	r1, r0, #25
 800a03e:	d5fb      	bpl.n	800a038 <_printf_i+0xe4>
 800a040:	881e      	ldrh	r6, [r3, #0]
 800a042:	2f6f      	cmp	r7, #111	; 0x6f
 800a044:	bf0c      	ite	eq
 800a046:	2308      	moveq	r3, #8
 800a048:	230a      	movne	r3, #10
 800a04a:	4851      	ldr	r0, [pc, #324]	; (800a190 <_printf_i+0x23c>)
 800a04c:	2100      	movs	r1, #0
 800a04e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a052:	6865      	ldr	r5, [r4, #4]
 800a054:	2d00      	cmp	r5, #0
 800a056:	bfa8      	it	ge
 800a058:	6821      	ldrge	r1, [r4, #0]
 800a05a:	60a5      	str	r5, [r4, #8]
 800a05c:	bfa4      	itt	ge
 800a05e:	f021 0104 	bicge.w	r1, r1, #4
 800a062:	6021      	strge	r1, [r4, #0]
 800a064:	b90e      	cbnz	r6, 800a06a <_printf_i+0x116>
 800a066:	2d00      	cmp	r5, #0
 800a068:	d04b      	beq.n	800a102 <_printf_i+0x1ae>
 800a06a:	4615      	mov	r5, r2
 800a06c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a070:	fb03 6711 	mls	r7, r3, r1, r6
 800a074:	5dc7      	ldrb	r7, [r0, r7]
 800a076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a07a:	4637      	mov	r7, r6
 800a07c:	42bb      	cmp	r3, r7
 800a07e:	460e      	mov	r6, r1
 800a080:	d9f4      	bls.n	800a06c <_printf_i+0x118>
 800a082:	2b08      	cmp	r3, #8
 800a084:	d10b      	bne.n	800a09e <_printf_i+0x14a>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	07de      	lsls	r6, r3, #31
 800a08a:	d508      	bpl.n	800a09e <_printf_i+0x14a>
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	6861      	ldr	r1, [r4, #4]
 800a090:	4299      	cmp	r1, r3
 800a092:	bfde      	ittt	le
 800a094:	2330      	movle	r3, #48	; 0x30
 800a096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a09a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a09e:	1b52      	subs	r2, r2, r5
 800a0a0:	6122      	str	r2, [r4, #16]
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f8cd a000 	str.w	sl, [sp]
 800a0ac:	aa03      	add	r2, sp, #12
 800a0ae:	f7ff fedf 	bl	8009e70 <_printf_common>
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d14a      	bne.n	800a14c <_printf_i+0x1f8>
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	b004      	add	sp, #16
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	f043 0320 	orr.w	r3, r3, #32
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	2778      	movs	r7, #120	; 0x78
 800a0ca:	4832      	ldr	r0, [pc, #200]	; (800a194 <_printf_i+0x240>)
 800a0cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	6829      	ldr	r1, [r5, #0]
 800a0d4:	061f      	lsls	r7, r3, #24
 800a0d6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0da:	d402      	bmi.n	800a0e2 <_printf_i+0x18e>
 800a0dc:	065f      	lsls	r7, r3, #25
 800a0de:	bf48      	it	mi
 800a0e0:	b2b6      	uxthmi	r6, r6
 800a0e2:	07df      	lsls	r7, r3, #31
 800a0e4:	bf48      	it	mi
 800a0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ea:	6029      	str	r1, [r5, #0]
 800a0ec:	bf48      	it	mi
 800a0ee:	6023      	strmi	r3, [r4, #0]
 800a0f0:	b91e      	cbnz	r6, 800a0fa <_printf_i+0x1a6>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	f023 0320 	bic.w	r3, r3, #32
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	2310      	movs	r3, #16
 800a0fc:	e7a6      	b.n	800a04c <_printf_i+0xf8>
 800a0fe:	4824      	ldr	r0, [pc, #144]	; (800a190 <_printf_i+0x23c>)
 800a100:	e7e4      	b.n	800a0cc <_printf_i+0x178>
 800a102:	4615      	mov	r5, r2
 800a104:	e7bd      	b.n	800a082 <_printf_i+0x12e>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	6826      	ldr	r6, [r4, #0]
 800a10a:	1d18      	adds	r0, r3, #4
 800a10c:	6961      	ldr	r1, [r4, #20]
 800a10e:	6028      	str	r0, [r5, #0]
 800a110:	0635      	lsls	r5, r6, #24
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	d501      	bpl.n	800a11a <_printf_i+0x1c6>
 800a116:	6019      	str	r1, [r3, #0]
 800a118:	e002      	b.n	800a120 <_printf_i+0x1cc>
 800a11a:	0670      	lsls	r0, r6, #25
 800a11c:	d5fb      	bpl.n	800a116 <_printf_i+0x1c2>
 800a11e:	8019      	strh	r1, [r3, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	4615      	mov	r5, r2
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	e7bc      	b.n	800a0a2 <_printf_i+0x14e>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	2100      	movs	r1, #0
 800a12c:	1d1a      	adds	r2, r3, #4
 800a12e:	602a      	str	r2, [r5, #0]
 800a130:	681d      	ldr	r5, [r3, #0]
 800a132:	6862      	ldr	r2, [r4, #4]
 800a134:	4628      	mov	r0, r5
 800a136:	f000 f8f7 	bl	800a328 <memchr>
 800a13a:	b108      	cbz	r0, 800a140 <_printf_i+0x1ec>
 800a13c:	1b40      	subs	r0, r0, r5
 800a13e:	6060      	str	r0, [r4, #4]
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	2300      	movs	r3, #0
 800a146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a14a:	e7aa      	b.n	800a0a2 <_printf_i+0x14e>
 800a14c:	462a      	mov	r2, r5
 800a14e:	4649      	mov	r1, r9
 800a150:	4640      	mov	r0, r8
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	47d0      	blx	sl
 800a156:	3001      	adds	r0, #1
 800a158:	d0ad      	beq.n	800a0b6 <_printf_i+0x162>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	079b      	lsls	r3, r3, #30
 800a15e:	d413      	bmi.n	800a188 <_printf_i+0x234>
 800a160:	68e0      	ldr	r0, [r4, #12]
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	4298      	cmp	r0, r3
 800a166:	bfb8      	it	lt
 800a168:	4618      	movlt	r0, r3
 800a16a:	e7a6      	b.n	800a0ba <_printf_i+0x166>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4632      	mov	r2, r6
 800a170:	4649      	mov	r1, r9
 800a172:	4640      	mov	r0, r8
 800a174:	47d0      	blx	sl
 800a176:	3001      	adds	r0, #1
 800a178:	d09d      	beq.n	800a0b6 <_printf_i+0x162>
 800a17a:	3501      	adds	r5, #1
 800a17c:	68e3      	ldr	r3, [r4, #12]
 800a17e:	9903      	ldr	r1, [sp, #12]
 800a180:	1a5b      	subs	r3, r3, r1
 800a182:	42ab      	cmp	r3, r5
 800a184:	dcf2      	bgt.n	800a16c <_printf_i+0x218>
 800a186:	e7eb      	b.n	800a160 <_printf_i+0x20c>
 800a188:	2500      	movs	r5, #0
 800a18a:	f104 0619 	add.w	r6, r4, #25
 800a18e:	e7f5      	b.n	800a17c <_printf_i+0x228>
 800a190:	0800aed2 	.word	0x0800aed2
 800a194:	0800aee3 	.word	0x0800aee3

0800a198 <__swhatbuf_r>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	460c      	mov	r4, r1
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	4615      	mov	r5, r2
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	461e      	mov	r6, r3
 800a1a6:	b096      	sub	sp, #88	; 0x58
 800a1a8:	da0c      	bge.n	800a1c4 <__swhatbuf_r+0x2c>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a1b2:	bf0c      	ite	eq
 800a1b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a1b8:	2340      	movne	r3, #64	; 0x40
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	6031      	str	r1, [r6, #0]
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	b016      	add	sp, #88	; 0x58
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	466a      	mov	r2, sp
 800a1c6:	f000 f879 	bl	800a2bc <_fstat_r>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	dbed      	blt.n	800a1aa <__swhatbuf_r+0x12>
 800a1ce:	9901      	ldr	r1, [sp, #4]
 800a1d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1d8:	4259      	negs	r1, r3
 800a1da:	4159      	adcs	r1, r3
 800a1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e0:	e7eb      	b.n	800a1ba <__swhatbuf_r+0x22>

0800a1e2 <__smakebuf_r>:
 800a1e2:	898b      	ldrh	r3, [r1, #12]
 800a1e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e6:	079d      	lsls	r5, r3, #30
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	d507      	bpl.n	800a1fe <__smakebuf_r+0x1c>
 800a1ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	6123      	str	r3, [r4, #16]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	6163      	str	r3, [r4, #20]
 800a1fa:	b002      	add	sp, #8
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
 800a1fe:	466a      	mov	r2, sp
 800a200:	ab01      	add	r3, sp, #4
 800a202:	f7ff ffc9 	bl	800a198 <__swhatbuf_r>
 800a206:	9900      	ldr	r1, [sp, #0]
 800a208:	4605      	mov	r5, r0
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff fac6 	bl	800979c <_malloc_r>
 800a210:	b948      	cbnz	r0, 800a226 <__smakebuf_r+0x44>
 800a212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a216:	059a      	lsls	r2, r3, #22
 800a218:	d4ef      	bmi.n	800a1fa <__smakebuf_r+0x18>
 800a21a:	f023 0303 	bic.w	r3, r3, #3
 800a21e:	f043 0302 	orr.w	r3, r3, #2
 800a222:	81a3      	strh	r3, [r4, #12]
 800a224:	e7e3      	b.n	800a1ee <__smakebuf_r+0xc>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	6020      	str	r0, [r4, #0]
 800a22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	6120      	str	r0, [r4, #16]
 800a234:	6163      	str	r3, [r4, #20]
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	b15b      	cbz	r3, 800a252 <__smakebuf_r+0x70>
 800a23a:	4630      	mov	r0, r6
 800a23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a240:	f000 f84e 	bl	800a2e0 <_isatty_r>
 800a244:	b128      	cbz	r0, 800a252 <__smakebuf_r+0x70>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	f023 0303 	bic.w	r3, r3, #3
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	431d      	orrs	r5, r3
 800a256:	81a5      	strh	r5, [r4, #12]
 800a258:	e7cf      	b.n	800a1fa <__smakebuf_r+0x18>

0800a25a <_raise_r>:
 800a25a:	291f      	cmp	r1, #31
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	d904      	bls.n	800a26e <_raise_r+0x14>
 800a264:	2316      	movs	r3, #22
 800a266:	6003      	str	r3, [r0, #0]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a270:	b112      	cbz	r2, 800a278 <_raise_r+0x1e>
 800a272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a276:	b94b      	cbnz	r3, 800a28c <_raise_r+0x32>
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 f853 	bl	800a324 <_getpid_r>
 800a27e:	462a      	mov	r2, r5
 800a280:	4601      	mov	r1, r0
 800a282:	4620      	mov	r0, r4
 800a284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a288:	f000 b83a 	b.w	800a300 <_kill_r>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d00a      	beq.n	800a2a6 <_raise_r+0x4c>
 800a290:	1c59      	adds	r1, r3, #1
 800a292:	d103      	bne.n	800a29c <_raise_r+0x42>
 800a294:	2316      	movs	r3, #22
 800a296:	6003      	str	r3, [r0, #0]
 800a298:	2001      	movs	r0, #1
 800a29a:	e7e7      	b.n	800a26c <_raise_r+0x12>
 800a29c:	2400      	movs	r4, #0
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2a4:	4798      	blx	r3
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e7e0      	b.n	800a26c <_raise_r+0x12>
	...

0800a2ac <raise>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <raise+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f7ff bfd2 	b.w	800a25a <_raise_r>
 800a2b6:	bf00      	nop
 800a2b8:	20000218 	.word	0x20000218

0800a2bc <_fstat_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4d06      	ldr	r5, [pc, #24]	; (800a2dc <_fstat_r+0x20>)
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	602b      	str	r3, [r5, #0]
 800a2ca:	f000 f956 	bl	800a57a <_fstat>
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d102      	bne.n	800a2d8 <_fstat_r+0x1c>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	b103      	cbz	r3, 800a2d8 <_fstat_r+0x1c>
 800a2d6:	6023      	str	r3, [r4, #0]
 800a2d8:	bd38      	pop	{r3, r4, r5, pc}
 800a2da:	bf00      	nop
 800a2dc:	20001684 	.word	0x20001684

0800a2e0 <_isatty_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4d05      	ldr	r5, [pc, #20]	; (800a2fc <_isatty_r+0x1c>)
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	f000 fab8 	bl	800a860 <_isatty>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_isatty_r+0x1a>
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_isatty_r+0x1a>
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	20001684 	.word	0x20001684

0800a300 <_kill_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	2300      	movs	r3, #0
 800a304:	4d06      	ldr	r5, [pc, #24]	; (800a320 <_kill_r+0x20>)
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	4611      	mov	r1, r2
 800a30c:	602b      	str	r3, [r5, #0]
 800a30e:	f000 fae1 	bl	800a8d4 <_kill>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	d102      	bne.n	800a31c <_kill_r+0x1c>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	b103      	cbz	r3, 800a31c <_kill_r+0x1c>
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
 800a31e:	bf00      	nop
 800a320:	20001684 	.word	0x20001684

0800a324 <_getpid_r>:
 800a324:	f000 b906 	b.w	800a534 <_getpid>

0800a328 <memchr>:
 800a328:	4603      	mov	r3, r0
 800a32a:	b510      	push	{r4, lr}
 800a32c:	b2c9      	uxtb	r1, r1
 800a32e:	4402      	add	r2, r0
 800a330:	4293      	cmp	r3, r2
 800a332:	4618      	mov	r0, r3
 800a334:	d101      	bne.n	800a33a <memchr+0x12>
 800a336:	2000      	movs	r0, #0
 800a338:	e003      	b.n	800a342 <memchr+0x1a>
 800a33a:	7804      	ldrb	r4, [r0, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	428c      	cmp	r4, r1
 800a340:	d1f6      	bne.n	800a330 <memchr+0x8>
 800a342:	bd10      	pop	{r4, pc}

0800a344 <findslot>:
 800a344:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <findslot+0x2c>)
 800a346:	b510      	push	{r4, lr}
 800a348:	4604      	mov	r4, r0
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	b118      	cbz	r0, 800a356 <findslot+0x12>
 800a34e:	6a03      	ldr	r3, [r0, #32]
 800a350:	b90b      	cbnz	r3, 800a356 <findslot+0x12>
 800a352:	f7ff f817 	bl	8009384 <__sinit>
 800a356:	2c13      	cmp	r4, #19
 800a358:	d807      	bhi.n	800a36a <findslot+0x26>
 800a35a:	4806      	ldr	r0, [pc, #24]	; (800a374 <findslot+0x30>)
 800a35c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a360:	3201      	adds	r2, #1
 800a362:	d002      	beq.n	800a36a <findslot+0x26>
 800a364:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	2000      	movs	r0, #0
 800a36c:	e7fc      	b.n	800a368 <findslot+0x24>
 800a36e:	bf00      	nop
 800a370:	20000218 	.word	0x20000218
 800a374:	200016a0 	.word	0x200016a0

0800a378 <error>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	f7ff f944 	bl	8009608 <__errno>
 800a380:	2613      	movs	r6, #19
 800a382:	4605      	mov	r5, r0
 800a384:	2700      	movs	r7, #0
 800a386:	4630      	mov	r0, r6
 800a388:	4639      	mov	r1, r7
 800a38a:	beab      	bkpt	0x00ab
 800a38c:	4606      	mov	r6, r0
 800a38e:	4620      	mov	r0, r4
 800a390:	602e      	str	r6, [r5, #0]
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a394 <checkerror>:
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d101      	bne.n	800a39c <checkerror+0x8>
 800a398:	f7ff bfee 	b.w	800a378 <error>
 800a39c:	4770      	bx	lr

0800a39e <_swiread>:
 800a39e:	b530      	push	{r4, r5, lr}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	2406      	movs	r4, #6
 800a3a4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a3a8:	9203      	str	r2, [sp, #12]
 800a3aa:	ad01      	add	r5, sp, #4
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	beab      	bkpt	0x00ab
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff ffed 	bl	800a394 <checkerror>
 800a3ba:	b005      	add	sp, #20
 800a3bc:	bd30      	pop	{r4, r5, pc}

0800a3be <_read>:
 800a3be:	b570      	push	{r4, r5, r6, lr}
 800a3c0:	460e      	mov	r6, r1
 800a3c2:	4615      	mov	r5, r2
 800a3c4:	f7ff ffbe 	bl	800a344 <findslot>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	b930      	cbnz	r0, 800a3da <_read+0x1c>
 800a3cc:	f7ff f91c 	bl	8009608 <__errno>
 800a3d0:	2309      	movs	r3, #9
 800a3d2:	6003      	str	r3, [r0, #0]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4631      	mov	r1, r6
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	f7ff ffdd 	bl	800a39e <_swiread>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	bf1f      	itttt	ne
 800a3e8:	6863      	ldrne	r3, [r4, #4]
 800a3ea:	1a28      	subne	r0, r5, r0
 800a3ec:	181b      	addne	r3, r3, r0
 800a3ee:	6063      	strne	r3, [r4, #4]
 800a3f0:	e7f2      	b.n	800a3d8 <_read+0x1a>

0800a3f2 <_swilseek>:
 800a3f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	f7ff ffa4 	bl	800a344 <findslot>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	b940      	cbnz	r0, 800a412 <_swilseek+0x20>
 800a400:	f7ff f902 	bl	8009608 <__errno>
 800a404:	2309      	movs	r3, #9
 800a406:	6003      	str	r3, [r0, #0]
 800a408:	f04f 34ff 	mov.w	r4, #4294967295
 800a40c:	4620      	mov	r0, r4
 800a40e:	b003      	add	sp, #12
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	2e02      	cmp	r6, #2
 800a414:	d903      	bls.n	800a41e <_swilseek+0x2c>
 800a416:	f7ff f8f7 	bl	8009608 <__errno>
 800a41a:	2316      	movs	r3, #22
 800a41c:	e7f3      	b.n	800a406 <_swilseek+0x14>
 800a41e:	2e01      	cmp	r6, #1
 800a420:	d112      	bne.n	800a448 <_swilseek+0x56>
 800a422:	6843      	ldr	r3, [r0, #4]
 800a424:	18e4      	adds	r4, r4, r3
 800a426:	d4f6      	bmi.n	800a416 <_swilseek+0x24>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	260a      	movs	r6, #10
 800a42c:	466f      	mov	r7, sp
 800a42e:	e9cd 3400 	strd	r3, r4, [sp]
 800a432:	4630      	mov	r0, r6
 800a434:	4639      	mov	r1, r7
 800a436:	beab      	bkpt	0x00ab
 800a438:	4606      	mov	r6, r0
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff ffaa 	bl	800a394 <checkerror>
 800a440:	2800      	cmp	r0, #0
 800a442:	dbe1      	blt.n	800a408 <_swilseek+0x16>
 800a444:	606c      	str	r4, [r5, #4]
 800a446:	e7e1      	b.n	800a40c <_swilseek+0x1a>
 800a448:	2e02      	cmp	r6, #2
 800a44a:	6803      	ldr	r3, [r0, #0]
 800a44c:	d1ec      	bne.n	800a428 <_swilseek+0x36>
 800a44e:	260c      	movs	r6, #12
 800a450:	466f      	mov	r7, sp
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4630      	mov	r0, r6
 800a456:	4639      	mov	r1, r7
 800a458:	beab      	bkpt	0x00ab
 800a45a:	4606      	mov	r6, r0
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff ff99 	bl	800a394 <checkerror>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d0d0      	beq.n	800a408 <_swilseek+0x16>
 800a466:	4404      	add	r4, r0
 800a468:	e7de      	b.n	800a428 <_swilseek+0x36>

0800a46a <_lseek>:
 800a46a:	f7ff bfc2 	b.w	800a3f2 <_swilseek>

0800a46e <_swiwrite>:
 800a46e:	b530      	push	{r4, r5, lr}
 800a470:	b085      	sub	sp, #20
 800a472:	2405      	movs	r4, #5
 800a474:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a478:	9203      	str	r2, [sp, #12]
 800a47a:	ad01      	add	r5, sp, #4
 800a47c:	4620      	mov	r0, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	beab      	bkpt	0x00ab
 800a482:	4604      	mov	r4, r0
 800a484:	4620      	mov	r0, r4
 800a486:	f7ff ff85 	bl	800a394 <checkerror>
 800a48a:	b005      	add	sp, #20
 800a48c:	bd30      	pop	{r4, r5, pc}

0800a48e <_write>:
 800a48e:	b570      	push	{r4, r5, r6, lr}
 800a490:	460e      	mov	r6, r1
 800a492:	4615      	mov	r5, r2
 800a494:	f7ff ff56 	bl	800a344 <findslot>
 800a498:	4604      	mov	r4, r0
 800a49a:	b930      	cbnz	r0, 800a4aa <_write+0x1c>
 800a49c:	f7ff f8b4 	bl	8009608 <__errno>
 800a4a0:	2309      	movs	r3, #9
 800a4a2:	6003      	str	r3, [r0, #0]
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	bd70      	pop	{r4, r5, r6, pc}
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	f7ff ffdd 	bl	800a46e <_swiwrite>
 800a4b4:	1e03      	subs	r3, r0, #0
 800a4b6:	dbf5      	blt.n	800a4a4 <_write+0x16>
 800a4b8:	6862      	ldr	r2, [r4, #4]
 800a4ba:	1ae8      	subs	r0, r5, r3
 800a4bc:	4402      	add	r2, r0
 800a4be:	42ab      	cmp	r3, r5
 800a4c0:	6062      	str	r2, [r4, #4]
 800a4c2:	d1f1      	bne.n	800a4a8 <_write+0x1a>
 800a4c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	f7ff bf55 	b.w	800a378 <error>

0800a4ce <_swiclose>:
 800a4ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d0:	2402      	movs	r4, #2
 800a4d2:	9001      	str	r0, [sp, #4]
 800a4d4:	ad01      	add	r5, sp, #4
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	4629      	mov	r1, r5
 800a4da:	beab      	bkpt	0x00ab
 800a4dc:	4604      	mov	r4, r0
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f7ff ff58 	bl	800a394 <checkerror>
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bd30      	pop	{r4, r5, pc}

0800a4e8 <_close>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	f7ff ff2a 	bl	800a344 <findslot>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	b930      	cbnz	r0, 800a502 <_close+0x1a>
 800a4f4:	f7ff f888 	bl	8009608 <__errno>
 800a4f8:	2309      	movs	r3, #9
 800a4fa:	6003      	str	r3, [r0, #0]
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	bd38      	pop	{r3, r4, r5, pc}
 800a502:	3d01      	subs	r5, #1
 800a504:	2d01      	cmp	r5, #1
 800a506:	d809      	bhi.n	800a51c <_close+0x34>
 800a508:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_close+0x48>)
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d104      	bne.n	800a51c <_close+0x34>
 800a512:	f04f 33ff 	mov.w	r3, #4294967295
 800a516:	6003      	str	r3, [r0, #0]
 800a518:	2000      	movs	r0, #0
 800a51a:	e7f1      	b.n	800a500 <_close+0x18>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	f7ff ffd6 	bl	800a4ce <_swiclose>
 800a522:	2800      	cmp	r0, #0
 800a524:	d1ec      	bne.n	800a500 <_close+0x18>
 800a526:	f04f 33ff 	mov.w	r3, #4294967295
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	e7e8      	b.n	800a500 <_close+0x18>
 800a52e:	bf00      	nop
 800a530:	200016a0 	.word	0x200016a0

0800a534 <_getpid>:
 800a534:	2001      	movs	r0, #1
 800a536:	4770      	bx	lr

0800a538 <_swistat>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	460c      	mov	r4, r1
 800a53c:	f7ff ff02 	bl	800a344 <findslot>
 800a540:	4605      	mov	r5, r0
 800a542:	b930      	cbnz	r0, 800a552 <_swistat+0x1a>
 800a544:	f7ff f860 	bl	8009608 <__errno>
 800a548:	2309      	movs	r3, #9
 800a54a:	6003      	str	r3, [r0, #0]
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	bd70      	pop	{r4, r5, r6, pc}
 800a552:	6863      	ldr	r3, [r4, #4]
 800a554:	260c      	movs	r6, #12
 800a556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a560:	64a3      	str	r3, [r4, #72]	; 0x48
 800a562:	4630      	mov	r0, r6
 800a564:	4629      	mov	r1, r5
 800a566:	beab      	bkpt	0x00ab
 800a568:	4605      	mov	r5, r0
 800a56a:	4628      	mov	r0, r5
 800a56c:	f7ff ff12 	bl	800a394 <checkerror>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	bf1c      	itt	ne
 800a574:	6120      	strne	r0, [r4, #16]
 800a576:	2000      	movne	r0, #0
 800a578:	e7ea      	b.n	800a550 <_swistat+0x18>

0800a57a <_fstat>:
 800a57a:	460b      	mov	r3, r1
 800a57c:	b510      	push	{r4, lr}
 800a57e:	2100      	movs	r1, #0
 800a580:	4604      	mov	r4, r0
 800a582:	2258      	movs	r2, #88	; 0x58
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe ff7e 	bl	8009486 <memset>
 800a58a:	4601      	mov	r1, r0
 800a58c:	4620      	mov	r0, r4
 800a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a592:	f7ff bfd1 	b.w	800a538 <_swistat>

0800a596 <_stat>:
 800a596:	b538      	push	{r3, r4, r5, lr}
 800a598:	460d      	mov	r5, r1
 800a59a:	4604      	mov	r4, r0
 800a59c:	2258      	movs	r2, #88	; 0x58
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7fe ff70 	bl	8009486 <memset>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f000 f811 	bl	800a5d0 <_swiopen>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	d00b      	beq.n	800a5cc <_stat+0x36>
 800a5b4:	686b      	ldr	r3, [r5, #4]
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a5bc:	606b      	str	r3, [r5, #4]
 800a5be:	f7ff ffbb 	bl	800a538 <_swistat>
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7ff ff8f 	bl	800a4e8 <_close>
 800a5ca:	462c      	mov	r4, r5
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}

0800a5d0 <_swiopen>:
 800a5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	2500      	movs	r5, #0
 800a5da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a680 <_swiopen+0xb0>
 800a5de:	b097      	sub	sp, #92	; 0x5c
 800a5e0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800a5e4:	1c61      	adds	r1, r4, #1
 800a5e6:	d037      	beq.n	800a658 <_swiopen+0x88>
 800a5e8:	3501      	adds	r5, #1
 800a5ea:	2d14      	cmp	r5, #20
 800a5ec:	d1f8      	bne.n	800a5e0 <_swiopen+0x10>
 800a5ee:	f7ff f80b 	bl	8009608 <__errno>
 800a5f2:	2318      	movs	r3, #24
 800a5f4:	f04f 34ff 	mov.w	r4, #4294967295
 800a5f8:	6003      	str	r3, [r0, #0]
 800a5fa:	e03d      	b.n	800a678 <_swiopen+0xa8>
 800a5fc:	f240 6301 	movw	r3, #1537	; 0x601
 800a600:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800a604:	07b2      	lsls	r2, r6, #30
 800a606:	bf48      	it	mi
 800a608:	f044 0402 	orrmi.w	r4, r4, #2
 800a60c:	421e      	tst	r6, r3
 800a60e:	bf18      	it	ne
 800a610:	f044 0404 	orrne.w	r4, r4, #4
 800a614:	0733      	lsls	r3, r6, #28
 800a616:	bf48      	it	mi
 800a618:	f024 0404 	bicmi.w	r4, r4, #4
 800a61c:	4638      	mov	r0, r7
 800a61e:	bf48      	it	mi
 800a620:	f044 0408 	orrmi.w	r4, r4, #8
 800a624:	9700      	str	r7, [sp, #0]
 800a626:	f7f5 fda9 	bl	800017c <strlen>
 800a62a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800a62e:	2401      	movs	r4, #1
 800a630:	4620      	mov	r0, r4
 800a632:	4649      	mov	r1, r9
 800a634:	beab      	bkpt	0x00ab
 800a636:	4604      	mov	r4, r0
 800a638:	2c00      	cmp	r4, #0
 800a63a:	db08      	blt.n	800a64e <_swiopen+0x7e>
 800a63c:	2300      	movs	r3, #0
 800a63e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800a642:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800a646:	462c      	mov	r4, r5
 800a648:	f8c8 3004 	str.w	r3, [r8, #4]
 800a64c:	e014      	b.n	800a678 <_swiopen+0xa8>
 800a64e:	4620      	mov	r0, r4
 800a650:	f7ff fe92 	bl	800a378 <error>
 800a654:	4604      	mov	r4, r0
 800a656:	e00f      	b.n	800a678 <_swiopen+0xa8>
 800a658:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800a65c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a660:	46e9      	mov	r9, sp
 800a662:	d1cb      	bne.n	800a5fc <_swiopen+0x2c>
 800a664:	4649      	mov	r1, r9
 800a666:	4638      	mov	r0, r7
 800a668:	f7ff ff95 	bl	800a596 <_stat>
 800a66c:	3001      	adds	r0, #1
 800a66e:	d0c5      	beq.n	800a5fc <_swiopen+0x2c>
 800a670:	f7fe ffca 	bl	8009608 <__errno>
 800a674:	2311      	movs	r3, #17
 800a676:	6003      	str	r3, [r0, #0]
 800a678:	4620      	mov	r0, r4
 800a67a:	b017      	add	sp, #92	; 0x5c
 800a67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a680:	200016a0 	.word	0x200016a0

0800a684 <_get_semihosting_exts>:
 800a684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a688:	4606      	mov	r6, r0
 800a68a:	460f      	mov	r7, r1
 800a68c:	482a      	ldr	r0, [pc, #168]	; (800a738 <_get_semihosting_exts+0xb4>)
 800a68e:	2100      	movs	r1, #0
 800a690:	4615      	mov	r5, r2
 800a692:	f7ff ff9d 	bl	800a5d0 <_swiopen>
 800a696:	4604      	mov	r4, r0
 800a698:	462a      	mov	r2, r5
 800a69a:	2100      	movs	r1, #0
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7fe fef2 	bl	8009486 <memset>
 800a6a2:	1c63      	adds	r3, r4, #1
 800a6a4:	d016      	beq.n	800a6d4 <_get_semihosting_exts+0x50>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7ff fe4c 	bl	800a344 <findslot>
 800a6ac:	f04f 080c 	mov.w	r8, #12
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	beab      	bkpt	0x00ab
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f7ff fe6a 	bl	800a394 <checkerror>
 800a6c0:	2803      	cmp	r0, #3
 800a6c2:	dd02      	ble.n	800a6ca <_get_semihosting_exts+0x46>
 800a6c4:	1ec3      	subs	r3, r0, #3
 800a6c6:	42ab      	cmp	r3, r5
 800a6c8:	dc08      	bgt.n	800a6dc <_get_semihosting_exts+0x58>
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7ff ff0c 	bl	800a4e8 <_close>
 800a6d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	b003      	add	sp, #12
 800a6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6dc:	2204      	movs	r2, #4
 800a6de:	4620      	mov	r0, r4
 800a6e0:	eb0d 0102 	add.w	r1, sp, r2
 800a6e4:	f7ff fe6b 	bl	800a3be <_read>
 800a6e8:	2803      	cmp	r0, #3
 800a6ea:	ddee      	ble.n	800a6ca <_get_semihosting_exts+0x46>
 800a6ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a6f0:	2b53      	cmp	r3, #83	; 0x53
 800a6f2:	d1ea      	bne.n	800a6ca <_get_semihosting_exts+0x46>
 800a6f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a6f8:	2b48      	cmp	r3, #72	; 0x48
 800a6fa:	d1e6      	bne.n	800a6ca <_get_semihosting_exts+0x46>
 800a6fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a700:	2b46      	cmp	r3, #70	; 0x46
 800a702:	d1e2      	bne.n	800a6ca <_get_semihosting_exts+0x46>
 800a704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a708:	2b42      	cmp	r3, #66	; 0x42
 800a70a:	d1de      	bne.n	800a6ca <_get_semihosting_exts+0x46>
 800a70c:	2201      	movs	r2, #1
 800a70e:	4639      	mov	r1, r7
 800a710:	4620      	mov	r0, r4
 800a712:	f7ff fe6e 	bl	800a3f2 <_swilseek>
 800a716:	2800      	cmp	r0, #0
 800a718:	dbd7      	blt.n	800a6ca <_get_semihosting_exts+0x46>
 800a71a:	462a      	mov	r2, r5
 800a71c:	4631      	mov	r1, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff fe4d 	bl	800a3be <_read>
 800a724:	4605      	mov	r5, r0
 800a726:	4620      	mov	r0, r4
 800a728:	f7ff fede 	bl	800a4e8 <_close>
 800a72c:	4628      	mov	r0, r5
 800a72e:	f7ff fe31 	bl	800a394 <checkerror>
 800a732:	4604      	mov	r4, r0
 800a734:	e7ce      	b.n	800a6d4 <_get_semihosting_exts+0x50>
 800a736:	bf00      	nop
 800a738:	0800aef4 	.word	0x0800aef4

0800a73c <initialise_semihosting_exts>:
 800a73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a73e:	2100      	movs	r1, #0
 800a740:	2201      	movs	r2, #1
 800a742:	4d09      	ldr	r5, [pc, #36]	; (800a768 <initialise_semihosting_exts+0x2c>)
 800a744:	4c09      	ldr	r4, [pc, #36]	; (800a76c <initialise_semihosting_exts+0x30>)
 800a746:	a801      	add	r0, sp, #4
 800a748:	6029      	str	r1, [r5, #0]
 800a74a:	6022      	str	r2, [r4, #0]
 800a74c:	f7ff ff9a 	bl	800a684 <_get_semihosting_exts>
 800a750:	2800      	cmp	r0, #0
 800a752:	dd07      	ble.n	800a764 <initialise_semihosting_exts+0x28>
 800a754:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a758:	f003 0201 	and.w	r2, r3, #1
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	b003      	add	sp, #12
 800a766:	bd30      	pop	{r4, r5, pc}
 800a768:	2000021c 	.word	0x2000021c
 800a76c:	20000220 	.word	0x20000220

0800a770 <_has_ext_exit_extended>:
 800a770:	b510      	push	{r4, lr}
 800a772:	4c04      	ldr	r4, [pc, #16]	; (800a784 <_has_ext_exit_extended+0x14>)
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	da01      	bge.n	800a77e <_has_ext_exit_extended+0xe>
 800a77a:	f7ff ffdf 	bl	800a73c <initialise_semihosting_exts>
 800a77e:	6820      	ldr	r0, [r4, #0]
 800a780:	bd10      	pop	{r4, pc}
 800a782:	bf00      	nop
 800a784:	2000021c 	.word	0x2000021c

0800a788 <_has_ext_stdout_stderr>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	4c04      	ldr	r4, [pc, #16]	; (800a79c <_has_ext_stdout_stderr+0x14>)
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da01      	bge.n	800a796 <_has_ext_stdout_stderr+0xe>
 800a792:	f7ff ffd3 	bl	800a73c <initialise_semihosting_exts>
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	bf00      	nop
 800a79c:	20000220 	.word	0x20000220

0800a7a0 <initialise_monitor_handles>:
 800a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	2400      	movs	r4, #0
 800a7a8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800a84c <initialise_monitor_handles+0xac>
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7b2:	af01      	add	r7, sp, #4
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	2501      	movs	r5, #1
 800a7b8:	9402      	str	r4, [sp, #8]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	4639      	mov	r1, r7
 800a7be:	beab      	bkpt	0x00ab
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800a850 <initialise_monitor_handles+0xb0>
 800a7ca:	4623      	mov	r3, r4
 800a7cc:	4c21      	ldr	r4, [pc, #132]	; (800a854 <initialise_monitor_handles+0xb4>)
 800a7ce:	f8c8 5000 	str.w	r5, [r8]
 800a7d2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	2b14      	cmp	r3, #20
 800a7da:	d1fa      	bne.n	800a7d2 <initialise_monitor_handles+0x32>
 800a7dc:	f7ff ffd4 	bl	800a788 <_has_ext_stdout_stderr>
 800a7e0:	4d1d      	ldr	r5, [pc, #116]	; (800a858 <initialise_monitor_handles+0xb8>)
 800a7e2:	b1d0      	cbz	r0, 800a81a <initialise_monitor_handles+0x7a>
 800a7e4:	f04f 0a03 	mov.w	sl, #3
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7ee:	2601      	movs	r6, #1
 800a7f0:	f8cd a00c 	str.w	sl, [sp, #12]
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	beab      	bkpt	0x00ab
 800a7fc:	4683      	mov	fp, r0
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <initialise_monitor_handles+0xbc>)
 800a800:	f8cd 9004 	str.w	r9, [sp, #4]
 800a804:	f8c3 b000 	str.w	fp, [r3]
 800a808:	2308      	movs	r3, #8
 800a80a:	f8cd a00c 	str.w	sl, [sp, #12]
 800a80e:	9302      	str	r3, [sp, #8]
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	beab      	bkpt	0x00ab
 800a816:	4606      	mov	r6, r0
 800a818:	602e      	str	r6, [r5, #0]
 800a81a:	2600      	movs	r6, #0
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	6066      	str	r6, [r4, #4]
 800a820:	3301      	adds	r3, #1
 800a822:	bf02      	ittt	eq
 800a824:	4b0d      	ldreq	r3, [pc, #52]	; (800a85c <initialise_monitor_handles+0xbc>)
 800a826:	681b      	ldreq	r3, [r3, #0]
 800a828:	602b      	streq	r3, [r5, #0]
 800a82a:	f8d8 3000 	ldr.w	r3, [r8]
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	f7ff ffaa 	bl	800a788 <_has_ext_stdout_stderr>
 800a834:	b130      	cbz	r0, 800a844 <initialise_monitor_handles+0xa4>
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <initialise_monitor_handles+0xbc>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a844:	b005      	add	sp, #20
 800a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84a:	bf00      	nop
 800a84c:	0800af0a 	.word	0x0800af0a
 800a850:	20001698 	.word	0x20001698
 800a854:	200016a0 	.word	0x200016a0
 800a858:	20001694 	.word	0x20001694
 800a85c:	2000169c 	.word	0x2000169c

0800a860 <_isatty>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	f7ff fd6f 	bl	800a344 <findslot>
 800a866:	2509      	movs	r5, #9
 800a868:	4604      	mov	r4, r0
 800a86a:	b920      	cbnz	r0, 800a876 <_isatty+0x16>
 800a86c:	f7fe fecc 	bl	8009608 <__errno>
 800a870:	6005      	str	r5, [r0, #0]
 800a872:	4620      	mov	r0, r4
 800a874:	bd70      	pop	{r4, r5, r6, pc}
 800a876:	4628      	mov	r0, r5
 800a878:	4621      	mov	r1, r4
 800a87a:	beab      	bkpt	0x00ab
 800a87c:	4604      	mov	r4, r0
 800a87e:	2c01      	cmp	r4, #1
 800a880:	d0f7      	beq.n	800a872 <_isatty+0x12>
 800a882:	f7fe fec1 	bl	8009608 <__errno>
 800a886:	2400      	movs	r4, #0
 800a888:	4605      	mov	r5, r0
 800a88a:	2613      	movs	r6, #19
 800a88c:	4630      	mov	r0, r6
 800a88e:	4621      	mov	r1, r4
 800a890:	beab      	bkpt	0x00ab
 800a892:	4606      	mov	r6, r0
 800a894:	602e      	str	r6, [r5, #0]
 800a896:	e7ec      	b.n	800a872 <_isatty+0x12>

0800a898 <_exit>:
 800a898:	4601      	mov	r1, r0
 800a89a:	b508      	push	{r3, lr}
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	4a01      	ldr	r2, [pc, #4]	; (800a8a8 <_exit+0x10>)
 800a8a2:	f000 f803 	bl	800a8ac <_kill_shared>
 800a8a6:	bf00      	nop
 800a8a8:	00020026 	.word	0x00020026

0800a8ac <_kill_shared>:
 800a8ac:	b507      	push	{r0, r1, r2, lr}
 800a8ae:	e9cd 2100 	strd	r2, r1, [sp]
 800a8b2:	f7ff ff5d 	bl	800a770 <_has_ext_exit_extended>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	bf14      	ite	ne
 800a8ba:	2420      	movne	r4, #32
 800a8bc:	2418      	moveq	r4, #24
 800a8be:	f7ff ff57 	bl	800a770 <_has_ext_exit_extended>
 800a8c2:	b120      	cbz	r0, 800a8ce <_kill_shared+0x22>
 800a8c4:	466d      	mov	r5, sp
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	beab      	bkpt	0x00ab
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	9d00      	ldr	r5, [sp, #0]
 800a8d0:	e7f9      	b.n	800a8c6 <_kill_shared+0x1a>
	...

0800a8d4 <_kill>:
 800a8d4:	2906      	cmp	r1, #6
 800a8d6:	b508      	push	{r3, lr}
 800a8d8:	bf0c      	ite	eq
 800a8da:	4a02      	ldreq	r2, [pc, #8]	; (800a8e4 <_kill+0x10>)
 800a8dc:	4a02      	ldrne	r2, [pc, #8]	; (800a8e8 <_kill+0x14>)
 800a8de:	f7ff ffe5 	bl	800a8ac <_kill_shared>
 800a8e2:	bf00      	nop
 800a8e4:	00020023 	.word	0x00020023
 800a8e8:	00020026 	.word	0x00020026

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
