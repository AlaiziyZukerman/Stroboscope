
Strobe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008344  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080084bc  080084bc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084bc  080084bc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080084c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e8  2000017c  08008640  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  08008640  00021464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010efc  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f2  00000000  00000000  000310e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  000342d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c58  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1b8  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146f9  00000000  00000000  00050130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008caee  00000000  00000000  00064829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004210  00000000  00000000  000f1318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000f5528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008438 	.word	0x08008438

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008438 	.word	0x08008438

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 faa8 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f81c 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f7ff ffd6 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 80001a0:	f000 f8ec 	bl	800037c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80001a4:	f007 fc76 	bl	8007a94 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001a8:	f000 f994 	bl	80004d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80001ac:	2100      	movs	r1, #0
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <main+0x38>)
 80001b0:	f003 f82e 	bl	8003210 <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80001b4:	2100      	movs	r1, #0
 80001b6:	4805      	ldr	r0, [pc, #20]	; (80001cc <main+0x3c>)
 80001b8:	f003 f82a 	bl	8003210 <HAL_TIM_OC_Start>

  my_parameters.prescaler = 4799;
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <main+0x40>)
 80001be:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80001c2:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c4:	e7fe      	b.n	80001c4 <main+0x34>
 80001c6:	bf00      	nop
 80001c8:	20000240 	.word	0x20000240
 80001cc:	200001f8 	.word	0x200001f8
 80001d0:	200001dc 	.word	0x200001dc

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f008 f8ee 	bl	80083c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fabe 	bl	80027ac <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000236:	f000 f828 	bl	800028a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2101      	movs	r1, #1
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fd2a 	bl	8002cb0 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000262:	f000 f812 	bl	800028a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000266:	2310      	movs	r3, #16
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800026a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800026e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fe78 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800027e:	f000 f804 	bl	800028a <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3750      	adds	r7, #80	; 0x50
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028e:	b672      	cpsid	i
}
 8000290:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000292:	e7fe      	b.n	8000292 <Error_Handler+0x8>

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <HAL_MspInit+0x5c>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <HAL_MspInit+0x5c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_MspInit+0x5c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <HAL_MspInit+0x5c>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <HAL_MspInit+0x5c>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_MspInit+0x5c>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <HAL_MspInit+0x60>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <HAL_MspInit+0x60>)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010000 	.word	0x40010000

080002f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002fc:	e7fe      	b.n	80002fc <NMI_Handler+0x4>

080002fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <HardFault_Handler+0x4>

08000304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <MemManage_Handler+0x4>

0800030a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <BusFault_Handler+0x4>

08000310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000314:	e7fe      	b.n	8000314 <UsageFault_Handler+0x4>

08000316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800033e:	f000 fa19 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800034e:	f000 fde4 	bl	8000f1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000f54 	.word	0x20000f54

0800035c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000362:	f000 fdda 	bl	8000f1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000f54 	.word	0x20000f54

08000370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000382:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039c:	f107 0320 	add.w	r3, r7, #32
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	2220      	movs	r2, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f008 f804 	bl	80083c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003bc:	4b43      	ldr	r3, [pc, #268]	; (80004cc <MX_TIM1_Init+0x150>)
 80003be:	4a44      	ldr	r2, [pc, #272]	; (80004d0 <MX_TIM1_Init+0x154>)
 80003c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80003c2:	4b42      	ldr	r3, [pc, #264]	; (80004cc <MX_TIM1_Init+0x150>)
 80003c4:	222f      	movs	r2, #47	; 0x2f
 80003c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	4b40      	ldr	r3, [pc, #256]	; (80004cc <MX_TIM1_Init+0x150>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003ce:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <MX_TIM1_Init+0x150>)
 80003d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d6:	4b3d      	ldr	r3, [pc, #244]	; (80004cc <MX_TIM1_Init+0x150>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80003dc:	4b3b      	ldr	r3, [pc, #236]	; (80004cc <MX_TIM1_Init+0x150>)
 80003de:	2201      	movs	r2, #1
 80003e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e2:	4b3a      	ldr	r3, [pc, #232]	; (80004cc <MX_TIM1_Init+0x150>)
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e8:	4838      	ldr	r0, [pc, #224]	; (80004cc <MX_TIM1_Init+0x150>)
 80003ea:	f002 fe73 	bl	80030d4 <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003f4:	f7ff ff49 	bl	800028a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80003f8:	4834      	ldr	r0, [pc, #208]	; (80004cc <MX_TIM1_Init+0x150>)
 80003fa:	f002 feba 	bl	8003172 <HAL_TIM_OC_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000404:	f7ff ff41 	bl	800028a <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000408:	2108      	movs	r1, #8
 800040a:	4830      	ldr	r0, [pc, #192]	; (80004cc <MX_TIM1_Init+0x150>)
 800040c:	f002 ffa2 	bl	8003354 <HAL_TIM_OnePulse_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000416:	f7ff ff38 	bl	800028a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800041a:	2306      	movs	r3, #6
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800041e:	2310      	movs	r3, #16
 8000420:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000422:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000426:	4619      	mov	r1, r3
 8000428:	4828      	ldr	r0, [pc, #160]	; (80004cc <MX_TIM1_Init+0x150>)
 800042a:	f003 f849 	bl	80034c0 <HAL_TIM_SlaveConfigSynchro>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000434:	f7ff ff29 	bl	800028a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000440:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000444:	4619      	mov	r1, r3
 8000446:	4821      	ldr	r0, [pc, #132]	; (80004cc <MX_TIM1_Init+0x150>)
 8000448:	f003 fb98 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000452:	f7ff ff1a 	bl	800028a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000456:	2330      	movs	r3, #48	; 0x30
 8000458:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045e:	2300      	movs	r3, #0
 8000460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000462:	2300      	movs	r3, #0
 8000464:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800046a:	2300      	movs	r3, #0
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000472:	f107 0320 	add.w	r3, r7, #32
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <MX_TIM1_Init+0x150>)
 800047c:	f002 ffc4 	bl	8003408 <HAL_TIM_OC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000486:	f7ff ff00 	bl	800028a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <MX_TIM1_Init+0x150>)
 80004ae:	f003 fbc3 	bl	8003c38 <HAL_TIMEx_ConfigBreakDeadTime>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80004b8:	f7ff fee7 	bl	800028a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <MX_TIM1_Init+0x150>)
 80004be:	f000 f89b 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 80004c2:	bf00      	nop
 80004c4:	3758      	adds	r7, #88	; 0x58
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200001f8 	.word	0x200001f8
 80004d0:	40012c00 	.word	0x40012c00

080004d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004da:	f107 0320 	add.w	r3, r7, #32
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <MX_TIM2_Init+0xac>)
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_TIM2_Init+0xac>)
 8000500:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_TIM2_Init+0xac>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_TIM2_Init+0xac>)
 800050e:	2263      	movs	r2, #99	; 0x63
 8000510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_TIM2_Init+0xac>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_TIM2_Init+0xac>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800051e:	4818      	ldr	r0, [pc, #96]	; (8000580 <MX_TIM2_Init+0xac>)
 8000520:	f002 fe27 	bl	8003172 <HAL_TIM_OC_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800052a:	f7ff feae 	bl	800028a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800052e:	2320      	movs	r3, #32
 8000530:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	4619      	mov	r1, r3
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <MX_TIM2_Init+0xac>)
 800053e:	f003 fb1d 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000548:	f7ff fe9f 	bl	800028a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800054c:	2330      	movs	r3, #48	; 0x30
 800054e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <MX_TIM2_Init+0xac>)
 8000564:	f002 ff50 	bl	8003408 <HAL_TIM_OC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800056e:	f7ff fe8c 	bl	800028a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <MX_TIM2_Init+0xac>)
 8000574:	f000 f840 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	; 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000240 	.word	0x20000240

08000584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_TIM_Base_MspInit+0x34>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d10b      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <HAL_TIM_Base_MspInit+0x38>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_TIM_Base_MspInit+0x38>)
 800059c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_TIM_Base_MspInit+0x38>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d0:	d10b      	bne.n	80005ea <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_TIM_OC_MspInit+0x34>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_TIM_OC_MspInit+0x34>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_TIM_OC_MspInit+0x34>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <HAL_TIM_MspPostInit+0x98>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d119      	bne.n	800064c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4814      	ldr	r0, [pc, #80]	; (8000698 <HAL_TIM_MspPostInit+0xa0>)
 8000646:	f000 f9bf 	bl	80009c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800064a:	e01c      	b.n	8000686 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000654:	d117      	bne.n	8000686 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_TIM_MspPostInit+0x9c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_TIM_MspPostInit+0xa0>)
 8000682:	f000 f9a1 	bl	80009c8 <HAL_GPIO_Init>
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40012c00 	.word	0x40012c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800

0800069c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800069c:	f7ff fe68 	bl	8000370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a2:	490c      	ldr	r1, [pc, #48]	; (80006d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b8:	4c09      	ldr	r4, [pc, #36]	; (80006e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f007 fe85 	bl	80083d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fd61 	bl	8000190 <main>
  bx lr
 80006ce:	4770      	bx	lr
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006d8:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 80006dc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006e0:	20001464 	.word	0x20001464

080006e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x28>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f923 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	200f      	movs	r0, #15
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff fdc6 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f93b 	bl	80009ae <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f903 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000008 	.word	0x20000008
 8000794:	20000288 	.word	0x20000288

08000798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000288 	.word	0x20000288

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <__NVIC_EnableIRQ+0x34>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff90 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff2d 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff42 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff90 	bl	800089c <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5f 	bl	8000848 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff35 	bl	8000810 <__NVIC_EnableIRQ>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffa2 	bl	8000900 <SysTick_Config>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009da:	e169      	b.n	8000cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009dc:	2201      	movs	r2, #1
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69fa      	ldr	r2, [r7, #28]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f040 8158 	bne.w	8000caa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a9a      	ldr	r2, [pc, #616]	; (8000c68 <HAL_GPIO_Init+0x2a0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d05e      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a04:	4a98      	ldr	r2, [pc, #608]	; (8000c68 <HAL_GPIO_Init+0x2a0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d875      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a0a:	4a98      	ldr	r2, [pc, #608]	; (8000c6c <HAL_GPIO_Init+0x2a4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d058      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a10:	4a96      	ldr	r2, [pc, #600]	; (8000c6c <HAL_GPIO_Init+0x2a4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d86f      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a16:	4a96      	ldr	r2, [pc, #600]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d052      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d869      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a22:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_GPIO_Init+0x2ac>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d04c      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a28:	4a92      	ldr	r2, [pc, #584]	; (8000c74 <HAL_GPIO_Init+0x2ac>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d863      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a2e:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d046      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a34:	4a90      	ldr	r2, [pc, #576]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d85d      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d82a      	bhi.n	8000a94 <HAL_GPIO_Init+0xcc>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d859      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a42:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <HAL_GPIO_Init+0x80>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000ac3 	.word	0x08000ac3
 8000a4c:	08000a9d 	.word	0x08000a9d
 8000a50:	08000aaf 	.word	0x08000aaf
 8000a54:	08000af1 	.word	0x08000af1
 8000a58:	08000af7 	.word	0x08000af7
 8000a5c:	08000af7 	.word	0x08000af7
 8000a60:	08000af7 	.word	0x08000af7
 8000a64:	08000af7 	.word	0x08000af7
 8000a68:	08000af7 	.word	0x08000af7
 8000a6c:	08000af7 	.word	0x08000af7
 8000a70:	08000af7 	.word	0x08000af7
 8000a74:	08000af7 	.word	0x08000af7
 8000a78:	08000af7 	.word	0x08000af7
 8000a7c:	08000af7 	.word	0x08000af7
 8000a80:	08000af7 	.word	0x08000af7
 8000a84:	08000af7 	.word	0x08000af7
 8000a88:	08000af7 	.word	0x08000af7
 8000a8c:	08000aa5 	.word	0x08000aa5
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	4a79      	ldr	r2, [pc, #484]	; (8000c7c <HAL_GPIO_Init+0x2b4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9a:	e02c      	b.n	8000af6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e029      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e024      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e01f      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	330c      	adds	r3, #12
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e01a      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aca:	2304      	movs	r3, #4
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e013      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	611a      	str	r2, [r3, #16]
          break;
 8000ae2:	e009      	b.n	8000af8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	615a      	str	r2, [r3, #20]
          break;
 8000aee:	e003      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	e000      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          break;
 8000af6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	d801      	bhi.n	8000b02 <HAL_GPIO_Init+0x13a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	e001      	b.n	8000b06 <HAL_GPIO_Init+0x13e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3304      	adds	r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d802      	bhi.n	8000b14 <HAL_GPIO_Init+0x14c>
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x152>
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	3b08      	subs	r3, #8
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	210f      	movs	r1, #15
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	6a39      	ldr	r1, [r7, #32]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80b1 	beq.w	8000caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b48:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b60:	4a48      	ldr	r2, [pc, #288]	; (8000c84 <HAL_GPIO_Init+0x2bc>)
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a40      	ldr	r2, [pc, #256]	; (8000c88 <HAL_GPIO_Init+0x2c0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d013      	beq.n	8000bb4 <HAL_GPIO_Init+0x1ec>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <HAL_GPIO_Init+0x2c4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d00d      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3e      	ldr	r2, [pc, #248]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d007      	beq.n	8000bac <HAL_GPIO_Init+0x1e4>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <HAL_GPIO_Init+0x2cc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d101      	bne.n	8000ba8 <HAL_GPIO_Init+0x1e0>
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e004      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb8:	f002 0203 	and.w	r2, r2, #3
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc6:	492f      	ldr	r1, [pc, #188]	; (8000c84 <HAL_GPIO_Init+0x2bc>)
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	492c      	ldr	r1, [pc, #176]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4928      	ldr	r1, [pc, #160]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60cb      	str	r3, [r1, #12]
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	491e      	ldr	r1, [pc, #120]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4918      	ldr	r1, [pc, #96]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4914      	ldr	r1, [pc, #80]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d021      	beq.n	8000c9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	490e      	ldr	r1, [pc, #56]	; (8000c98 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]
 8000c64:	e021      	b.n	8000caa <HAL_GPIO_Init+0x2e2>
 8000c66:	bf00      	nop
 8000c68:	10320000 	.word	0x10320000
 8000c6c:	10310000 	.word	0x10310000
 8000c70:	10220000 	.word	0x10220000
 8000c74:	10210000 	.word	0x10210000
 8000c78:	10120000 	.word	0x10120000
 8000c7c:	10110000 	.word	0x10110000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_GPIO_Init+0x304>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	4909      	ldr	r1, [pc, #36]	; (8000ccc <HAL_GPIO_Init+0x304>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3301      	adds	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f47f ae8e 	bne.w	80009dc <HAL_GPIO_Init+0x14>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	372c      	adds	r7, #44	; 0x2c
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af06      	add	r7, sp, #24
 8000cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0f1      	b.n	8000ec6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d106      	bne.n	8000cfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f007 f8b2 	bl	8007e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 f80c 	bl	8003d26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	687e      	ldr	r6, [r7, #4]
 8000d16:	466d      	mov	r5, sp
 8000d18:	f106 0410 	add.w	r4, r6, #16
 8000d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	1d33      	adds	r3, r6, #4
 8000d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d28:	6838      	ldr	r0, [r7, #0]
 8000d2a:	f002 ffd6 	bl	8003cda <USB_CoreInit>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2202      	movs	r2, #2
 8000d38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e0c2      	b.n	8000ec6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 f807 	bl	8003d5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e040      	b.n	8000dd4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3301      	adds	r3, #1
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	440b      	add	r3, r1
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3338      	adds	r3, #56	; 0x38
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	333c      	adds	r3, #60	; 0x3c
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3340      	adds	r3, #64	; 0x40
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3b9      	bcc.n	8000d52 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	e044      	b.n	8000e6e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	440b      	add	r3, r1
 8000e34:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e3c:	7bfa      	ldrb	r2, [r7, #15]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3b5      	bcc.n	8000de4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	687e      	ldr	r6, [r7, #4]
 8000e80:	466d      	mov	r5, sp
 8000e82:	f106 0410 	add.w	r4, r6, #16
 8000e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	1d33      	adds	r3, r6, #4
 8000e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f002 ff6d 	bl	8003d72 <USB_DevInit>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00d      	b.n	8000ec6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 f9ef 	bl	80062a2 <USB_DevDisconnect>

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ece <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_PCD_Start+0x16>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e016      	b.n	8000f12 <HAL_PCD_Start+0x44>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 ff02 	bl	8003cfa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f007 fa2c 	bl	8008356 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 f9c3 	bl	800628e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 f9c5 	bl	80062b6 <USB_ReadInterrupts>
 8000f2c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fb1b 	bl	8001574 <PCD_EP_ISR_Handler>

    return;
 8000f3e:	e119      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d013      	beq.n	8000f72 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f006 ffff 	bl	8007f66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f905 	bl	800117a <HAL_PCD_SetAddress>

    return;
 8000f70:	e100      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00c      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f94:	e0ee      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00c      	beq.n	8000fba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fb8:	e0dc      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d027      	beq.n	8001014 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0204 	bic.w	r2, r2, #4
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0208 	bic.w	r2, r2, #8
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f006 ffef 	bl	8007fd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800100c:	b292      	uxth	r2, r2
 800100e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001012:	e0af      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8083 	beq.w	8001126 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	77fb      	strb	r3, [r7, #31]
 8001024:	e010      	b.n	8001048 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	441a      	add	r2, r3
 8001032:	7ffb      	ldrb	r3, [r7, #31]
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	b292      	uxth	r2, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9eb      	bls.n	8001026 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	b292      	uxth	r2, r2
 8001062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	b292      	uxth	r2, r2
 800107a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800107e:	bf00      	nop
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001088:	b29b      	uxth	r3, r3
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f6      	beq.n	8001080 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a4:	b292      	uxth	r2, r2
 80010a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	e00f      	b.n	80010d0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	4611      	mov	r1, r2
 80010b8:	7ffa      	ldrb	r2, [r7, #31]
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	440a      	add	r2, r1
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3320      	adds	r3, #32
 80010c2:	443b      	add	r3, r7
 80010c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80010c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	3301      	adds	r3, #1
 80010ce:	77fb      	strb	r3, [r7, #31]
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d9ec      	bls.n	80010b0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0208 	orr.w	r2, r2, #8
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001100:	b292      	uxth	r2, r2
 8001102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0204 	orr.w	r2, r2, #4
 8001118:	b292      	uxth	r2, r2
 800111a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f006 ff40 	bl	8007fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001124:	e026      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00f      	beq.n	8001150 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001142:	b292      	uxth	r2, r2
 8001144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f006 fefe 	bl	8007f4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800114e:	e011      	b.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800116c:	b292      	uxth	r2, r2
 800116e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001172:	bf00      	nop
  }
}
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_PCD_SetAddress+0x1a>
 8001190:	2302      	movs	r3, #2
 8001192:	e013      	b.n	80011bc <HAL_PCD_SetAddress+0x42>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 f85b 	bl	8006268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	70fb      	strb	r3, [r7, #3]
 80011d6:	460b      	mov	r3, r1
 80011d8:	803b      	strh	r3, [r7, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da0e      	bge.n	8001208 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2201      	movs	r2, #1
 8001204:	705a      	strb	r2, [r3, #1]
 8001206:	e00e      	b.n	8001226 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 0207 	and.w	r2, r3, #7
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	b2da      	uxtb	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001232:	883a      	ldrh	r2, [r7, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	78ba      	ldrb	r2, [r7, #2]
 800123c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d102      	bne.n	800124a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_PCD_EP_Open+0x94>
 8001254:	2302      	movs	r3, #2
 8001256:	e00e      	b.n	8001276 <HAL_PCD_EP_Open+0xb2>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fda4 	bl	8003db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001274:	7afb      	ldrb	r3, [r7, #11]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800128a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0e      	bge.n	80012b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
 80012ae:	e00e      	b.n	80012ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0207 	and.w	r2, r3, #7
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_PCD_EP_Close+0x6a>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e00e      	b.n	8001306 <HAL_PCD_EP_Close+0x88>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 f91c 	bl	8004534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	460b      	mov	r3, r1
 800131c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	f003 0207 	and.w	r2, r3, #7
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6979      	ldr	r1, [r7, #20]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fad3 	bl	800490c <USB_EPStartXfer>

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	f003 0207 	and.w	r2, r3, #7
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	460b      	mov	r3, r1
 80013ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2201      	movs	r2, #1
 80013e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6979      	ldr	r1, [r7, #20]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fa85 	bl	800490c <USB_EPStartXfer>

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f003 0207 	and.w	r2, r3, #7
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d901      	bls.n	800142a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e04c      	b.n	80014c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800142a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da0e      	bge.n	8001450 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	705a      	strb	r2, [r3, #1]
 800144e:	e00c      	b.n	800146a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	b2da      	uxtb	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_PCD_EP_SetStall+0x7e>
 8001486:	2302      	movs	r3, #2
 8001488:	e01c      	b.n	80014c4 <HAL_PCD_EP_SetStall+0xb8>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68f9      	ldr	r1, [r7, #12]
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fde8 	bl	800606e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f004 ff0d 	bl	80062d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f003 020f 	and.w	r2, r3, #15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d901      	bls.n	80014ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e040      	b.n	800156c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da0e      	bge.n	8001510 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	705a      	strb	r2, [r3, #1]
 800150e:	e00e      	b.n	800152e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	f003 0207 	and.w	r2, r3, #7
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	b2da      	uxtb	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_PCD_EP_ClrStall+0x82>
 800154a:	2302      	movs	r3, #2
 800154c:	e00e      	b.n	800156c <HAL_PCD_EP_ClrStall+0xa0>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fdd6 	bl	800610e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	; 0x58
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800157c:	e3bf      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800158a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001598:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 8179 	bne.w	8001894 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d152      	bne.n	8001654 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3328      	adds	r3, #40	; 0x28
 80015d6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	3302      	adds	r3, #2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	441a      	add	r2, r3
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f006 fc7e 	bl	8007f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 836b 	beq.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
 8001628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 8366 	bne.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b292      	uxth	r2, r2
 8001646:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001652:	e354      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800165a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001666:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800166a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166e:	2b00      	cmp	r3, #0
 8001670:	d034      	beq.n	80016dc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800167a:	b29b      	uxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	3306      	adds	r3, #6
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80016a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f004 fe5f 	bl	8006374 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016c2:	4013      	ands	r3, r2
 80016c4:	823b      	strh	r3, [r7, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	8a3a      	ldrh	r2, [r7, #16]
 80016cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d0:	b292      	uxth	r2, r2
 80016d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 fbf1 	bl	8007ebc <HAL_PCD_SetupStageCallback>
 80016da:	e310      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f280 830c 	bge.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016f2:	4013      	ands	r3, r2
 80016f4:	83fb      	strh	r3, [r7, #30]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001700:	b292      	uxth	r2, r2
 8001702:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	3306      	adds	r3, #6
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800172c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d019      	beq.n	800176c <PCD_EP_ISR_Handler+0x1f8>
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001750:	b29b      	uxth	r3, r3
 8001752:	f004 fe0f 	bl	8006374 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	441a      	add	r2, r3
 8001760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001762:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001764:	2100      	movs	r1, #0
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f006 fbba 	bl	8007ee0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001776:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800177a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 82bd 	bne.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
 8001784:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001788:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800178c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001790:	f000 82b5 	beq.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4413      	add	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017be:	b29a      	uxth	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b3e      	cmp	r3, #62	; 0x3e
 80017ca:	d91d      	bls.n	8001808 <PCD_EP_ISR_Handler+0x294>
 80017cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
 80017d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <PCD_EP_ISR_Handler+0x272>
 80017e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e2:	3b01      	subs	r3, #1
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	029b      	lsls	r3, r3, #10
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001800:	b29a      	uxth	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	801a      	strh	r2, [r3, #0]
 8001806:	e026      	b.n	8001856 <PCD_EP_ISR_Handler+0x2e2>
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <PCD_EP_ISR_Handler+0x2b2>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800181a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800181e:	b29a      	uxth	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	801a      	strh	r2, [r3, #0]
 8001824:	e017      	b.n	8001856 <PCD_EP_ISR_Handler+0x2e2>
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
 800182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <PCD_EP_ISR_Handler+0x2cc>
 800183a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183c:	3301      	adds	r3, #1
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29a      	uxth	r2, r3
 8001846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001848:	b29b      	uxth	r3, r3
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	b29b      	uxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b29a      	uxth	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	827b      	strh	r3, [r7, #18]
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800186e:	827b      	strh	r3, [r7, #18]
 8001870:	8a7b      	ldrh	r3, [r7, #18]
 8001872:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001876:	827b      	strh	r3, [r7, #18]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	8a7b      	ldrh	r3, [r7, #18]
 800187e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188e:	b29b      	uxth	r3, r3
 8001890:	8013      	strh	r3, [r2, #0]
 8001892:	e234      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f280 80fc 	bge.w	8001aaa <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018c8:	4013      	ands	r3, r2
 80018ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80018e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e4:	b292      	uxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018e8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	7b1b      	ldrb	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d125      	bne.n	8001952 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	3306      	adds	r3, #6
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4413      	add	r3, r2
 8001924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800192e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8092 	beq.w	8001a60 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	6959      	ldr	r1, [r3, #20]
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	88da      	ldrh	r2, [r3, #6]
 8001948:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800194c:	f004 fd12 	bl	8006374 <USB_ReadPMA>
 8001950:	e086      	b.n	8001a60 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	78db      	ldrb	r3, [r3, #3]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d10a      	bne.n	8001970 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800195a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800195e:	461a      	mov	r2, r3
 8001960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f9d9 	bl	8001d1a <HAL_PCD_EP_DB_Receive>
 8001968:	4603      	mov	r3, r0
 800196a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800196e:	e077      	b.n	8001a60 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	441a      	add	r2, r3
 800199c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80019a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	3302      	adds	r3, #2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02e      	beq.n	8001a60 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	6959      	ldr	r1, [r3, #20]
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	891a      	ldrh	r2, [r3, #8]
 8001a0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a12:	f004 fcaf 	bl	8006374 <USB_ReadPMA>
 8001a16:	e023      	b.n	8001a60 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3306      	adds	r3, #6
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a40:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	6959      	ldr	r1, [r3, #20]
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	895a      	ldrh	r2, [r3, #10]
 8001a58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a5c:	f004 fc8a 	bl	8006374 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a68:	441a      	add	r2, r3
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a76:	441a      	add	r2, r3
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <PCD_EP_ISR_Handler+0x51c>
 8001a84:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d206      	bcs.n	8001a9e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f006 fa22 	bl	8007ee0 <HAL_PCD_DataOutStageCallback>
 8001a9c:	e005      	b.n	8001aaa <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 ff31 	bl	800490c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8123 	beq.w	8001cfe <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ab8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	441a      	add	r2, r3
 8001af8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	78db      	ldrb	r3, [r3, #3]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f040 80a2 	bne.w	8001c56 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1a:	7b1b      	ldrb	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8093 	beq.w	8001c48 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d046      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d126      	bne.n	8001b84 <PCD_EP_ISR_Handler+0x610>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	4413      	add	r3, r2
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	011a      	lsls	r2, r3, #4
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	4413      	add	r3, r2
 8001b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	e061      	b.n	8001c48 <PCD_EP_ISR_Handler+0x6d4>
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d15d      	bne.n	8001c48 <PCD_EP_ISR_Handler+0x6d4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	011a      	lsls	r2, r3, #4
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	4413      	add	r3, r2
 8001bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	e045      	b.n	8001c48 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d126      	bne.n	8001c18 <PCD_EP_ISR_Handler+0x6a4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	4413      	add	r3, r2
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	011a      	lsls	r2, r3, #4
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	4413      	add	r3, r2
 8001bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	e017      	b.n	8001c48 <PCD_EP_ISR_Handler+0x6d4>
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d113      	bne.n	8001c48 <PCD_EP_ISR_Handler+0x6d4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2e:	4413      	add	r3, r2
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	011a      	lsls	r2, r3, #4
 8001c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f006 f961 	bl	8007f16 <HAL_PCD_DataInStageCallback>
 8001c54:	e053      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d146      	bne.n	8001cf0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	3302      	adds	r3, #2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d907      	bls.n	8001caa <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ca2:	1ad2      	subs	r2, r2, r3
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	619a      	str	r2, [r3, #24]
 8001ca8:	e002      	b.n	8001cb0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f006 f929 	bl	8007f16 <HAL_PCD_DataInStageCallback>
 8001cc4:	e01b      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cce:	441a      	add	r2, r3
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cdc:	441a      	add	r2, r3
 8001cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fe0f 	bl	800490c <USB_EPStartXfer>
 8001cee:	e006      	b.n	8001cfe <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f91b 	bl	8001f34 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f6ff ac37 	blt.w	800157e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3758      	adds	r7, #88	; 0x58
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	4613      	mov	r3, r2
 8001d26:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d07e      	beq.n	8001e30 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	3302      	adds	r3, #2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	8b7b      	ldrh	r3, [r7, #26]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d306      	bcc.n	8001d74 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	8b7b      	ldrh	r3, [r7, #26]
 8001d6c:	1ad2      	subs	r2, r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	e002      	b.n	8001d7a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d123      	bne.n	8001dca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	833b      	strh	r3, [r7, #24]
 8001d9e:	8b3b      	ldrh	r3, [r7, #24]
 8001da0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001da4:	833b      	strh	r3, [r7, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	441a      	add	r2, r3
 8001db4:	8b3b      	ldrh	r3, [r7, #24]
 8001db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01f      	beq.n	8001e14 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dee:	82fb      	strh	r3, [r7, #22]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	441a      	add	r2, r3
 8001dfe:	8afb      	ldrh	r3, [r7, #22]
 8001e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e14:	8b7b      	ldrh	r3, [r7, #26]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6959      	ldr	r1, [r3, #20]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	891a      	ldrh	r2, [r3, #8]
 8001e28:	8b7b      	ldrh	r3, [r7, #26]
 8001e2a:	f004 faa3 	bl	8006374 <USB_ReadPMA>
 8001e2e:	e07c      	b.n	8001f2a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	3306      	adds	r3, #6
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	8b7b      	ldrh	r3, [r7, #26]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d306      	bcc.n	8001e72 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	8b7b      	ldrh	r3, [r7, #26]
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	e002      	b.n	8001e78 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d123      	bne.n	8001ec8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	83fb      	strh	r3, [r7, #30]
 8001e9c:	8bfb      	ldrh	r3, [r7, #30]
 8001e9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ea2:	83fb      	strh	r3, [r7, #30]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11f      	bne.n	8001f12 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eec:	83bb      	strh	r3, [r7, #28]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	441a      	add	r2, r3
 8001efc:	8bbb      	ldrh	r3, [r7, #28]
 8001efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f12:	8b7b      	ldrh	r3, [r7, #26]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	895a      	ldrh	r2, [r3, #10]
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	f004 fa25 	bl	8006374 <USB_ReadPMA>
    }
  }

  return count;
 8001f2a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0a4      	sub	sp, #144	; 0x90
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 81dd 	beq.w	8002308 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d907      	bls.n	8001f96 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f8e:	1ad2      	subs	r2, r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	619a      	str	r2, [r3, #24]
 8001f94:	e002      	b.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 80b9 	bne.w	8002118 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d126      	bne.n	8001ffc <HAL_PCD_EP_DB_Transmit+0xc8>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	011a      	lsls	r2, r3, #4
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	e01a      	b.n	8002032 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d116      	bne.n	8002032 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002018:	4413      	add	r3, r2
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	011a      	lsls	r2, r3, #4
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	4413      	add	r3, r2
 8002026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d126      	bne.n	800208e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	011a      	lsls	r2, r3, #4
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002072:	b29a      	uxth	r2, r3
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002086:	b29a      	uxth	r2, r3
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	e017      	b.n	80020be <HAL_PCD_EP_DB_Transmit+0x18a>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d113      	bne.n	80020be <HAL_PCD_EP_DB_Transmit+0x18a>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	4413      	add	r3, r2
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	011a      	lsls	r2, r3, #4
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	4413      	add	r3, r2
 80020b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f005 ff26 	bl	8007f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 82fc 	beq.w	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f0:	82fb      	strh	r3, [r7, #22]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	441a      	add	r2, r3
 8002100:	8afb      	ldrh	r3, [r7, #22]
 8002102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002112:	b29b      	uxth	r3, r3
 8002114:	8013      	strh	r3, [r2, #0]
 8002116:	e2da      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d021      	beq.n	8002166 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800215a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	b29b      	uxth	r3, r3
 8002164:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216c:	2b01      	cmp	r3, #1
 800216e:	f040 82ae 	bne.w	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800217a:	441a      	add	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002188:	441a      	add	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	429a      	cmp	r2, r3
 8002198:	d30b      	bcc.n	80021b2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	e017      	b.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80021ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021ca:	e00a      	b.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d165      	bne.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x382>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fe:	4413      	add	r3, r2
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	011a      	lsls	r2, r3, #4
 8002208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220a:	4413      	add	r3, r2
 800220c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221c:	b29a      	uxth	r2, r3
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002226:	2b3e      	cmp	r3, #62	; 0x3e
 8002228:	d91d      	bls.n	8002266 <HAL_PCD_EP_DB_Transmit+0x332>
 800222a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
 8002232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_PCD_EP_DB_Transmit+0x310>
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	3b01      	subs	r3, #1
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29a      	uxth	r2, r3
 800224a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224c:	b29b      	uxth	r3, r3
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	b29b      	uxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225e:	b29a      	uxth	r2, r3
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	e044      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_PCD_EP_DB_Transmit+0x350>
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227c:	b29a      	uxth	r2, r3
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	e035      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
 800228c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229a:	3301      	adds	r3, #1
 800229c:	64bb      	str	r3, [r7, #72]	; 0x48
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b2:	801a      	strh	r2, [r3, #0]
 80022b4:	e01c      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d118      	bne.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	4413      	add	r3, r2
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	011a      	lsls	r2, r3, #4
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	4413      	add	r3, r2
 80022e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022e4:	643b      	str	r3, [r7, #64]	; 0x40
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6959      	ldr	r1, [r3, #20]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	891a      	ldrh	r2, [r3, #8]
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002300:	b29b      	uxth	r3, r3
 8002302:	f003 fff2 	bl	80062ea <USB_WritePMA>
 8002306:	e1e2      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	3306      	adds	r3, #6
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800233c:	429a      	cmp	r2, r3
 800233e:	d307      	bcc.n	8002350 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	619a      	str	r2, [r3, #24]
 800234e:	e002      	b.n	8002356 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 80c0 	bne.w	80024e0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d126      	bne.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237c:	4413      	add	r3, r2
 800237e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	011a      	lsls	r2, r3, #4
 8002386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002388:	4413      	add	r3, r2
 800238a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800238e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239a:	b29a      	uxth	r2, r3
 800239c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b2:	801a      	strh	r2, [r3, #0]
 80023b4:	e01a      	b.n	80023ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d116      	bne.n	80023ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	667b      	str	r3, [r7, #100]	; 0x64
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023d2:	4413      	add	r3, r2
 80023d4:	667b      	str	r3, [r7, #100]	; 0x64
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	011a      	lsls	r2, r3, #4
 80023dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023de:	4413      	add	r3, r2
 80023e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023e4:	663b      	str	r3, [r7, #96]	; 0x60
 80023e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e8:	2200      	movs	r2, #0
 80023ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	677b      	str	r3, [r7, #116]	; 0x74
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12b      	bne.n	8002452 <HAL_PCD_EP_DB_Transmit+0x51e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	4413      	add	r3, r2
 8002410:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	011a      	lsls	r2, r3, #4
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	4413      	add	r3, r2
 800241c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002448:	b29a      	uxth	r2, r3
 800244a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	e017      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d113      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0x54e>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002468:	4413      	add	r3, r2
 800246a:	677b      	str	r3, [r7, #116]	; 0x74
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002474:	4413      	add	r3, r2
 8002476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800247a:	673b      	str	r3, [r7, #112]	; 0x70
 800247c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f005 fd44 	bl	8007f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 811a 	bne.w	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
 80024de:	e0f6      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800251a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	b29b      	uxth	r3, r3
 800252c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 80ca 	bne.w	80026ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002542:	441a      	add	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002550:	441a      	add	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	429a      	cmp	r2, r3
 8002560:	d30b      	bcc.n	800257a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	621a      	str	r2, [r3, #32]
 8002578:	e017      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002582:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002592:	e00a      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	657b      	str	r3, [r7, #84]	; 0x54
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d165      	bne.n	8002684 <HAL_PCD_EP_DB_Transmit+0x750>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	4413      	add	r3, r2
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	011a      	lsls	r2, r3, #4
 80025d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d8:	4413      	add	r3, r2
 80025da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025de:	65bb      	str	r3, [r7, #88]	; 0x58
 80025e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f4:	2b3e      	cmp	r3, #62	; 0x3e
 80025f6:	d91d      	bls.n	8002634 <HAL_PCD_EP_DB_Transmit+0x700>
 80025f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <HAL_PCD_EP_DB_Transmit+0x6de>
 800260c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260e:	3b01      	subs	r3, #1
 8002610:	66bb      	str	r3, [r7, #104]	; 0x68
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
 8002618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261a:	b29b      	uxth	r3, r3
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	b29b      	uxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262c:	b29a      	uxth	r2, r3
 800262e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e041      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x71e>
 800263c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264a:	b29a      	uxth	r2, r3
 800264c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e032      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	66bb      	str	r3, [r7, #104]	; 0x68
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_PCD_EP_DB_Transmit+0x738>
 8002666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002668:	3301      	adds	r3, #1
 800266a:	66bb      	str	r3, [r7, #104]	; 0x68
 800266c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002674:	b29b      	uxth	r3, r3
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	b29b      	uxth	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	b29a      	uxth	r2, r3
 800267e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e019      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d115      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x784>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	4413      	add	r3, r2
 800269c:	657b      	str	r3, [r7, #84]	; 0x54
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ac:	653b      	str	r3, [r7, #80]	; 0x50
 80026ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6959      	ldr	r1, [r3, #20]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	895a      	ldrh	r2, [r3, #10]
 80026c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f003 fe0e 	bl	80062ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e8:	82bb      	strh	r3, [r7, #20]
 80026ea:	8abb      	ldrh	r3, [r7, #20]
 80026ec:	f083 0310 	eor.w	r3, r3, #16
 80026f0:	82bb      	strh	r3, [r7, #20]
 80026f2:	8abb      	ldrh	r3, [r7, #20]
 80026f4:	f083 0320 	eor.w	r3, r3, #32
 80026f8:	82bb      	strh	r3, [r7, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	8abb      	ldrh	r3, [r7, #20]
 800270a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3790      	adds	r7, #144	; 0x90
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	4613      	mov	r3, r2
 8002738:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e009      	b.n	8002772 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800275e:	897a      	ldrh	r2, [r7, #10]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2200      	movs	r2, #0
 800277c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	b29a      	uxth	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	80da      	strh	r2, [r3, #6]
 8002786:	e00b      	b.n	80027a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2201      	movs	r2, #1
 800278c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	b29a      	uxth	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	b29a      	uxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e272      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027cc:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d00c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d8:	4b8f      	ldr	r3, [pc, #572]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d112      	bne.n	800280a <HAL_RCC_OscConfig+0x5e>
 80027e4:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d10b      	bne.n	800280a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d06c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x12c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d168      	bne.n	80028d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e24c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x76>
 8002814:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a7f      	ldr	r2, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e02e      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x98>
 800282a:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a77      	ldr	r2, [pc, #476]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800283c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e01d      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0xbc>
 800284e:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002868:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6a      	ldr	r2, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a67      	ldr	r2, [pc, #412]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fd ff86 	bl	8000798 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fd ff82 	bl	8000798 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e200      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0xe4>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fd ff72 	bl	8000798 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fd ff6e 	bl	8000798 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1ec      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x10c>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e6:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x18c>
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x176>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1c0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4939      	ldr	r1, [pc, #228]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x270>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fd ff27 	bl	8000798 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294e:	f7fd ff23 	bl	8000798 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1a1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4927      	ldr	r1, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x270>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fd ff06 	bl	8000798 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fd ff02 	bl	8000798 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e180      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03a      	beq.n	8002a30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d019      	beq.n	80029f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_RCC_OscConfig+0x274>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fd fee6 	bl	8000798 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fd fee2 	bl	8000798 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e160      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f000 fa9c 	bl	8002f2c <RCC_Delay>
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_RCC_OscConfig+0x274>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7fd fecc 	bl	8000798 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a02:	e00f      	b.n	8002a24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fd fec8 	bl	8000798 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d908      	bls.n	8002a24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e146      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	42420000 	.word	0x42420000
 8002a20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e9      	bne.n	8002a04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a6 	beq.w	8002b8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a87      	ldr	r2, [pc, #540]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fd fe89 	bl	8000798 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fd fe85 	bl	8000798 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e103      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x312>
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e02d      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x334>
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	e01c      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCC_OscConfig+0x356>
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a60      	ldr	r2, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	e00b      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002b02:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6213      	str	r3, [r2, #32]
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fd fe39 	bl	8000798 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fd fe35 	bl	8000798 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0b1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCC_OscConfig+0x37e>
 8002b4c:	e014      	b.n	8002b78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fd fe23 	bl	8000798 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fd fe1f 	bl	8000798 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e09b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d061      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d146      	bne.n	8002c36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fd fdf3 	bl	8000798 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fd fdef 	bl	8000798 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e06d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4921      	ldr	r1, [pc, #132]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a19      	ldr	r1, [r3, #32]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	430b      	orrs	r3, r1
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fd fdc3 	bl	8000798 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fd fdbf 	bl	8000798 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e03d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46a>
 8002c34:	e035      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fd fdac 	bl	8000798 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fd fda8 	bl	8000798 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e026      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x498>
 8002c62:	e01e      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e019      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_OscConfig+0x500>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0d0      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4965      	ldr	r1, [pc, #404]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d040      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e073      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06b      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4936      	ldr	r1, [pc, #216]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fd fcfa 	bl	8000798 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fd fcf6 	bl	8000798 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e053      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d210      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e3e:	f000 f821 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	5ccb      	ldrb	r3, [r1, r3]
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1cc>)
 8002e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc58 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08008498 	.word	0x08008498
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x36>
 8002eb2:	e027      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	613b      	str	r3, [r7, #16]
      break;
 8002eb8:	e027      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0c5b      	lsrs	r3, r3, #17
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e004      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	613b      	str	r3, [r7, #16]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f06:	613b      	str	r3, [r7, #16]
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	693b      	ldr	r3, [r7, #16]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	007a1200 	.word	0x007a1200
 8002f20:	080084a8 	.word	0x080084a8
 8002f24:	080084b8 	.word	0x080084b8
 8002f28:	003d0900 	.word	0x003d0900

08002f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <RCC_Delay+0x34>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <RCC_Delay+0x38>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0a5b      	lsrs	r3, r3, #9
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f48:	bf00      	nop
  }
  while (Delay --);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e5a      	subs	r2, r3, #1
 8002f4e:	60fa      	str	r2, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <RCC_Delay+0x1c>
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	20000000 	.word	0x20000000
 8002f64:	10624dd3 	.word	0x10624dd3

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d07d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f88:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10d      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	61d3      	str	r3, [r2, #28]
 8002fa0:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d118      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a42      	ldr	r2, [pc, #264]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc8:	f7fd fbe6 	bl	8000798 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	e008      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fd fbe2 	bl	8000798 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e06d      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02e      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d027      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800300c:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003022:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fd fbb1 	bl	8000798 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fbad 	bl	8000798 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e036      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4917      	ldr	r1, [pc, #92]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	4313      	orrs	r3, r2
 800306c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	490b      	ldr	r1, [pc, #44]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42420440 	.word	0x42420440

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fa42 	bl	8000584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fa16 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e041      	b.n	8003208 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd fa11 	bl	80005c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 f9c7 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_TIM_OC_Start+0x24>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e022      	b.n	800327a <HAL_TIM_OC_Start+0x6a>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d109      	bne.n	800324e <HAL_TIM_OC_Start+0x3e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e015      	b.n	800327a <HAL_TIM_OC_Start+0x6a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d109      	bne.n	8003268 <HAL_TIM_OC_Start+0x58>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e008      	b.n	800327a <HAL_TIM_OC_Start+0x6a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e05e      	b.n	8003340 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_TIM_OC_Start+0x82>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003290:	e013      	b.n	80032ba <HAL_TIM_OC_Start+0xaa>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_OC_Start+0x92>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a0:	e00b      	b.n	80032ba <HAL_TIM_OC_Start+0xaa>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_OC_Start+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b0:	e003      	b.n	80032ba <HAL_TIM_OC_Start+0xaa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc35 	bl	8003b32 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_TIM_OC_Start+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_TIM_OC_Start+0x138>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_TIM_OC_Start+0xfa>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d009      	beq.n	800330a <HAL_TIM_OC_Start+0xfa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_OC_Start+0x13c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_TIM_OC_Start+0xfa>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_TIM_OC_Start+0x140>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d010      	beq.n	800333e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	e007      	b.n	800333e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800

08003354 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e041      	b.n	80033ec <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f839 	bl	80033f4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 f8d5 	bl	8003544 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0208 	bic.w	r2, r2, #8
 80033a8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e048      	b.n	80034b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d839      	bhi.n	80034a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003471 	.word	0x08003471
 8003440:	080034a9 	.word	0x080034a9
 8003444:	080034a9 	.word	0x080034a9
 8003448:	080034a9 	.word	0x080034a9
 800344c:	0800347f 	.word	0x0800347f
 8003450:	080034a9 	.word	0x080034a9
 8003454:	080034a9 	.word	0x080034a9
 8003458:	080034a9 	.word	0x080034a9
 800345c:	0800348d 	.word	0x0800348d
 8003460:	080034a9 	.word	0x080034a9
 8003464:	080034a9 	.word	0x080034a9
 8003468:	080034a9 	.word	0x080034a9
 800346c:	0800349b 	.word	0x0800349b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f8c6 	bl	8003608 <TIM_OC1_SetConfig>
      break;
 800347c:	e017      	b.n	80034ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f925 	bl	80036d4 <TIM_OC2_SetConfig>
      break;
 800348a:	e010      	b.n	80034ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f988 	bl	80037a8 <TIM_OC3_SetConfig>
      break;
 8003498:	e009      	b.n	80034ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f9eb 	bl	800387c <TIM_OC4_SetConfig>
      break;
 80034a6:	e002      	b.n	80034ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e031      	b.n	800353c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa14 	bl	8003918 <TIM_SlaveTimer_SetConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e018      	b.n	800353c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003518:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003528:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	615a      	str	r2, [r3, #20]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800

08003608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 0201 	bic.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10c      	bne.n	800367e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0308 	bic.w	r3, r3, #8
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0210 	bic.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10d      	bne.n	8003750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40012c00 	.word	0x40012c00

0800387c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <TIM_OC4_SetConfig+0x98>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00

08003918 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003934:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f023 0307 	bic.w	r3, r3, #7
 8003946:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b70      	cmp	r3, #112	; 0x70
 8003960:	d01a      	beq.n	8003998 <TIM_SlaveTimer_SetConfig+0x80>
 8003962:	2b70      	cmp	r3, #112	; 0x70
 8003964:	d860      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 8003966:	2b60      	cmp	r3, #96	; 0x60
 8003968:	d054      	beq.n	8003a14 <TIM_SlaveTimer_SetConfig+0xfc>
 800396a:	2b60      	cmp	r3, #96	; 0x60
 800396c:	d85c      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 800396e:	2b50      	cmp	r3, #80	; 0x50
 8003970:	d046      	beq.n	8003a00 <TIM_SlaveTimer_SetConfig+0xe8>
 8003972:	2b50      	cmp	r3, #80	; 0x50
 8003974:	d858      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d019      	beq.n	80039ae <TIM_SlaveTimer_SetConfig+0x96>
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d854      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d055      	beq.n	8003a2e <TIM_SlaveTimer_SetConfig+0x116>
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d850      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d051      	beq.n	8003a2e <TIM_SlaveTimer_SetConfig+0x116>
 800398a:	2b20      	cmp	r3, #32
 800398c:	d84c      	bhi.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04d      	beq.n	8003a2e <TIM_SlaveTimer_SetConfig+0x116>
 8003992:	2b10      	cmp	r3, #16
 8003994:	d04b      	beq.n	8003a2e <TIM_SlaveTimer_SetConfig+0x116>
 8003996:	e047      	b.n	8003a28 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	f000 f8a4 	bl	8003af4 <TIM_ETR_SetConfig>
      break;
 80039ac:	e040      	b.n	8003a30 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d101      	bne.n	80039ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e03b      	b.n	8003a32 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
      break;
 80039fe:	e017      	b.n	8003a30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f000 f814 	bl	8003a3a <TIM_TI1_ConfigInputStage>
      break;
 8003a12:	e00d      	b.n	8003a30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a20:	461a      	mov	r2, r3
 8003a22:	f000 f838 	bl	8003a96 <TIM_TI2_ConfigInputStage>
      break;
 8003a26:	e003      	b.n	8003a30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	e000      	b.n	8003a30 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003a2e:	bf00      	nop
  }

  return status;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f023 0201 	bic.w	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 030a 	bic.w	r3, r3, #10
 8003a76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0210 	bic.w	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	031b      	lsls	r3, r3, #12
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2201      	movs	r2, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e046      	b.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10c      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e03d      	b.n	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cda:	b084      	sub	sp, #16
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	f107 0014 	add.w	r0, r7, #20
 8003ce8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	b004      	add	sp, #16
 8003cf8:	4770      	bx	lr

08003cfa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d0a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d2e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d72:	b084      	sub	sp, #16
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	f107 0014 	add.w	r0, r7, #20
 8003d80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	b004      	add	sp, #16
 8003db0:	4770      	bx	lr
	...

08003db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b09d      	sub	sp, #116	; 0x74
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	78db      	ldrb	r3, [r3, #3]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d81f      	bhi.n	8003e26 <USB_ActivateEndpoint+0x72>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <USB_ActivateEndpoint+0x38>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e2f 	.word	0x08003e2f
 8003df8:	08003e0b 	.word	0x08003e0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e08:	e012      	b.n	8003e30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e16:	e00b      	b.n	8003e30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003e24:	e004      	b.n	8003e30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003e2c:	e000      	b.n	8003e30 <USB_ActivateEndpoint+0x7c>
      break;
 8003e2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	441a      	add	r2, r3
 8003e80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7b1b      	ldrb	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 8178 	bne.w	8004192 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8084 	beq.w	8003fb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	88db      	ldrh	r3, [r3, #6]
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	827b      	strh	r3, [r7, #18]
 8003eee:	8a7b      	ldrh	r3, [r7, #18]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <USB_ActivateEndpoint+0x17c>
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	823b      	strh	r3, [r7, #16]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	8a3b      	ldrh	r3, [r7, #16]
 8003f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	78db      	ldrb	r3, [r3, #3]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d020      	beq.n	8003f7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4e:	81bb      	strh	r3, [r7, #12]
 8003f50:	89bb      	ldrh	r3, [r7, #12]
 8003f52:	f083 0320 	eor.w	r3, r3, #32
 8003f56:	81bb      	strh	r3, [r7, #12]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	89bb      	ldrh	r3, [r7, #12]
 8003f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]
 8003f78:	e2d5      	b.n	8004526 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f90:	81fb      	strh	r3, [r7, #14]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	441a      	add	r2, r3
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]
 8003fb2:	e2b8      	b.n	8004526 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	4413      	add	r3, r2
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	011a      	lsls	r2, r3, #4
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	88db      	ldrh	r3, [r3, #6]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	4413      	add	r3, r2
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	011a      	lsls	r2, r3, #4
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	4413      	add	r3, r2
 8004006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004016:	b29a      	uxth	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b3e      	cmp	r3, #62	; 0x3e
 8004022:	d91d      	bls.n	8004060 <USB_ActivateEndpoint+0x2ac>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <USB_ActivateEndpoint+0x28a>
 8004038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800403a:	3b01      	subs	r3, #1
 800403c:	66bb      	str	r3, [r7, #104]	; 0x68
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29a      	uxth	r2, r3
 8004044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004046:	b29b      	uxth	r3, r3
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	b29b      	uxth	r3, r3
 800404c:	4313      	orrs	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004058:	b29a      	uxth	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e026      	b.n	80040ae <USB_ActivateEndpoint+0x2fa>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <USB_ActivateEndpoint+0x2ca>
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004076:	b29a      	uxth	r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	e017      	b.n	80040ae <USB_ActivateEndpoint+0x2fa>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	66bb      	str	r3, [r7, #104]	; 0x68
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <USB_ActivateEndpoint+0x2e4>
 8004092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004094:	3301      	adds	r3, #1
 8004096:	66bb      	str	r3, [r7, #104]	; 0x68
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80040bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01b      	beq.n	80040fe <USB_ActivateEndpoint+0x34a>
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	843b      	strh	r3, [r7, #32]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	8c3b      	ldrh	r3, [r7, #32]
 80040ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d124      	bne.n	8004150 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411c:	83bb      	strh	r3, [r7, #28]
 800411e:	8bbb      	ldrh	r3, [r7, #28]
 8004120:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004124:	83bb      	strh	r3, [r7, #28]
 8004126:	8bbb      	ldrh	r3, [r7, #28]
 8004128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800412c:	83bb      	strh	r3, [r7, #28]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	8bbb      	ldrh	r3, [r7, #28]
 800413a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]
 800414e:	e1ea      	b.n	8004526 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	83fb      	strh	r3, [r7, #30]
 8004168:	8bfb      	ldrh	r3, [r7, #30]
 800416a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800416e:	83fb      	strh	r3, [r7, #30]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	8bfb      	ldrh	r3, [r7, #30]
 800417c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418c:	b29b      	uxth	r3, r3
 800418e:	8013      	strh	r3, [r2, #0]
 8004190:	e1c9      	b.n	8004526 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	78db      	ldrb	r3, [r3, #3]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d11e      	bne.n	80041d8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80041c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80041ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004224:	4413      	add	r3, r2
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011a      	lsls	r2, r3, #4
 800422e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004230:	4413      	add	r3, r2
 8004232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004236:	65bb      	str	r3, [r7, #88]	; 0x58
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	891b      	ldrh	r3, [r3, #8]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004258:	4413      	add	r3, r2
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	4413      	add	r3, r2
 8004266:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	895b      	ldrh	r3, [r3, #10]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8093 	bne.w	80043ac <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800429a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <USB_ActivateEndpoint+0x526>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80042e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01b      	beq.n	800432a <USB_ActivateEndpoint+0x576>
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	877b      	strh	r3, [r7, #58]	; 0x3a
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004340:	873b      	strh	r3, [r7, #56]	; 0x38
 8004342:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004348:	873b      	strh	r3, [r7, #56]	; 0x38
 800434a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800434c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004350:	873b      	strh	r3, [r7, #56]	; 0x38
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004388:	86fb      	strh	r3, [r7, #54]	; 0x36
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]
 80043aa:	e0bc      	b.n	8004526 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80043bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01d      	beq.n	8004404 <USB_ActivateEndpoint+0x650>
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004414:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01d      	beq.n	800445c <USB_ActivateEndpoint+0x6a8>
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d024      	beq.n	80044ae <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800447e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004482:	f083 0320 	eor.w	r3, r3, #32
 8004486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
 80044ac:	e01d      	b.n	80044ea <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800452a:	4618      	mov	r0, r3
 800452c:	3774      	adds	r7, #116	; 0x74
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004534:	b480      	push	{r7}
 8004536:	b08d      	sub	sp, #52	; 0x34
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	7b1b      	ldrb	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 808e 	bne.w	8004664 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d044      	beq.n	80045da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	81bb      	strh	r3, [r7, #12]
 800455e:	89bb      	ldrh	r3, [r7, #12]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <USB_DeactivateEndpoint+0x6c>
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	817b      	strh	r3, [r7, #10]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004598:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	813b      	strh	r3, [r7, #8]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	893b      	ldrh	r3, [r7, #8]
 80045c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8013      	strh	r3, [r2, #0]
 80045d8:	e192      	b.n	8004900 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	827b      	strh	r3, [r7, #18]
 80045e8:	8a7b      	ldrh	r3, [r7, #18]
 80045ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01b      	beq.n	800462a <USB_DeactivateEndpoint+0xf6>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	823b      	strh	r3, [r7, #16]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	8a3b      	ldrh	r3, [r7, #16]
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004640:	81fb      	strh	r3, [r7, #14]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
 8004662:	e14d      	b.n	8004900 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 80a5 	bne.w	80047b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	843b      	strh	r3, [r7, #32]
 800467c:	8c3b      	ldrh	r3, [r7, #32]
 800467e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <USB_DeactivateEndpoint+0x18a>
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	83fb      	strh	r3, [r7, #30]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8bfb      	ldrh	r3, [r7, #30]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	83bb      	strh	r3, [r7, #28]
 80046cc:	8bbb      	ldrh	r3, [r7, #28]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01b      	beq.n	800470e <USB_DeactivateEndpoint+0x1da>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	837b      	strh	r3, [r7, #26]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	8b7b      	ldrh	r3, [r7, #26]
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	833b      	strh	r3, [r7, #24]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	8b3b      	ldrh	r3, [r7, #24]
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	82fb      	strh	r3, [r7, #22]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	8afb      	ldrh	r3, [r7, #22]
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004794:	82bb      	strh	r3, [r7, #20]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8abb      	ldrh	r3, [r7, #20]
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]
 80047b6:	e0a3      	b.n	8004900 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <USB_DeactivateEndpoint+0x2d4>
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <USB_DeactivateEndpoint+0x324>
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	853b      	strh	r3, [r7, #40]	; 0x28
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800487c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488c:	b29b      	uxth	r3, r3
 800488e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	847b      	strh	r3, [r7, #34]	; 0x22
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3734      	adds	r7, #52	; 0x34
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b0c2      	sub	sp, #264	; 0x108
 8004910:	af00      	add	r7, sp, #0
 8004912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491a:	6018      	str	r0, [r3, #0]
 800491c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004924:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	2b01      	cmp	r3, #1
 8004934:	f040 86b7 	bne.w	80056a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800493c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d908      	bls.n	8004966 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004964:	e007      	b.n	8004976 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	7b1b      	ldrb	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d13a      	bne.n	80049fc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	88da      	ldrh	r2, [r3, #6]
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80049a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f001 fc9c 	bl	80062ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011a      	lsls	r2, r3, #4
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	f000 be1f 	b.w	800563a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	f040 8462 	bne.w	80052d2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	f240 83df 	bls.w	80051ea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a98:	1ad2      	subs	r2, r2, r3
 8004a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 81c7 	beq.w	8004e5c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d177      	bne.n	8004bda <USB_EPStartXfer+0x2ce>
 8004aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	4413      	add	r3, r2
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	011a      	lsls	r2, r3, #4
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b3c:	d921      	bls.n	8004b82 <USB_EPStartXfer+0x276>
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <USB_EPStartXfer+0x252>
 8004b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e050      	b.n	8004c24 <USB_EPStartXfer+0x318>
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <USB_EPStartXfer+0x294>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	e041      	b.n	8004c24 <USB_EPStartXfer+0x318>
 8004ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <USB_EPStartXfer+0x2b4>
 8004bb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e024      	b.n	8004c24 <USB_EPStartXfer+0x318>
 8004bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11c      	bne.n	8004c24 <USB_EPStartXfer+0x318>
 8004bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	4413      	add	r3, r2
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 8004c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	011a      	lsls	r2, r3, #4
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	4413      	add	r3, r2
 8004c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	895b      	ldrh	r3, [r3, #10]
 8004c30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6959      	ldr	r1, [r3, #20]
 8004c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c52:	6800      	ldr	r0, [r0, #0]
 8004c54:	f001 fb49 	bl	80062ea <USB_WritePMA>
            ep->xfer_buff += len;
 8004c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c68:	441a      	add	r2, r3
 8004c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a1a      	ldr	r2, [r3, #32]
 8004c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90f      	bls.n	8004cb2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	621a      	str	r2, [r3, #32]
 8004cb0:	e00e      	b.n	8004cd0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d177      	bne.n	8004dd0 <USB_EPStartXfer+0x4c4>
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	4413      	add	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	011a      	lsls	r2, r3, #4
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d30:	2b3e      	cmp	r3, #62	; 0x3e
 8004d32:	d921      	bls.n	8004d78 <USB_EPStartXfer+0x46c>
 8004d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <USB_EPStartXfer+0x448>
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	029b      	lsls	r3, r3, #10
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4313      	orrs	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e056      	b.n	8004e26 <USB_EPStartXfer+0x51a>
 8004d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <USB_EPStartXfer+0x48a>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e047      	b.n	8004e26 <USB_EPStartXfer+0x51a>
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <USB_EPStartXfer+0x4aa>
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	3301      	adds	r3, #1
 8004db2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	029b      	lsls	r3, r3, #10
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e02a      	b.n	8004e26 <USB_EPStartXfer+0x51a>
 8004dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d122      	bne.n	8004e26 <USB_EPStartXfer+0x51a>
 8004de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	4413      	add	r3, r2
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	011a      	lsls	r2, r3, #4
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	4413      	add	r3, r2
 8004e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	891b      	ldrh	r3, [r3, #8]
 8004e32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6959      	ldr	r1, [r3, #20]
 8004e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e54:	6800      	ldr	r0, [r0, #0]
 8004e56:	f001 fa48 	bl	80062ea <USB_WritePMA>
 8004e5a:	e3ee      	b.n	800563a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d177      	bne.n	8004f5c <USB_EPStartXfer+0x650>
 8004e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8c:	4413      	add	r3, r2
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	011a      	lsls	r2, r3, #4
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ebe:	d921      	bls.n	8004f04 <USB_EPStartXfer+0x5f8>
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <USB_EPStartXfer+0x5d4>
 8004ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eda:	3b01      	subs	r3, #1
 8004edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e056      	b.n	8004fb2 <USB_EPStartXfer+0x6a6>
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <USB_EPStartXfer+0x616>
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	e047      	b.n	8004fb2 <USB_EPStartXfer+0x6a6>
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <USB_EPStartXfer+0x636>
 8004f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e02a      	b.n	8004fb2 <USB_EPStartXfer+0x6a6>
 8004f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d122      	bne.n	8004fb2 <USB_EPStartXfer+0x6a6>
 8004f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	4413      	add	r3, r2
 8004f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	011a      	lsls	r2, r3, #4
 8004f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	891b      	ldrh	r3, [r3, #8]
 8004fbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fdc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fe0:	6800      	ldr	r0, [r0, #0]
 8004fe2:	f001 f982 	bl	80062ea <USB_WritePMA>
            ep->xfer_buff += len;
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	441a      	add	r2, r3
 8004ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d90f      	bls.n	8005040 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005030:	1ad2      	subs	r2, r2, r3
 8005032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	621a      	str	r2, [r3, #32]
 800503e:	e00e      	b.n	800505e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800505e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	643b      	str	r3, [r7, #64]	; 0x40
 800506a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d177      	bne.n	800516a <USB_EPStartXfer+0x85e>
 800507a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
 8005086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	4413      	add	r3, r2
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
 800509e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	011a      	lsls	r2, r3, #4
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	4413      	add	r3, r2
 80050b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ca:	2b3e      	cmp	r3, #62	; 0x3e
 80050cc:	d921      	bls.n	8005112 <USB_EPStartXfer+0x806>
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <USB_EPStartXfer+0x7e2>
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	3b01      	subs	r3, #1
 80050ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e050      	b.n	80051b4 <USB_EPStartXfer+0x8a8>
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <USB_EPStartXfer+0x824>
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e041      	b.n	80051b4 <USB_EPStartXfer+0x8a8>
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <USB_EPStartXfer+0x844>
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	3301      	adds	r3, #1
 800514c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29a      	uxth	r2, r3
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	b29b      	uxth	r3, r3
 800515c:	029b      	lsls	r3, r3, #10
 800515e:	b29b      	uxth	r3, r3
 8005160:	4313      	orrs	r3, r2
 8005162:	b29a      	uxth	r2, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e024      	b.n	80051b4 <USB_EPStartXfer+0x8a8>
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d11c      	bne.n	80051b4 <USB_EPStartXfer+0x8a8>
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518e:	4413      	add	r3, r2
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	011a      	lsls	r2, r3, #4
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	4413      	add	r3, r2
 80051a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	895b      	ldrh	r3, [r3, #10]
 80051c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051e2:	6800      	ldr	r0, [r0, #0]
 80051e4:	f001 f881 	bl	80062ea <USB_WritePMA>
 80051e8:	e227      	b.n	800563a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80051fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005276:	4413      	add	r3, r2
 8005278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	011a      	lsls	r2, r3, #4
 8005288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528a:	4413      	add	r3, r2
 800528c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005290:	65bb      	str	r3, [r7, #88]	; 0x58
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005296:	b29a      	uxth	r2, r3
 8005298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800529c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	891b      	ldrh	r3, [r3, #8]
 80052a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	f001 f80d 	bl	80062ea <USB_WritePMA>
 80052d0:	e1b3      	b.n	800563a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a1a      	ldr	r2, [r3, #32]
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 80c6 	beq.w	80054a4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	673b      	str	r3, [r7, #112]	; 0x70
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d177      	bne.n	8005424 <USB_EPStartXfer+0xb18>
 8005334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005354:	4413      	add	r3, r2
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68
 8005358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	011a      	lsls	r2, r3, #4
 8005366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005368:	4413      	add	r3, r2
 800536a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800536e:	667b      	str	r3, [r7, #100]	; 0x64
 8005370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537a:	b29a      	uxth	r2, r3
 800537c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005384:	2b3e      	cmp	r3, #62	; 0x3e
 8005386:	d921      	bls.n	80053cc <USB_EPStartXfer+0xac0>
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <USB_EPStartXfer+0xa9c>
 800539e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053a2:	3b01      	subs	r3, #1
 80053a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e050      	b.n	800546e <USB_EPStartXfer+0xb62>
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <USB_EPStartXfer+0xade>
 80053d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	e041      	b.n	800546e <USB_EPStartXfer+0xb62>
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <USB_EPStartXfer+0xafe>
 8005400:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005404:	3301      	adds	r3, #1
 8005406:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800540a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29a      	uxth	r2, r3
 8005410:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29b      	uxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b29a      	uxth	r2, r3
 800541e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	e024      	b.n	800546e <USB_EPStartXfer+0xb62>
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d11c      	bne.n	800546e <USB_EPStartXfer+0xb62>
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005448:	4413      	add	r3, r2
 800544a:	673b      	str	r3, [r7, #112]	; 0x70
 800544c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	011a      	lsls	r2, r3, #4
 800545a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800545c:	4413      	add	r3, r2
 800545e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	b29a      	uxth	r2, r3
 800546a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800546e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	895b      	ldrh	r3, [r3, #10]
 800547a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6959      	ldr	r1, [r3, #20]
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548e:	b29b      	uxth	r3, r3
 8005490:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005494:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005498:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f000 ff24 	bl	80062ea <USB_WritePMA>
 80054a2:	e0ca      	b.n	800563a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d177      	bne.n	80055a4 <USB_EPStartXfer+0xc98>
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054d4:	4413      	add	r3, r2
 80054d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	011a      	lsls	r2, r3, #4
 80054e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054e8:	4413      	add	r3, r2
 80054ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	2b3e      	cmp	r3, #62	; 0x3e
 8005506:	d921      	bls.n	800554c <USB_EPStartXfer+0xc40>
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <USB_EPStartXfer+0xc1c>
 800551e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005522:	3b01      	subs	r3, #1
 8005524:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005544:	b29a      	uxth	r2, r3
 8005546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e05c      	b.n	8005606 <USB_EPStartXfer+0xcfa>
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <USB_EPStartXfer+0xc5e>
 8005554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005562:	b29a      	uxth	r2, r3
 8005564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e04d      	b.n	8005606 <USB_EPStartXfer+0xcfa>
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <USB_EPStartXfer+0xc7e>
 8005580:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005584:	3301      	adds	r3, #1
 8005586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800558a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005594:	b29b      	uxth	r3, r3
 8005596:	029b      	lsls	r3, r3, #10
 8005598:	b29b      	uxth	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e030      	b.n	8005606 <USB_EPStartXfer+0xcfa>
 80055a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d128      	bne.n	8005606 <USB_EPStartXfer+0xcfa>
 80055b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d8:	4413      	add	r3, r2
 80055da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	011a      	lsls	r2, r3, #4
 80055ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005604:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	891b      	ldrh	r3, [r3, #8]
 8005612:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6959      	ldr	r1, [r3, #20]
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	b29b      	uxth	r3, r3
 8005628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800562c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005630:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005634:	6800      	ldr	r0, [r0, #0]
 8005636:	f000 fe58 	bl	80062ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	f083 0310 	eor.w	r3, r3, #16
 8005668:	817b      	strh	r3, [r7, #10]
 800566a:	897b      	ldrh	r3, [r7, #10]
 800566c:	f083 0320 	eor.w	r3, r3, #32
 8005670:	817b      	strh	r3, [r7, #10]
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	897b      	ldrh	r3, [r7, #10]
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]
 80056a2:	f000 bcde 	b.w	8006062 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	7b1b      	ldrb	r3, [r3, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 80bb 	bne.w	800582e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d917      	bls.n	8005704 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	619a      	str	r2, [r3, #24]
 8005702:	e00e      	b.n	8005722 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573e:	b29b      	uxth	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005746:	4413      	add	r3, r2
 8005748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800574c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	011a      	lsls	r2, r3, #4
 800575a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800575e:	4413      	add	r3, r2
 8005760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005774:	b29a      	uxth	r2, r3
 8005776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005780:	2b3e      	cmp	r3, #62	; 0x3e
 8005782:	d924      	bls.n	80057ce <USB_EPStartXfer+0xec2>
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <USB_EPStartXfer+0xe98>
 800579a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800579e:	3b01      	subs	r3, #1
 80057a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	029b      	lsls	r3, r3, #10
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	f000 bc10 	b.w	8005fee <USB_EPStartXfer+0x16e2>
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10c      	bne.n	80057f0 <USB_EPStartXfer+0xee4>
 80057d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e3fe      	b.n	8005fee <USB_EPStartXfer+0x16e2>
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <USB_EPStartXfer+0xf04>
 8005806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800580a:	3301      	adds	r3, #1
 800580c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29a      	uxth	r2, r3
 8005818:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800581c:	b29b      	uxth	r3, r3
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	b29b      	uxth	r3, r3
 8005822:	4313      	orrs	r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e3df      	b.n	8005fee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800582e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	2b02      	cmp	r3, #2
 800583c:	f040 8218 	bne.w	8005c70 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 809d 	bne.w	800598c <USB_EPStartXfer+0x1080>
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005876:	4413      	add	r3, r2
 8005878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800587c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800588e:	4413      	add	r3, r2
 8005890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b3e      	cmp	r3, #62	; 0x3e
 80058ba:	d92b      	bls.n	8005914 <USB_EPStartXfer+0x1008>
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <USB_EPStartXfer+0xfe0>
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	3b01      	subs	r3, #1
 80058e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e070      	b.n	80059f6 <USB_EPStartXfer+0x10ea>
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <USB_EPStartXfer+0x1032>
 8005924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005934:	b29a      	uxth	r2, r3
 8005936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e05b      	b.n	80059f6 <USB_EPStartXfer+0x10ea>
 800593e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <USB_EPStartXfer+0x1062>
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800596e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	b29b      	uxth	r3, r3
 800597c:	029b      	lsls	r3, r3, #10
 800597e:	b29b      	uxth	r3, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e034      	b.n	80059f6 <USB_EPStartXfer+0x10ea>
 800598c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d12c      	bne.n	80059f6 <USB_EPStartXfer+0x10ea>
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059c0:	4413      	add	r3, r2
 80059c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f040 809d 	bne.w	8005b50 <USB_EPStartXfer+0x1244>
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	011a      	lsls	r2, r3, #4
 8005a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7e:	d92b      	bls.n	8005ad8 <USB_EPStartXfer+0x11cc>
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <USB_EPStartXfer+0x11a4>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e069      	b.n	8005bac <USB_EPStartXfer+0x12a0>
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10c      	bne.n	8005b02 <USB_EPStartXfer+0x11f6>
 8005ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e054      	b.n	8005bac <USB_EPStartXfer+0x12a0>
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <USB_EPStartXfer+0x1226>
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e02d      	b.n	8005bac <USB_EPStartXfer+0x12a0>
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d125      	bne.n	8005bac <USB_EPStartXfer+0x12a0>
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b76:	4413      	add	r3, r2
 8005b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	011a      	lsls	r2, r3, #4
 8005b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005baa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8218 	beq.w	8005fee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <USB_EPStartXfer+0x12ea>
 8005bea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10d      	bne.n	8005c12 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 81f5 	bne.w	8005fee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 81ee 	bne.w	8005fee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
 8005c6e:	e1be      	b.n	8005fee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 81b4 	bne.w	8005fea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d917      	bls.n	8005cce <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	619a      	str	r2, [r3, #24]
 8005ccc:	e00e      	b.n	8005cec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8085 	bne.w	8005e08 <USB_EPStartXfer+0x14fc>
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d22:	4413      	add	r3, r2
 8005d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	011a      	lsls	r2, r3, #4
 8005d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5e:	d923      	bls.n	8005da8 <USB_EPStartXfer+0x149c>
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <USB_EPStartXfer+0x1474>
 8005d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	029b      	lsls	r3, r3, #10
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e060      	b.n	8005e6a <USB_EPStartXfer+0x155e>
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <USB_EPStartXfer+0x14be>
 8005db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e04f      	b.n	8005e6a <USB_EPStartXfer+0x155e>
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <USB_EPStartXfer+0x14de>
 8005de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de4:	3301      	adds	r3, #1
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	029b      	lsls	r3, r3, #10
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	e030      	b.n	8005e6a <USB_EPStartXfer+0x155e>
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d128      	bne.n	8005e6a <USB_EPStartXfer+0x155e>
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8085 	bne.w	8005f94 <USB_EPStartXfer+0x1688>
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ed0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eea:	d923      	bls.n	8005f34 <USB_EPStartXfer+0x1628>
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <USB_EPStartXfer+0x1600>
 8005f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f06:	3b01      	subs	r3, #1
 8005f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e05c      	b.n	8005fee <USB_EPStartXfer+0x16e2>
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10c      	bne.n	8005f56 <USB_EPStartXfer+0x164a>
 8005f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e04b      	b.n	8005fee <USB_EPStartXfer+0x16e2>
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0x166a>
 8005f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e02c      	b.n	8005fee <USB_EPStartXfer+0x16e2>
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d124      	bne.n	8005fee <USB_EPStartXfer+0x16e2>
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fba:	4413      	add	r3, r2
 8005fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e001      	b.n	8005fee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e03a      	b.n	8006064 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800601c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006020:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006024:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800602c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d020      	beq.n	80060c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006096:	81bb      	strh	r3, [r7, #12]
 8006098:	89bb      	ldrh	r3, [r7, #12]
 800609a:	f083 0310 	eor.w	r3, r3, #16
 800609e:	81bb      	strh	r3, [r7, #12]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	89bb      	ldrh	r3, [r7, #12]
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
 80060c0:	e01f      	b.n	8006102 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	81fb      	strh	r3, [r7, #14]
 80060da:	89fb      	ldrh	r3, [r7, #14]
 80060dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060e0:	81fb      	strh	r3, [r7, #14]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	89fb      	ldrh	r3, [r7, #14]
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800610e:	b480      	push	{r7}
 8006110:	b087      	sub	sp, #28
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	7b1b      	ldrb	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 809d 	bne.w	800625c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d04c      	beq.n	80061c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	823b      	strh	r3, [r7, #16]
 8006138:	8a3b      	ldrh	r3, [r7, #16]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01b      	beq.n	800617a <USB_EPClearStall+0x6c>
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	81fb      	strh	r3, [r7, #14]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	89fb      	ldrh	r3, [r7, #14]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	78db      	ldrb	r3, [r3, #3]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d06c      	beq.n	800625c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	81bb      	strh	r3, [r7, #12]
 800619a:	89bb      	ldrh	r3, [r7, #12]
 800619c:	f083 0320 	eor.w	r3, r3, #32
 80061a0:	81bb      	strh	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	89bb      	ldrh	r3, [r7, #12]
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
 80061c2:	e04b      	b.n	800625c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	82fb      	strh	r3, [r7, #22]
 80061d2:	8afb      	ldrh	r3, [r7, #22]
 80061d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <USB_EPClearStall+0x106>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	82bb      	strh	r3, [r7, #20]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	8abb      	ldrh	r3, [r7, #20]
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	827b      	strh	r3, [r7, #18]
 800622c:	8a7b      	ldrh	r3, [r7, #18]
 800622e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006232:	827b      	strh	r3, [r7, #18]
 8006234:	8a7b      	ldrh	r3, [r7, #18]
 8006236:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800623a:	827b      	strh	r3, [r7, #18]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	8a7b      	ldrh	r3, [r7, #18]
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr

0800628e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b08b      	sub	sp, #44	; 0x2c
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	4611      	mov	r1, r2
 80062f6:	461a      	mov	r2, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	80fb      	strh	r3, [r7, #6]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006300:	88bb      	ldrh	r3, [r7, #4]
 8006302:	3301      	adds	r3, #1
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	005a      	lsls	r2, r3, #1
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	e01e      	b.n	8006362 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	3301      	adds	r3, #1
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	b21a      	sxth	r2, r3
 8006334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006338:	4313      	orrs	r3, r2
 800633a:	b21b      	sxth	r3, r3
 800633c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	8a7a      	ldrh	r2, [r7, #18]
 8006342:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	3302      	adds	r3, #2
 8006348:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	3302      	adds	r3, #2
 800634e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	3b01      	subs	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1dd      	bne.n	8006324 <USB_WritePMA+0x3a>
  }
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	372c      	adds	r7, #44	; 0x2c
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006374:	b480      	push	{r7}
 8006376:	b08b      	sub	sp, #44	; 0x2c
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	460b      	mov	r3, r1
 8006384:	80fb      	strh	r3, [r7, #6]
 8006386:	4613      	mov	r3, r2
 8006388:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800638a:	88bb      	ldrh	r3, [r7, #4]
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	e01b      	b.n	80063e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	3302      	adds	r3, #2
 80063ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3301      	adds	r3, #1
 80063d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	3302      	adds	r3, #2
 80063de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	3b01      	subs	r3, #1
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e0      	bne.n	80063ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80063ec:	88bb      	ldrh	r3, [r7, #4]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	701a      	strb	r2, [r3, #0]
  }
}
 8006408:	bf00      	nop
 800640a:	372c      	adds	r7, #44	; 0x2c
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7c1b      	ldrb	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d115      	bne.n	8006456 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800642a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642e:	2202      	movs	r2, #2
 8006430:	2181      	movs	r1, #129	; 0x81
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fe53 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800643e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006442:	2202      	movs	r2, #2
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fe49 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006454:	e012      	b.n	800647c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	2202      	movs	r2, #2
 800645a:	2181      	movs	r1, #129	; 0x81
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fe3e 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	2202      	movs	r2, #2
 800646c:	2101      	movs	r1, #1
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fe35 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800647c:	2308      	movs	r3, #8
 800647e:	2203      	movs	r2, #3
 8006480:	2182      	movs	r1, #130	; 0x82
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fe2b 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800648e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006492:	f001 ff4b 	bl	800832c <USBD_static_malloc>
 8006496:	4602      	mov	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	e026      	b.n	80064fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7c1b      	ldrb	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064e2:	2101      	movs	r1, #1
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 feeb 	bl	80082c0 <USBD_LL_PrepareReceive>
 80064ea:	e007      	b.n	80064fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	2101      	movs	r1, #1
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 fee2 	bl	80082c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006516:	2181      	movs	r1, #129	; 0x81
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fe06 	bl	800812a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006524:	2101      	movs	r1, #1
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fdff 	bl	800812a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006534:	2182      	movs	r1, #130	; 0x82
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fdf7 	bl	800812a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fef1 	bl	8008344 <USBD_static_free>
    pdev->pClassData = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800659a:	2b00      	cmp	r3, #0
 800659c:	d039      	beq.n	8006612 <USBD_CDC_Setup+0x9e>
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d17f      	bne.n	80066a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88db      	ldrh	r3, [r3, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d029      	beq.n	80065fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da11      	bge.n	80065d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80065c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	88d2      	ldrh	r2, [r2, #6]
 80065c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065c8:	6939      	ldr	r1, [r7, #16]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	88db      	ldrh	r3, [r3, #6]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f9da 	bl	800798a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80065d6:	e06b      	b.n	80066b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	785a      	ldrb	r2, [r3, #1]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	88db      	ldrh	r3, [r3, #6]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065ee:	6939      	ldr	r1, [r7, #16]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	88db      	ldrh	r3, [r3, #6]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f9f5 	bl	80079e6 <USBD_CtlPrepareRx>
      break;
 80065fc:	e058      	b.n	80066b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	7850      	ldrb	r0, [r2, #1]
 800660a:	2200      	movs	r2, #0
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4798      	blx	r3
      break;
 8006610:	e04e      	b.n	80066b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b0b      	cmp	r3, #11
 8006618:	d02e      	beq.n	8006678 <USBD_CDC_Setup+0x104>
 800661a:	2b0b      	cmp	r3, #11
 800661c:	dc38      	bgt.n	8006690 <USBD_CDC_Setup+0x11c>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <USBD_CDC_Setup+0xb4>
 8006622:	2b0a      	cmp	r3, #10
 8006624:	d014      	beq.n	8006650 <USBD_CDC_Setup+0xdc>
 8006626:	e033      	b.n	8006690 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662e:	2b03      	cmp	r3, #3
 8006630:	d107      	bne.n	8006642 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006632:	f107 030c 	add.w	r3, r7, #12
 8006636:	2202      	movs	r2, #2
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 f9a5 	bl	800798a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006640:	e02e      	b.n	80066a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f936 	bl	80078b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e027      	b.n	80066a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	2b03      	cmp	r3, #3
 8006658:	d107      	bne.n	800666a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800665a:	f107 030f 	add.w	r3, r7, #15
 800665e:	2201      	movs	r2, #1
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 f991 	bl	800798a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006668:	e01a      	b.n	80066a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f922 	bl	80078b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006672:	2302      	movs	r3, #2
 8006674:	75fb      	strb	r3, [r7, #23]
          break;
 8006676:	e013      	b.n	80066a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	2b03      	cmp	r3, #3
 8006680:	d00d      	beq.n	800669e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f916 	bl	80078b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800668a:	2302      	movs	r3, #2
 800668c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800668e:	e006      	b.n	800669e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 f90f 	bl	80078b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006698:	2302      	movs	r3, #2
 800669a:	75fb      	strb	r3, [r7, #23]
          break;
 800669c:	e000      	b.n	80066a0 <USBD_CDC_Setup+0x12c>
          break;
 800669e:	bf00      	nop
      }
      break;
 80066a0:	e006      	b.n	80066b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f906 	bl	80078b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80066aa:	2302      	movs	r3, #2
 80066ac:	75fb      	strb	r3, [r7, #23]
      break;
 80066ae:	bf00      	nop
  }

  return ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d03a      	beq.n	8006756 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	331c      	adds	r3, #28
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d029      	beq.n	800674a <USBD_CDC_DataIn+0x90>
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	331c      	adds	r3, #28
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	78f9      	ldrb	r1, [r7, #3]
 800670a:	68b8      	ldr	r0, [r7, #8]
 800670c:	460b      	mov	r3, r1
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4403      	add	r3, r0
 8006716:	3338      	adds	r3, #56	; 0x38
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	fbb2 f1f3 	udiv	r1, r2, r3
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d110      	bne.n	800674a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	331c      	adds	r3, #28
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800673c:	78f9      	ldrb	r1, [r7, #3]
 800673e:	2300      	movs	r3, #0
 8006740:	2200      	movs	r2, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fd99 	bl	800827a <USBD_LL_Transmit>
 8006748:	e003      	b.n	8006752 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fdc4 	bl	8008306 <USBD_LL_GetRxDataSize>
 800677e:	4602      	mov	r2, r0
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067a4:	4611      	mov	r1, r2
 80067a6:	4798      	blx	r3

    return USBD_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e000      	b.n	80067ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80067ac:	2302      	movs	r3, #2
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <USBD_CDC_EP0_RxReady+0x46>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067d6:	2bff      	cmp	r3, #255	; 0xff
 80067d8:	d010      	beq.n	80067fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80067e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067f0:	b292      	uxth	r2, r2
 80067f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2243      	movs	r2, #67	; 0x43
 8006814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000094 	.word	0x20000094

08006828 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2243      	movs	r2, #67	; 0x43
 8006834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000050 	.word	0x20000050

08006848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2243      	movs	r2, #67	; 0x43
 8006854:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	200000d8 	.word	0x200000d8

08006868 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	220a      	movs	r2, #10
 8006874:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006876:	4b03      	ldr	r3, [pc, #12]	; (8006884 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	2000000c 	.word	0x2000000c

08006888 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006892:	2302      	movs	r3, #2
 8006894:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d017      	beq.n	8006956 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fcc0 	bl	80082c0 <USBD_LL_PrepareReceive>
 8006940:	e007      	b.n	8006952 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	2101      	movs	r1, #1
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fcb7 	bl	80082c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006974:	2302      	movs	r3, #2
 8006976:	e01a      	b.n	80069ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	79fa      	ldrb	r2, [r7, #7]
 80069a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 fb24 	bl	8007ff4 <USBD_LL_Init>

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d006      	beq.n	80069d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
 80069d6:	e001      	b.n	80069dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069d8:	2302      	movs	r3, #2
 80069da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fb59 	bl	80080a8 <USBD_LL_Start>

  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a20:	2302      	movs	r3, #2
 8006a22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fed7 	bl	800783e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d016      	beq.n	8006ae2 <USBD_LL_SetupStage+0x6a>
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d81c      	bhi.n	8006af2 <USBD_LL_SetupStage+0x7a>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_LL_SetupStage+0x4a>
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d008      	beq.n	8006ad2 <USBD_LL_SetupStage+0x5a>
 8006ac0:	e017      	b.n	8006af2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9ca 	bl	8006e64 <USBD_StdDevReq>
      break;
 8006ad0:	e01a      	b.n	8006b08 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa2c 	bl	8006f38 <USBD_StdItfReq>
      break;
 8006ae0:	e012      	b.n	8006b08 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa6c 	bl	8006fc8 <USBD_StdEPReq>
      break;
 8006af0:	e00a      	b.n	8006b08 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006af8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fb31 	bl	8008168 <USBD_LL_StallEP>
      break;
 8006b06:	bf00      	nop
  }

  return USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d14b      	bne.n	8006bbe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d134      	bne.n	8006ba2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d919      	bls.n	8006b78 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	1ad2      	subs	r2, r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d203      	bcs.n	8006b66 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	e002      	b.n	8006b6c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 ff56 	bl	8007a22 <USBD_CtlContinueRx>
 8006b76:	e038      	b.n	8006bea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d105      	bne.n	8006b9a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 ff53 	bl	8007a46 <USBD_CtlSendStatus>
 8006ba0:	e023      	b.n	8006bea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	d11e      	bne.n	8006bea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f001 fad6 	bl	8008168 <USBD_LL_StallEP>
 8006bbc:	e015      	b.n	8006bea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d108      	bne.n	8006be6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	7afa      	ldrb	r2, [r7, #11]
 8006bde:	4611      	mov	r1, r2
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	4798      	blx	r3
 8006be4:	e001      	b.n	8006bea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006be6:	2302      	movs	r3, #2
 8006be8:	e000      	b.n	8006bec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d17f      	bne.n	8006d08 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d15c      	bne.n	8006cd2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d915      	bls.n	8006c50 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	1ad2      	subs	r2, r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fec0 	bl	80079c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c42:	2300      	movs	r3, #0
 8006c44:	2200      	movs	r2, #0
 8006c46:	2100      	movs	r1, #0
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f001 fb39 	bl	80082c0 <USBD_LL_PrepareReceive>
 8006c4e:	e04e      	b.n	8006cee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	6912      	ldr	r2, [r2, #16]
 8006c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c5c:	fb01 f202 	mul.w	r2, r1, r2
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d11c      	bne.n	8006ca0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d316      	bcc.n	8006ca0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d20f      	bcs.n	8006ca0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c80:	2200      	movs	r2, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fe9c 	bl	80079c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c92:	2300      	movs	r3, #0
 8006c94:	2200      	movs	r2, #0
 8006c96:	2100      	movs	r1, #0
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 fb11 	bl	80082c0 <USBD_LL_PrepareReceive>
 8006c9e:	e026      	b.n	8006cee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d105      	bne.n	8006cc2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006cc2:	2180      	movs	r1, #128	; 0x80
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 fa4f 	bl	8008168 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fece 	bl	8007a6c <USBD_CtlReceiveStatus>
 8006cd0:	e00d      	b.n	8006cee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d004      	beq.n	8006ce6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f001 fa3d 	bl	8008168 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d11d      	bne.n	8006d34 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fe81 	bl	8006a00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d06:	e015      	b.n	8006d34 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d108      	bne.n	8006d30 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	e001      	b.n	8006d34 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e000      	b.n	8006d36 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f9c6 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2240      	movs	r2, #64	; 0x40
 8006d5e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	2200      	movs	r2, #0
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f9b8 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6852      	ldr	r2, [r2, #4]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	4611      	mov	r1, r2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
  }

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2204      	movs	r2, #4
 8006df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d105      	bne.n	8006e24 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d10b      	bne.n	8006e5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d005      	beq.n	8006e8a <USBD_StdDevReq+0x26>
 8006e7e:	2b40      	cmp	r3, #64	; 0x40
 8006e80:	d84f      	bhi.n	8006f22 <USBD_StdDevReq+0xbe>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <USBD_StdDevReq+0x36>
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d14b      	bne.n	8006f22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      break;
 8006e98:	e048      	b.n	8006f2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	d839      	bhi.n	8006f16 <USBD_StdDevReq+0xb2>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <USBD_StdDevReq+0x44>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ef9 	.word	0x08006ef9
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006f17 	.word	0x08006f17
 8006eb4:	08006f03 	.word	0x08006f03
 8006eb8:	08006f17 	.word	0x08006f17
 8006ebc:	08006edb 	.word	0x08006edb
 8006ec0:	08006ed1 	.word	0x08006ed1
 8006ec4:	08006f17 	.word	0x08006f17
 8006ec8:	08006eef 	.word	0x08006eef
 8006ecc:	08006ee5 	.word	0x08006ee5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9dc 	bl	8007290 <USBD_GetDescriptor>
          break;
 8006ed8:	e022      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb3f 	bl	8007560 <USBD_SetAddress>
          break;
 8006ee2:	e01d      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb7e 	bl	80075e8 <USBD_SetConfig>
          break;
 8006eec:	e018      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fc07 	bl	8007704 <USBD_GetConfig>
          break;
 8006ef6:	e013      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fc37 	bl	800776e <USBD_GetStatus>
          break;
 8006f00:	e00e      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fc65 	bl	80077d4 <USBD_SetFeature>
          break;
 8006f0a:	e009      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fc74 	bl	80077fc <USBD_ClrFeature>
          break;
 8006f14:	e004      	b.n	8006f20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fccc 	bl	80078b6 <USBD_CtlError>
          break;
 8006f1e:	bf00      	nop
      }
      break;
 8006f20:	e004      	b.n	8006f2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fcc6 	bl	80078b6 <USBD_CtlError>
      break;
 8006f2a:	bf00      	nop
  }

  return ret;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop

08006f38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d005      	beq.n	8006f5e <USBD_StdItfReq+0x26>
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d82e      	bhi.n	8006fb4 <USBD_StdItfReq+0x7c>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <USBD_StdItfReq+0x26>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d12a      	bne.n	8006fb4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f64:	3b01      	subs	r3, #1
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d81d      	bhi.n	8006fa6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	889b      	ldrh	r3, [r3, #4]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d813      	bhi.n	8006f9c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <USBD_StdItfReq+0x78>
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fd56 	bl	8007a46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f9a:	e009      	b.n	8006fb0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fc89 	bl	80078b6 <USBD_CtlError>
          break;
 8006fa4:	e004      	b.n	8006fb0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc84 	bl	80078b6 <USBD_CtlError>
          break;
 8006fae:	e000      	b.n	8006fb2 <USBD_StdItfReq+0x7a>
          break;
 8006fb0:	bf00      	nop
      }
      break;
 8006fb2:	e004      	b.n	8006fbe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fc7d 	bl	80078b6 <USBD_CtlError>
      break;
 8006fbc:	bf00      	nop
  }

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d007      	beq.n	8006ff8 <USBD_StdEPReq+0x30>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	f200 8146 	bhi.w	800727a <USBD_StdEPReq+0x2b2>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <USBD_StdEPReq+0x40>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	f040 8141 	bne.w	800727a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
      break;
 8007006:	e13d      	b.n	8007284 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007010:	2b20      	cmp	r3, #32
 8007012:	d10a      	bne.n	800702a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	e12d      	b.n	8007286 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b03      	cmp	r3, #3
 8007030:	d007      	beq.n	8007042 <USBD_StdEPReq+0x7a>
 8007032:	2b03      	cmp	r3, #3
 8007034:	f300 811b 	bgt.w	800726e <USBD_StdEPReq+0x2a6>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d072      	beq.n	8007122 <USBD_StdEPReq+0x15a>
 800703c:	2b01      	cmp	r3, #1
 800703e:	d03a      	beq.n	80070b6 <USBD_StdEPReq+0xee>
 8007040:	e115      	b.n	800726e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007048:	2b02      	cmp	r3, #2
 800704a:	d002      	beq.n	8007052 <USBD_StdEPReq+0x8a>
 800704c:	2b03      	cmp	r3, #3
 800704e:	d015      	beq.n	800707c <USBD_StdEPReq+0xb4>
 8007050:	e02b      	b.n	80070aa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <USBD_StdEPReq+0xaa>
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b80      	cmp	r3, #128	; 0x80
 800705c:	d009      	beq.n	8007072 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 f880 	bl	8008168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 f87c 	bl	8008168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007070:	e020      	b.n	80070b4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc1e 	bl	80078b6 <USBD_CtlError>
              break;
 800707a:	e01b      	b.n	80070b4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	885b      	ldrh	r3, [r3, #2]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10e      	bne.n	80070a2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <USBD_StdEPReq+0xda>
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b80      	cmp	r3, #128	; 0x80
 800708e:	d008      	beq.n	80070a2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	88db      	ldrh	r3, [r3, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f863 	bl	8008168 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fccf 	bl	8007a46 <USBD_CtlSendStatus>

              break;
 80070a8:	e004      	b.n	80070b4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc02 	bl	80078b6 <USBD_CtlError>
              break;
 80070b2:	bf00      	nop
          }
          break;
 80070b4:	e0e0      	b.n	8007278 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d002      	beq.n	80070c6 <USBD_StdEPReq+0xfe>
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d015      	beq.n	80070f0 <USBD_StdEPReq+0x128>
 80070c4:	e026      	b.n	8007114 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <USBD_StdEPReq+0x11e>
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b80      	cmp	r3, #128	; 0x80
 80070d0:	d009      	beq.n	80070e6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f846 	bl	8008168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 f842 	bl	8008168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070e4:	e01c      	b.n	8007120 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fbe4 	bl	80078b6 <USBD_CtlError>
              break;
 80070ee:	e017      	b.n	8007120 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	885b      	ldrh	r3, [r3, #2]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d112      	bne.n	800711e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 f84d 	bl	80081a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc9a 	bl	8007a46 <USBD_CtlSendStatus>
              }
              break;
 8007112:	e004      	b.n	800711e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fbcd 	bl	80078b6 <USBD_CtlError>
              break;
 800711c:	e000      	b.n	8007120 <USBD_StdEPReq+0x158>
              break;
 800711e:	bf00      	nop
          }
          break;
 8007120:	e0aa      	b.n	8007278 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007128:	2b02      	cmp	r3, #2
 800712a:	d002      	beq.n	8007132 <USBD_StdEPReq+0x16a>
 800712c:	2b03      	cmp	r3, #3
 800712e:	d032      	beq.n	8007196 <USBD_StdEPReq+0x1ce>
 8007130:	e097      	b.n	8007262 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <USBD_StdEPReq+0x180>
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d004      	beq.n	8007148 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fbb8 	bl	80078b6 <USBD_CtlError>
                break;
 8007146:	e091      	b.n	800726c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	da0b      	bge.n	8007168 <USBD_StdEPReq+0x1a0>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	3310      	adds	r3, #16
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4413      	add	r3, r2
 8007164:	3304      	adds	r3, #4
 8007166:	e00b      	b.n	8007180 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2202      	movs	r2, #2
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fbfb 	bl	800798a <USBD_CtlSendData>
              break;
 8007194:	e06a      	b.n	800726c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719a:	2b00      	cmp	r3, #0
 800719c:	da11      	bge.n	80071c2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3318      	adds	r3, #24
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d117      	bne.n	80071e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb7b 	bl	80078b6 <USBD_CtlError>
                  break;
 80071c0:	e054      	b.n	800726c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	f003 020f 	and.w	r2, r3, #15
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb68 	bl	80078b6 <USBD_CtlError>
                  break;
 80071e6:	e041      	b.n	800726c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da0b      	bge.n	8007208 <USBD_StdEPReq+0x240>
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	3310      	adds	r3, #16
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	3304      	adds	r3, #4
 8007206:	e00b      	b.n	8007220 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	3304      	adds	r3, #4
 8007220:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <USBD_StdEPReq+0x266>
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d103      	bne.n	8007236 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e00e      	b.n	8007254 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 ffd2 	bl	80081e4 <USBD_LL_IsStallEP>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e002      	b.n	8007254 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2202      	movs	r2, #2
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fb95 	bl	800798a <USBD_CtlSendData>
              break;
 8007260:	e004      	b.n	800726c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb26 	bl	80078b6 <USBD_CtlError>
              break;
 800726a:	bf00      	nop
          }
          break;
 800726c:	e004      	b.n	8007278 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fb20 	bl	80078b6 <USBD_CtlError>
          break;
 8007276:	bf00      	nop
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb1a 	bl	80078b6 <USBD_CtlError>
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	885b      	ldrh	r3, [r3, #2]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b06      	cmp	r3, #6
 80072b2:	f200 8128 	bhi.w	8007506 <USBD_GetDescriptor+0x276>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <USBD_GetDescriptor+0x2c>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	080072f1 	.word	0x080072f1
 80072c4:	08007331 	.word	0x08007331
 80072c8:	08007507 	.word	0x08007507
 80072cc:	08007507 	.word	0x08007507
 80072d0:	080074a7 	.word	0x080074a7
 80072d4:	080074d3 	.word	0x080074d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
      break;
 80072ee:	e112      	b.n	8007516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7c1b      	ldrb	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10d      	bne.n	8007314 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f107 0208 	add.w	r2, r7, #8
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
 8007308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	2202      	movs	r2, #2
 8007310:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007312:	e100      	b.n	8007516 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	f107 0208 	add.w	r2, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	2202      	movs	r2, #2
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e0f2      	b.n	8007516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	885b      	ldrh	r3, [r3, #2]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b05      	cmp	r3, #5
 8007338:	f200 80ac 	bhi.w	8007494 <USBD_GetDescriptor+0x204>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <USBD_GetDescriptor+0xb4>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007391 	.word	0x08007391
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073f9 	.word	0x080073f9
 8007354:	0800742d 	.word	0x0800742d
 8007358:	08007461 	.word	0x08007461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737e:	e091      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa97 	bl	80078b6 <USBD_CtlError>
            err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
          break;
 800738e:	e089      	b.n	80074a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e077      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa7d 	bl	80078b6 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e06f      	b.n	80074a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e05d      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa63 	bl	80078b6 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e055      	b.n	80074a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e043      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa49 	bl	80078b6 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e03b      	b.n	80074a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e029      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa2f 	bl	80078b6 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e021      	b.n	80074a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e00f      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa15 	bl	80078b6 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e007      	b.n	80074a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa0d 	bl	80078b6 <USBD_CtlError>
          err++;
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	3301      	adds	r3, #1
 80074a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074a2:	e038      	b.n	8007516 <USBD_GetDescriptor+0x286>
 80074a4:	e037      	b.n	8007516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7c1b      	ldrb	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f107 0208 	add.w	r2, r7, #8
 80074ba:	4610      	mov	r0, r2
 80074bc:	4798      	blx	r3
 80074be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074c0:	e029      	b.n	8007516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f9f6 	bl	80078b6 <USBD_CtlError>
        err++;
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	3301      	adds	r3, #1
 80074ce:	72fb      	strb	r3, [r7, #11]
      break;
 80074d0:	e021      	b.n	8007516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7c1b      	ldrb	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f107 0208 	add.w	r2, r7, #8
 80074e6:	4610      	mov	r0, r2
 80074e8:	4798      	blx	r3
 80074ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	2207      	movs	r2, #7
 80074f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f4:	e00f      	b.n	8007516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9dc 	bl	80078b6 <USBD_CtlError>
        err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	e007      	b.n	8007516 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f9d4 	bl	80078b6 <USBD_CtlError>
      err++;
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	3301      	adds	r3, #1
 8007512:	72fb      	strb	r3, [r7, #11]
      break;
 8007514:	bf00      	nop
  }

  if (err != 0U)
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11c      	bne.n	8007556 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800751c:	893b      	ldrh	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d011      	beq.n	8007546 <USBD_GetDescriptor+0x2b6>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	88da      	ldrh	r2, [r3, #6]
 800752e:	893b      	ldrh	r3, [r7, #8]
 8007530:	4293      	cmp	r3, r2
 8007532:	bf28      	it	cs
 8007534:	4613      	movcs	r3, r2
 8007536:	b29b      	uxth	r3, r3
 8007538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800753a:	893b      	ldrh	r3, [r7, #8]
 800753c:	461a      	mov	r2, r3
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa22 	bl	800798a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	88db      	ldrh	r3, [r3, #6]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa79 	bl	8007a46 <USBD_CtlSendStatus>
 8007554:	e000      	b.n	8007558 <USBD_GetDescriptor+0x2c8>
    return;
 8007556:	bf00      	nop
    }
  }
}
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	889b      	ldrh	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d130      	bne.n	80075d4 <USBD_SetAddress+0x74>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d12c      	bne.n	80075d4 <USBD_SetAddress+0x74>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	2b7f      	cmp	r3, #127	; 0x7f
 8007580:	d828      	bhi.n	80075d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007594:	2b03      	cmp	r3, #3
 8007596:	d104      	bne.n	80075a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f98b 	bl	80078b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	e01d      	b.n	80075de <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fe44 	bl	800823c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa46 	bl	8007a46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c8:	e009      	b.n	80075de <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	e004      	b.n	80075de <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f96d 	bl	80078b6 <USBD_CtlError>
  }
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	4b41      	ldr	r3, [pc, #260]	; (8007700 <USBD_SetConfig+0x118>)
 80075fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075fc:	4b40      	ldr	r3, [pc, #256]	; (8007700 <USBD_SetConfig+0x118>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d904      	bls.n	800760e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f955 	bl	80078b6 <USBD_CtlError>
 800760c:	e075      	b.n	80076fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	2b02      	cmp	r3, #2
 8007616:	d002      	beq.n	800761e <USBD_SetConfig+0x36>
 8007618:	2b03      	cmp	r3, #3
 800761a:	d023      	beq.n	8007664 <USBD_SetConfig+0x7c>
 800761c:	e062      	b.n	80076e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800761e:	4b38      	ldr	r3, [pc, #224]	; (8007700 <USBD_SetConfig+0x118>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01a      	beq.n	800765c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007626:	4b36      	ldr	r3, [pc, #216]	; (8007700 <USBD_SetConfig+0x118>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2203      	movs	r2, #3
 8007634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007638:	4b31      	ldr	r3, [pc, #196]	; (8007700 <USBD_SetConfig+0x118>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff f9e8 	bl	8006a14 <USBD_SetClassConfig>
 8007644:	4603      	mov	r3, r0
 8007646:	2b02      	cmp	r3, #2
 8007648:	d104      	bne.n	8007654 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f932 	bl	80078b6 <USBD_CtlError>
            return;
 8007652:	e052      	b.n	80076fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9f6 	bl	8007a46 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800765a:	e04e      	b.n	80076fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f9f2 	bl	8007a46 <USBD_CtlSendStatus>
        break;
 8007662:	e04a      	b.n	80076fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007664:	4b26      	ldr	r3, [pc, #152]	; (8007700 <USBD_SetConfig+0x118>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d112      	bne.n	8007692 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007674:	4b22      	ldr	r3, [pc, #136]	; (8007700 <USBD_SetConfig+0x118>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800767e:	4b20      	ldr	r3, [pc, #128]	; (8007700 <USBD_SetConfig+0x118>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff f9e4 	bl	8006a52 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9db 	bl	8007a46 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007690:	e033      	b.n	80076fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <USBD_SetConfig+0x118>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d01d      	beq.n	80076dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff f9d2 	bl	8006a52 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <USBD_SetConfig+0x118>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <USBD_SetConfig+0x118>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff f9a8 	bl	8006a14 <USBD_SetClassConfig>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d104      	bne.n	80076d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f8f2 	bl	80078b6 <USBD_CtlError>
            return;
 80076d2:	e012      	b.n	80076fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9b6 	bl	8007a46 <USBD_CtlSendStatus>
        break;
 80076da:	e00e      	b.n	80076fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9b2 	bl	8007a46 <USBD_CtlSendStatus>
        break;
 80076e2:	e00a      	b.n	80076fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8e5 	bl	80078b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <USBD_SetConfig+0x118>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f9ad 	bl	8006a52 <USBD_ClrClassConfig>
        break;
 80076f8:	bf00      	nop
    }
  }
}
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	2000028c 	.word	0x2000028c

08007704 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d004      	beq.n	8007720 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8cc 	bl	80078b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800771e:	e022      	b.n	8007766 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007726:	2b02      	cmp	r3, #2
 8007728:	dc02      	bgt.n	8007730 <USBD_GetConfig+0x2c>
 800772a:	2b00      	cmp	r3, #0
 800772c:	dc03      	bgt.n	8007736 <USBD_GetConfig+0x32>
 800772e:	e015      	b.n	800775c <USBD_GetConfig+0x58>
 8007730:	2b03      	cmp	r3, #3
 8007732:	d00b      	beq.n	800774c <USBD_GetConfig+0x48>
 8007734:	e012      	b.n	800775c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3308      	adds	r3, #8
 8007740:	2201      	movs	r2, #1
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f920 	bl	800798a <USBD_CtlSendData>
        break;
 800774a:	e00c      	b.n	8007766 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	2201      	movs	r2, #1
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f918 	bl	800798a <USBD_CtlSendData>
        break;
 800775a:	e004      	b.n	8007766 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8a9 	bl	80078b6 <USBD_CtlError>
        break;
 8007764:	bf00      	nop
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777e:	3b01      	subs	r3, #1
 8007780:	2b02      	cmp	r3, #2
 8007782:	d81e      	bhi.n	80077c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	88db      	ldrh	r3, [r3, #6]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d004      	beq.n	8007796 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f891 	bl	80078b6 <USBD_CtlError>
        break;
 8007794:	e01a      	b.n	80077cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f043 0202 	orr.w	r2, r3, #2
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	330c      	adds	r3, #12
 80077b6:	2202      	movs	r2, #2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8e5 	bl	800798a <USBD_CtlSendData>
      break;
 80077c0:	e004      	b.n	80077cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f876 	bl	80078b6 <USBD_CtlError>
      break;
 80077ca:	bf00      	nop
  }
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	885b      	ldrh	r3, [r3, #2]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d106      	bne.n	80077f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f929 	bl	8007a46 <USBD_CtlSendStatus>
  }
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	3b01      	subs	r3, #1
 800780e:	2b02      	cmp	r3, #2
 8007810:	d80b      	bhi.n	800782a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10c      	bne.n	8007834 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f90f 	bl	8007a46 <USBD_CtlSendStatus>
      }
      break;
 8007828:	e004      	b.n	8007834 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f842 	bl	80078b6 <USBD_CtlError>
      break;
 8007832:	e000      	b.n	8007836 <USBD_ClrFeature+0x3a>
      break;
 8007834:	bf00      	nop
  }
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	785a      	ldrb	r2, [r3, #1]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	3302      	adds	r3, #2
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b29a      	uxth	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	3303      	adds	r3, #3
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	b29b      	uxth	r3, r3
 800786c:	4413      	add	r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	3305      	adds	r3, #5
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	b29b      	uxth	r3, r3
 8007888:	4413      	add	r3, r2
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	3306      	adds	r3, #6
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	3307      	adds	r3, #7
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	80da      	strh	r2, [r3, #6]

}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr

080078b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80078c0:	2180      	movs	r1, #128	; 0x80
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fc50 	bl	8008168 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078c8:	2100      	movs	r1, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fc4c 	bl	8008168 <USBD_LL_StallEP>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d032      	beq.n	8007954 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f834 	bl	800795c <USBD_GetLen>
 80078f4:	4603      	mov	r3, r0
 80078f6:	3301      	adds	r3, #1
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	75fa      	strb	r2, [r7, #23]
 8007908:	461a      	mov	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4413      	add	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	75fa      	strb	r2, [r7, #23]
 800791a:	461a      	mov	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4413      	add	r3, r2
 8007920:	2203      	movs	r2, #3
 8007922:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007924:	e012      	b.n	800794c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	7dfa      	ldrb	r2, [r7, #23]
 800792e:	1c51      	adds	r1, r2, #1
 8007930:	75f9      	strb	r1, [r7, #23]
 8007932:	4611      	mov	r1, r2
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	440a      	add	r2, r1
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	75fa      	strb	r2, [r7, #23]
 8007942:	461a      	mov	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4413      	add	r3, r2
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e8      	bne.n	8007926 <USBD_GetString+0x4e>
    }
  }
}
 8007954:	bf00      	nop
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007968:	e005      	b.n	8007976 <USBD_GetLen+0x1a>
  {
    len++;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	3301      	adds	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3301      	adds	r3, #1
 8007974:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f5      	bne.n	800796a <USBD_GetLen+0xe>
  }

  return len;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2202      	movs	r2, #2
 800799c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	2100      	movs	r1, #0
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fc61 	bl	800827a <USBD_LL_Transmit>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	4613      	mov	r3, r2
 80079ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	2100      	movs	r1, #0
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fc4f 	bl	800827a <USBD_LL_Transmit>

  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2203      	movs	r2, #3
 80079f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	2100      	movs	r1, #0
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fc54 	bl	80082c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fc42 	bl	80082c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc0c 	bl	800827a <USBD_LL_Transmit>

  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2205      	movs	r2, #5
 8007a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc1c 	bl	80082c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4912      	ldr	r1, [pc, #72]	; (8007ae4 <MX_USB_DEVICE_Init+0x50>)
 8007a9c:	4812      	ldr	r0, [pc, #72]	; (8007ae8 <MX_USB_DEVICE_Init+0x54>)
 8007a9e:	f7fe ff5f 	bl	8006960 <USBD_Init>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007aa8:	f7f8 fbef 	bl	800028a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007aac:	490f      	ldr	r1, [pc, #60]	; (8007aec <MX_USB_DEVICE_Init+0x58>)
 8007aae:	480e      	ldr	r0, [pc, #56]	; (8007ae8 <MX_USB_DEVICE_Init+0x54>)
 8007ab0:	f7fe ff81 	bl	80069b6 <USBD_RegisterClass>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aba:	f7f8 fbe6 	bl	800028a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007abe:	490c      	ldr	r1, [pc, #48]	; (8007af0 <MX_USB_DEVICE_Init+0x5c>)
 8007ac0:	4809      	ldr	r0, [pc, #36]	; (8007ae8 <MX_USB_DEVICE_Init+0x54>)
 8007ac2:	f7fe fee1 	bl	8006888 <USBD_CDC_RegisterInterface>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007acc:	f7f8 fbdd 	bl	800028a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ad0:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <MX_USB_DEVICE_Init+0x54>)
 8007ad2:	f7fe ff89 	bl	80069e8 <USBD_Start>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007adc:	f7f8 fbd5 	bl	800028a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ae0:	bf00      	nop
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	2000012c 	.word	0x2000012c
 8007ae8:	20000290 	.word	0x20000290
 8007aec:	20000018 	.word	0x20000018
 8007af0:	2000011c 	.word	0x2000011c

08007af4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007af8:	2200      	movs	r2, #0
 8007afa:	4905      	ldr	r1, [pc, #20]	; (8007b10 <CDC_Init_FS+0x1c>)
 8007afc:	4805      	ldr	r0, [pc, #20]	; (8007b14 <CDC_Init_FS+0x20>)
 8007afe:	f7fe fed9 	bl	80068b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b02:	4905      	ldr	r1, [pc, #20]	; (8007b18 <CDC_Init_FS+0x24>)
 8007b04:	4803      	ldr	r0, [pc, #12]	; (8007b14 <CDC_Init_FS+0x20>)
 8007b06:	f7fe feee 	bl	80068e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000954 	.word	0x20000954
 8007b14:	20000290 	.word	0x20000290
 8007b18:	20000554 	.word	0x20000554

08007b1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
	...

08007b2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b23      	cmp	r3, #35	; 0x23
 8007b40:	d84a      	bhi.n	8007bd8 <CDC_Control_FS+0xac>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <CDC_Control_FS+0x1c>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bd9 	.word	0x08007bd9
 8007b68:	08007bd9 	.word	0x08007bd9
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007bd9 	.word	0x08007bd9
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bd9 	.word	0x08007bd9
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007bd9 	.word	0x08007bd9
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007bd9 	.word	0x08007bd9
 8007bd0:	08007bd9 	.word	0x08007bd9
 8007bd4:	08007bd9 	.word	0x08007bd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bd8:	bf00      	nop
  }

  return (USBD_OK);
 8007bda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4810      	ldr	r0, [pc, #64]	; (8007c38 <CDC_Receive_FS+0x50>)
 8007bf6:	f7fe fe76 	bl	80068e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bfa:	480f      	ldr	r0, [pc, #60]	; (8007c38 <CDC_Receive_FS+0x50>)
 8007bfc:	f7fe fe86 	bl	800690c <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	2100      	movs	r1, #0
 8007c04:	480d      	ldr	r0, [pc, #52]	; (8007c3c <CDC_Receive_FS+0x54>)
 8007c06:	f000 fbdd 	bl	80083c4 <memset>
  uint8_t len = (uint8_t)*Len;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4809      	ldr	r0, [pc, #36]	; (8007c3c <CDC_Receive_FS+0x54>)
 8007c18:	f000 fc00 	bl	800841c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fbce 	bl	80083c4 <memset>

  fill_buffer_flag = 1;
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <CDC_Receive_FS+0x58>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8007c2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20000290 	.word	0x20000290
 8007c3c:	20000198 	.word	0x20000198
 8007c40:	200001d8 	.word	0x200001d8

08007c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2212      	movs	r2, #18
 8007c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000148 	.word	0x20000148

08007c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2204      	movs	r2, #4
 8007c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c7a:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	2000015c 	.word	0x2000015c

08007c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4907      	ldr	r1, [pc, #28]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ca2:	4808      	ldr	r0, [pc, #32]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ca4:	f7ff fe18 	bl	80078d8 <USBD_GetString>
 8007ca8:	e004      	b.n	8007cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4904      	ldr	r1, [pc, #16]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cae:	4805      	ldr	r0, [pc, #20]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cb0:	f7ff fe12 	bl	80078d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000d54 	.word	0x20000d54
 8007cc4:	08008450 	.word	0x08008450

08007cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cd8:	4804      	ldr	r0, [pc, #16]	; (8007cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cda:	f7ff fdfd 	bl	80078d8 <USBD_GetString>
  return USBD_StrDesc;
 8007cde:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000d54 	.word	0x20000d54
 8007cec:	08008468 	.word	0x08008468

08007cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	221a      	movs	r2, #26
 8007d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d02:	f000 f843 	bl	8007d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d06:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000160 	.word	0x20000160

08007d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d105      	bne.n	8007d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d2a:	4808      	ldr	r0, [pc, #32]	; (8007d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d2c:	f7ff fdd4 	bl	80078d8 <USBD_GetString>
 8007d30:	e004      	b.n	8007d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4904      	ldr	r1, [pc, #16]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d36:	4805      	ldr	r0, [pc, #20]	; (8007d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d38:	f7ff fdce 	bl	80078d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000d54 	.word	0x20000d54
 8007d4c:	0800847c 	.word	0x0800847c

08007d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4907      	ldr	r1, [pc, #28]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d66:	4808      	ldr	r0, [pc, #32]	; (8007d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d68:	f7ff fdb6 	bl	80078d8 <USBD_GetString>
 8007d6c:	e004      	b.n	8007d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4904      	ldr	r1, [pc, #16]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d72:	4805      	ldr	r0, [pc, #20]	; (8007d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d74:	f7ff fdb0 	bl	80078d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000d54 	.word	0x20000d54
 8007d88:	08008488 	.word	0x08008488

08007d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d92:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <Get_SerialNum+0x44>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <Get_SerialNum+0x48>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <Get_SerialNum+0x4c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007db2:	2208      	movs	r2, #8
 8007db4:	4909      	ldr	r1, [pc, #36]	; (8007ddc <Get_SerialNum+0x50>)
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f814 	bl	8007de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	4908      	ldr	r1, [pc, #32]	; (8007de0 <Get_SerialNum+0x54>)
 8007dc0:	68b8      	ldr	r0, [r7, #8]
 8007dc2:	f000 f80f 	bl	8007de4 <IntToUnicode>
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	1ffff7e8 	.word	0x1ffff7e8
 8007dd4:	1ffff7ec 	.word	0x1ffff7ec
 8007dd8:	1ffff7f0 	.word	0x1ffff7f0
 8007ddc:	20000162 	.word	0x20000162
 8007de0:	20000172 	.word	0x20000172

08007de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
 8007dfa:	e027      	b.n	8007e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	0f1b      	lsrs	r3, r3, #28
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d80b      	bhi.n	8007e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	0f1b      	lsrs	r3, r3, #28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	440b      	add	r3, r1
 8007e14:	3230      	adds	r2, #48	; 0x30
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	e00a      	b.n	8007e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	0f1b      	lsrs	r3, r3, #28
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4619      	mov	r1, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3237      	adds	r2, #55	; 0x37
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
 8007e4c:	7dfa      	ldrb	r2, [r7, #23]
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3d3      	bcc.n	8007dfc <IntToUnicode+0x18>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <HAL_PCD_MspInit+0x54>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d11b      	bne.n	8007eaa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <HAL_PCD_MspInit+0x58>)
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	4a10      	ldr	r2, [pc, #64]	; (8007eb8 <HAL_PCD_MspInit+0x58>)
 8007e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e7c:	61d3      	str	r3, [r2, #28]
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <HAL_PCD_MspInit+0x58>)
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2013      	movs	r0, #19
 8007e90:	f7f8 fd63 	bl	800095a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007e94:	2013      	movs	r0, #19
 8007e96:	f7f8 fd7c 	bl	8000992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	2014      	movs	r0, #20
 8007ea0:	f7f8 fd5b 	bl	800095a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ea4:	2014      	movs	r0, #20
 8007ea6:	f7f8 fd74 	bl	8000992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40005c00 	.word	0x40005c00
 8007eb8:	40021000 	.word	0x40021000

08007ebc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f7fe fdd0 	bl	8006a78 <USBD_LL_SetupStage>
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007ef2:	78fa      	ldrb	r2, [r7, #3]
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	440b      	add	r3, r1
 8007f00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	f7fe fe02 	bl	8006b12 <USBD_LL_DataOutStage>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	440b      	add	r3, r1
 8007f36:	333c      	adds	r3, #60	; 0x3c
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7fe fe59 	bl	8006bf4 <USBD_LL_DataInStage>
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe ff69 	bl	8006e30 <USBD_LL_SOF>
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d001      	beq.n	8007f7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f7a:	f7f8 f986 	bl	800028a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe ff19 	bl	8006dc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe fed2 	bl	8006d3e <USBD_LL_Reset>
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe ff13 	bl	8006dde <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <HAL_PCD_SuspendCallback+0x30>)
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	4a03      	ldr	r2, [pc, #12]	; (8007fd4 <HAL_PCD_SuspendCallback+0x30>)
 8007fc6:	f043 0306 	orr.w	r3, r3, #6
 8007fca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed00 	.word	0xe000ed00

08007fd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe ff0d 	bl	8006e06 <USBD_LL_Resume>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ffc:	4a28      	ldr	r2, [pc, #160]	; (80080a0 <USBD_LL_Init+0xac>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <USBD_LL_Init+0xac>)
 8008008:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800800c:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <USBD_LL_Init+0xac>)
 800800e:	4a25      	ldr	r2, [pc, #148]	; (80080a4 <USBD_LL_Init+0xb0>)
 8008010:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008012:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <USBD_LL_Init+0xac>)
 8008014:	2208      	movs	r2, #8
 8008016:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008018:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <USBD_LL_Init+0xac>)
 800801a:	2202      	movs	r2, #2
 800801c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800801e:	4b20      	ldr	r3, [pc, #128]	; (80080a0 <USBD_LL_Init+0xac>)
 8008020:	2200      	movs	r2, #0
 8008022:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008024:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <USBD_LL_Init+0xac>)
 8008026:	2200      	movs	r2, #0
 8008028:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <USBD_LL_Init+0xac>)
 800802c:	2200      	movs	r2, #0
 800802e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008030:	481b      	ldr	r0, [pc, #108]	; (80080a0 <USBD_LL_Init+0xac>)
 8008032:	f7f8 fe4d 	bl	8000cd0 <HAL_PCD_Init>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800803c:	f7f8 f925 	bl	800028a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008046:	2318      	movs	r3, #24
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	f7fa fb6c 	bl	8002728 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008056:	2358      	movs	r3, #88	; 0x58
 8008058:	2200      	movs	r2, #0
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	f7fa fb64 	bl	8002728 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008066:	23c0      	movs	r3, #192	; 0xc0
 8008068:	2200      	movs	r2, #0
 800806a:	2181      	movs	r1, #129	; 0x81
 800806c:	f7fa fb5c 	bl	8002728 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008076:	f44f 7388 	mov.w	r3, #272	; 0x110
 800807a:	2200      	movs	r2, #0
 800807c:	2101      	movs	r1, #1
 800807e:	f7fa fb53 	bl	8002728 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800808c:	2200      	movs	r2, #0
 800808e:	2182      	movs	r1, #130	; 0x82
 8008090:	f7fa fb4a 	bl	8002728 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000f54 	.word	0x20000f54
 80080a4:	40005c00 	.word	0x40005c00

080080a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f8 ff05 	bl	8000ece <HAL_PCD_Start>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f94e 	bl	800836c <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	4608      	mov	r0, r1
 80080e8:	4611      	mov	r1, r2
 80080ea:	461a      	mov	r2, r3
 80080ec:	4603      	mov	r3, r0
 80080ee:	70fb      	strb	r3, [r7, #3]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70bb      	strb	r3, [r7, #2]
 80080f4:	4613      	mov	r3, r2
 80080f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008106:	78bb      	ldrb	r3, [r7, #2]
 8008108:	883a      	ldrh	r2, [r7, #0]
 800810a:	78f9      	ldrb	r1, [r7, #3]
 800810c:	f7f9 f85a 	bl	80011c4 <HAL_PCD_EP_Open>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f928 	bl	800836c <USBD_Get_USB_Status>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008120:	7bbb      	ldrb	r3, [r7, #14]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7f9 f898 	bl	800127e <HAL_PCD_EP_Close>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f909 	bl	800836c <USBD_Get_USB_Status>
 800815a:	4603      	mov	r3, r0
 800815c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7f9 f940 	bl	800140c <HAL_PCD_EP_SetStall>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f8ea 	bl	800836c <USBD_Get_USB_Status>
 8008198:	4603      	mov	r3, r0
 800819a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819c:	7bbb      	ldrb	r3, [r7, #14]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c0:	78fa      	ldrb	r2, [r7, #3]
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f9 f981 	bl	80014cc <HAL_PCD_EP_ClrStall>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f8cb 	bl	800836c <USBD_Get_USB_Status>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081da:	7bbb      	ldrb	r3, [r7, #14]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da0c      	bge.n	800821a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	440b      	add	r3, r1
 8008214:	3302      	adds	r3, #2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	e00b      	b.n	8008232 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008220:	68f9      	ldr	r1, [r7, #12]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	440b      	add	r3, r1
 800822c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008230:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr

0800823c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 ff8d 	bl	800117a <HAL_PCD_SetAddress>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f880 	bl	800836c <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	461a      	mov	r2, r3
 8008286:	460b      	mov	r3, r1
 8008288:	72fb      	strb	r3, [r7, #11]
 800828a:	4613      	mov	r3, r2
 800828c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800829c:	893b      	ldrh	r3, [r7, #8]
 800829e:	7af9      	ldrb	r1, [r7, #11]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	f7f9 f87c 	bl	800139e <HAL_PCD_EP_Transmit>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f85d 	bl	800836c <USBD_Get_USB_Status>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	607a      	str	r2, [r7, #4]
 80082ca:	461a      	mov	r2, r3
 80082cc:	460b      	mov	r3, r1
 80082ce:	72fb      	strb	r3, [r7, #11]
 80082d0:	4613      	mov	r3, r2
 80082d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	7af9      	ldrb	r1, [r7, #11]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	f7f9 f811 	bl	800130e <HAL_PCD_EP_Receive>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f83a 	bl	800836c <USBD_Get_USB_Status>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7f9 f827 	bl	8001370 <HAL_PCD_EP_GetRxCount>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <USBD_static_malloc+0x14>)
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	bc80      	pop	{r7}
 800833e:	4770      	bx	lr
 8008340:	20001244 	.word	0x20001244

08008344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr

08008356 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d817      	bhi.n	80083b0 <USBD_Get_USB_Status+0x44>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBD_Get_USB_Status+0x1c>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008399 	.word	0x08008399
 800838c:	0800839f 	.word	0x0800839f
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083ab 	.word	0x080083ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e00b      	b.n	80083b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e008      	b.n	80083b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e005      	b.n	80083b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e002      	b.n	80083b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083b0:	2302      	movs	r3, #2
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	bf00      	nop
  }
  return usb_status;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop

080083c4 <memset>:
 80083c4:	4603      	mov	r3, r0
 80083c6:	4402      	add	r2, r0
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d100      	bne.n	80083ce <memset+0xa>
 80083cc:	4770      	bx	lr
 80083ce:	f803 1b01 	strb.w	r1, [r3], #1
 80083d2:	e7f9      	b.n	80083c8 <memset+0x4>

080083d4 <__libc_init_array>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	2600      	movs	r6, #0
 80083d8:	4d0c      	ldr	r5, [pc, #48]	; (800840c <__libc_init_array+0x38>)
 80083da:	4c0d      	ldr	r4, [pc, #52]	; (8008410 <__libc_init_array+0x3c>)
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	42a6      	cmp	r6, r4
 80083e2:	d109      	bne.n	80083f8 <__libc_init_array+0x24>
 80083e4:	f000 f828 	bl	8008438 <_init>
 80083e8:	2600      	movs	r6, #0
 80083ea:	4d0a      	ldr	r5, [pc, #40]	; (8008414 <__libc_init_array+0x40>)
 80083ec:	4c0a      	ldr	r4, [pc, #40]	; (8008418 <__libc_init_array+0x44>)
 80083ee:	1b64      	subs	r4, r4, r5
 80083f0:	10a4      	asrs	r4, r4, #2
 80083f2:	42a6      	cmp	r6, r4
 80083f4:	d105      	bne.n	8008402 <__libc_init_array+0x2e>
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fc:	4798      	blx	r3
 80083fe:	3601      	adds	r6, #1
 8008400:	e7ee      	b.n	80083e0 <__libc_init_array+0xc>
 8008402:	f855 3b04 	ldr.w	r3, [r5], #4
 8008406:	4798      	blx	r3
 8008408:	3601      	adds	r6, #1
 800840a:	e7f2      	b.n	80083f2 <__libc_init_array+0x1e>
 800840c:	080084bc 	.word	0x080084bc
 8008410:	080084bc 	.word	0x080084bc
 8008414:	080084bc 	.word	0x080084bc
 8008418:	080084c0 	.word	0x080084c0

0800841c <memcpy>:
 800841c:	440a      	add	r2, r1
 800841e:	4291      	cmp	r1, r2
 8008420:	f100 33ff 	add.w	r3, r0, #4294967295
 8008424:	d100      	bne.n	8008428 <memcpy+0xc>
 8008426:	4770      	bx	lr
 8008428:	b510      	push	{r4, lr}
 800842a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842e:	4291      	cmp	r1, r2
 8008430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008434:	d1f9      	bne.n	800842a <memcpy+0xe>
 8008436:	bd10      	pop	{r4, pc}

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
